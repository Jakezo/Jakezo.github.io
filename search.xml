<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP-02</title>
      <link href="2021/01/02/JSP-02/"/>
      <url>2021/01/02/JSP-02/</url>
      
        <content type="html"><![CDATA[<h2 id="DBCP-Database-Connection-Pool"><a href="#DBCP-Database-Connection-Pool" class="headerlink" title="DBCP (Database Connection Pool)"></a>DBCP (Database Connection Pool)</h2><hr><h2 id="DAO-생성"><a href="#DAO-생성" class="headerlink" title="DAO 생성"></a>DAO 생성</h2><pre><code class="java">package dao;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.sql.DataSource;import dto.BlueDto;public class BlueDao &#123;// 필드private Connection con;private PreparedStatement ps;private ResultSet rs;private String sql;// 그 동안 사용하던 DriverManager 클래스를 사용하지 않기 때문에// getConnection() 메소드를 만들어서 사용하지 않는다.// DBCP 방식은 Connection을 DataSource 클래스가 관리한다.// 앞으로는 DataSource 객체가 제공하는 getConnection() 메소드를 사용한다.// DataSource 객체 만들기 (새로운 작업)private static DataSource dataSource;// static &#123; &#125;  // static 블록에서 static 필드의 초기화를 할 수 있다.static &#123;    try &#123;        Context context = new InitialContext();        dataSource = (DataSource)context.lookup(&quot;java:comp/env/jdbc/oracle&quot;);        // Tomcat의 경우 java:comp/env/ 를 prefix로 사용한다.        // context.xml의 &lt;Resource&gt;태그의 name속성이 jdbc/oracle이다.    &#125; catch (NamingException e) &#123;        e.printStackTrace();    &#125;&#125;// Singleton patternprivate BlueDao() &#123; &#125;private static BlueDao blueDao = new BlueDao();public static BlueDao getInstance() &#123;    return blueDao;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-24</title>
      <link href="2021/01/02/java-24/"/>
      <url>2021/01/02/java-24/</url>
      
        <content type="html"><![CDATA[<p>sdfsdfdsafsdf</p><p>##java</p><blockquote><p>자바 공부해봅시다</p></blockquote><p>아거 안올라갔냐 고래</p><pre><code class="java">package ex01;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class Ex01_servlet */@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-8</title>
      <link href="2021/01/02/JSP-8/"/>
      <url>2021/01/02/JSP-8/</url>
      
        <content type="html"><![CDATA[<p>sddf</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-02</title>
      <link href="2021/01/02/java-02/"/>
      <url>2021/01/02/java-02/</url>
      
        <content type="html"><![CDATA[<p>s</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-7</title>
      <link href="2021/01/02/JSP-7/"/>
      <url>2021/01/02/JSP-7/</url>
      
        <content type="html"><![CDATA[<p>dsffas</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-5</title>
      <link href="2021/01/02/JSP-5/"/>
      <url>2021/01/02/JSP-5/</url>
      
        <content type="html"><![CDATA[<p>fd</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-4</title>
      <link href="2021/01/02/JSP-4/"/>
      <url>2021/01/02/JSP-4/</url>
      
        <content type="html"><![CDATA[<p>dsfsdf</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-22</title>
      <link href="2021/01/02/JSP-22/"/>
      <url>2021/01/02/JSP-22/</url>
      
        <content type="html"><![CDATA[<p>##java</p><blockquote><p>자바 공부해봅시다</p></blockquote><p>아거 안올라갔냐</p><pre><code class="java">package ex01;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class Ex01_servlet */@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-01</title>
      <link href="2021/01/02/JSP-01/"/>
      <url>2021/01/02/JSP-01/</url>
      
        <content type="html"><![CDATA[<p>wed</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp</title>
      <link href="2021/01/02/jsp/"/>
      <url>2021/01/02/jsp/</url>
      
        <content type="html"><![CDATA[<p>스크립트릿 쉬벌</p><pre><code class="s">1. Java Server Page2. HTML 문서내에서 JAVA 코드를 사용할 수 있는 서블릿(Servlet) 기반의 서버측 스크립트 언어이다    JSP 스크립트 요소    1. &lt;%@ 지시어 %&gt; : 지시어 (directive)    2. &lt;%! 선언부 %&gt; : 선언부 (declaration), 전역변수 선언, 메소드 정의    3. &lt;%= 표현식 %&gt; : 표현식 (expression), 결과 출력(변수, 메소드 호출 결과, 식)    4. &lt;% 스크립트릿 %&gt; : 스크립트릿 (scriptlet), Java 코드</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="2021/01/02/Java/"/>
      <url>2021/01/02/Java/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my new pff</title>
      <link href="2021/01/02/my-new-pff/"/>
      <url>2021/01/02/my-new-pff/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my new poas</title>
      <link href="2021/01/02/my-new-poas/"/>
      <url>2021/01/02/my-new-poas/</url>
      
        <content type="html"><![CDATA[<p>##java</p><blockquote><p>자바 공부해봅시다</p></blockquote><pre><code class="java">package ex01;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class Ex01_servlet */@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP-6</title>
      <link href="2021/01/01/JSP-6/"/>
      <url>2021/01/01/JSP-6/</url>
      
        <content type="html"><![CDATA[<p>sdfsdf</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/01/hello-world/"/>
      <url>2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>네이버 API CAPTCHA</title>
      <link href="2020/12/21/javacode/"/>
      <url>2020/12/21/javacode/</url>
      
        <content type="html"><![CDATA[<style type="text/css">    #title{        color: pink;    }    h3{        color: coral;    }</style><h2 id="title">네이버 API CAPCHA를 이용한 로그인 페이지 구현</h2><hr><p>로그인 시 자동 입력 방지를 위해 사람의 눈으로 식별가능한 문자가 포함된 이미지를 전송하고 입력값을 검증하는 REST API 입니다.</p><p><strong>목차</strong></p><ul><li><a href="#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%8E%98%EC%9D%B4%EC%A7%80">1. 인덱스 페이지</a></li><li><a href="#servlet%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-controller">2. Servlet을 이용한 Controller</a></li><li><a href="#pathnredirect-%EC%99%80-command">3. pathNRedirect 와 command</a></li><li><a href="#index%EC%9D%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%98%EB%9F%AC-%EA%B0%80%EA%B8%B0">4. index의 로그인하러 가기</a></li><li><a href="#%EC%BA%A1%EC%B0%A8-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-getimagecaptchacommand-%EC%83%9D%EC%84%B1">5. 캡차 이미지 생성을 위한 GetImageCaptchaCommand 생성</a></li><li><a href="#index%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-loginpage%EB%A1%9C-%EC%9D%B4%EB%8F%99">6. index페이지에서 loginPage로 이동</a></li><li><a href="#loginpage%EC%9D%98-logindo-%EC%9A%94%EC%B2%AD-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EC%9E%91%EC%84%B1">7. loginPage의 login.do 요청 처리를 위한 컨트롤러 작성</a></li><li><a href="#logindo-%EC%9D%98-%EB%AA%A8%EB%8D%B8-inputkeycheckcommand-%EC%83%9D%EC%84%B1">8. login.do 의 모델 InputKeyCheckCommand 생성</a></li><li><a href="#captcha%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%98-%EA%B2%B0%EA%B3%BC-%EC%B6%9C%EB%A0%A5">9. Captcha이미지와 입력값의 결과 출력</a></li><li><a href="#%EB%A7%88%EC%B9%98%EB%A9%B0">마치며</a></li></ul><h3 id="인덱스-페이지ddsddddddddddddddddd"><a href="#인덱스-페이지ddsddddddddddddddddd" class="headerlink" title="인덱스 페이지ddsddddddddddddddddd"></a>인덱스 페이지ddsddddddddddddddddd</h3><hr><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;/18_CAPCHA/getImageCaptcha.do&quot;&gt;로그인하러 가기&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>로그인 페이지로 이동하기 위한 인덱스 페이지 생성</p><h3 id="Servlet을-이용한-Controller"><a href="#Servlet을-이용한-Controller" class="headerlink" title="Servlet을 이용한 Controller"></a>Servlet을 이용한 Controller</h3><hr><pre><code class="java">package controller;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.Command;import command.GetImageCaptchaCommand;import command.InputKeyCheckCommand;import common.PathNRedirect;@WebServlet(&quot;*.do&quot;) // .do suffix가 .do인 모든 요청을 처리하는 Controllerpublic class Controller extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public Controller() &#123;        super();        // TODO Auto-generated constructor stub    &#125;protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    request.setCharacterEncoding(&quot;utf-8&quot;);    response.setContentType(&quot;text/html; charset=UTF-8&quot;);    String requestUri = request.getRequestURI(); // requestUri 요청 주소 전체를 의미        // /18_CAPCHA/*.do    String contextPath = request.getContextPath(); // ContextPath: 프로젝트 이름 18_CAPCHA// /18_CAPCHA    String cmd = requestUri.substring(contextPath.length()); // /*.do    PathNRedirect pathNRedirect = null;    Command command = null;</code></pre><h3 id="pathNRedirect-와-command"><a href="#pathNRedirect-와-command" class="headerlink" title="pathNRedirect 와 command"></a>pathNRedirect 와 command</h3><hr><p>경로와 redirect 여부를 반환해줄 <strong>pathNRedirect</strong> 클래스와 MVC패턴 에서 Model을 공통으로 처리해줄 <strong>Command</strong> 인터페이스를 생성한다.</p><ul><li><strong>PathNRedirect</strong></li></ul><pre><code class="java">package common;public class PathNRedirect &#123;    private String path;    private boolean isRedirect;    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123; // Redirect 여부를 묻는 메소드 true: forward | false: redirect        this.isRedirect = isRedirect;     &#125;&#125;</code></pre><ul><li><strong>Command</strong></li></ul><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface Command &#123;  public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><h3 id="index의-로그인하러-가기"><a href="#index의-로그인하러-가기" class="headerlink" title="index의 로그인하러 가기"></a>index의 로그인하러 가기</h3><hr><p><a href="#servlet%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-controller">Controller</a> 의 doGet메소드에 추가 작성</p><pre><code class="java">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    request.setCharacterEncoding(&quot;utf-8&quot;);    response.setContentType(&quot;text/html; charset=UTF-8&quot;);    String requestUri = request.getRequestURI(); // requestUri 요청 주소 전체를 의미        // /18_CAPCHA/*.do    String contextPath = request.getContextPath(); // ContextPath: 프로젝트 이름 18_CAPCHA// /18_CAPCHA    String cmd = requestUri.substring(contextPath.length()); // /*.do    PathNRedirect pathNRedirect = null;    Command command = null;    switch(cmd)&#123;    case &quot;/getImageCaptcha.do&quot;:        command = new GetImageCaptchaCommand();        pathNRedirect = command.execute(request, response);        break;    &#125;</code></pre><p><a href="#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%8E%98%EC%9D%B4%EC%A7%80">인덱스 페이지</a>의 <code>로그인하러 가기</code><br>의 /getImageCaptcha.do 요청을 Controller에서 처리해 준다.</p><blockquote><p>로그인을 하러 가면 캡차 이미지가 생성됨</p></blockquote><h3 id="캡차-이미지-생성을-위한-GetImageCaptchaCommand-생성"><a href="#캡차-이미지-생성을-위한-GetImageCaptchaCommand-생성" class="headerlink" title="캡차 이미지 생성을 위한 GetImageCaptchaCommand 생성"></a>캡차 이미지 생성을 위한 GetImageCaptchaCommand 생성</h3><hr><p><strong>캡차 키 발급 요청</strong> 과  <strong>이미지를 다운받는다.</strong></p><pre><code class="java">package command;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.Date;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import common.PathNRedirect;public class GetImageCaptchaCommand implements Command &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        // 네이버 캡차 API        // 1) 캡차 키 발급 요청하기        // 2) 캡차 이미지 요청하기        String clientId = &quot;u7aGTrFmp005OR4CJWy4&quot;; //애플리케이션 클라이언트 아이디값&quot;;        String clientSecret = &quot;V00UJonEUP&quot;; //애플리케이션 클라이언트 시크릿값&quot;;        // 1) 캡차 키 발급 요청하기        String code = &quot;0&quot;; // 키 발급시 0,  캡차 이미지 비교시 1로 세팅        String apiURL = &quot;https://openapi.naver.com/v1/captcha/nkey?code=&quot; + code;        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        String responseBody = get(apiURL, requestHeaders);        // System.out.println(responseBody);  // &#123;&quot;key&quot;:&quot;bgbl5MwSZRnQOllo&quot;&#125;        // responseBody는 &#123;&quot;key&quot;:&quot;bgbl5MwSZRnQOllo&quot;&#125;와 같은 형식의 JSON 데이터        // json-simple-1.1.1.jar를 이용해서 responseBody에서 &quot;bgbl5MwSZRnQOllo&quot;를 뺀다.        JSONParser parser = new JSONParser();        JSONObject obj = null;        try &#123;            obj = (JSONObject)parser.parse(responseBody);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // 입력값 비교(InputKeyCheckCommand)에서 캡차 키를 필요로 하므로,        // session에 올려 둔다.        // session은 request에서 알아낸다.        HttpSession session = request.getSession();        session.setAttribute(&quot;key&quot;, (String)obj.get(&quot;key&quot;)); // #key session에 보관        // 2) 캡차 이미지 요청하기        String key = (String)obj.get(&quot;key&quot;); // https://openapi.naver.com/v1/captcha/nkey 호출로 받은 키값        // 이미지 수신 실패용(아무 키나 넘김) String key = &quot;aldfakjlkajgj;fljg;sl&quot;;        String apiURL2 = &quot;https://openapi.naver.com/v1/captcha/ncaptcha.bin?key=&quot; + key;        // requestHeaders는 1) 캡차 키 발급 요청에서 이미 생성했으므로 또 생성할 필요가 없다.        /*        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        */        // responseBody2        // 1) 성공: 이미지 캡차가 생성되었습니다.        // 2) 실패: &#123;&quot;result&quot;:false,&quot;errorMessage&quot;:&quot;Invalid key.&quot;,&quot;errorCode&quot;:&quot;CT001&quot;&#125;        // String responseBody2 = get2(apiURL2, requestHeaders);        // 성공했을 때는 캡차 이미지 파일이 생성되므로 생성된 파일명을 알아야 한다.        // responseBody2 -&gt; filename        String filename = get2(request, apiURL2, requestHeaders);        // System.out.println(filename);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;login/loginPage.jsp&quot;);        pathNRedirect.setRedirect(false);  // request에 directory, filename 저장되어 있으므로 forward        return pathNRedirect;    &#125;    // 1) 캡차 키 발급 요청용 get() 메소드    private static String get(String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                return readBody(con.getInputStream());            &#125; else &#123; // 에러 발생                return readBody(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    // 1) 캡차 키 발급 요청용 connect() 메소드    // 2) 캡차 이미지 요청용 connect() 메소드    private static HttpURLConnection connect(String apiUrl)&#123;        try &#123;            URL url = new URL(apiUrl);            return (HttpURLConnection)url.openConnection();        &#125; catch (MalformedURLException e) &#123;            throw new RuntimeException(&quot;API URL이 잘못되었습니다. : &quot; + apiUrl, e);        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;연결이 실패했습니다. : &quot; + apiUrl, e);        &#125;    &#125;    // 1) 캡차 키 발급 요청용 readBody() 메소드    private static String readBody(InputStream body)&#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;    // 2) 캡차 이미지 요청용 get2() 메소드    private static String get2(HttpServletRequest request, String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                // getImage()에 request를 전달하려면 get2() 메소드가 HttpServletRequest request를 받아와야 한다.                // 기존: get2(String apiUrl, Map&lt;String, String&gt; requestHeaders) &#123;                // 수정: get2(HttpServletRequest request, String apiUrl, Map&lt;String, String&gt; requestHeaders) &#123;                return getImage(request, con.getInputStream());            &#125; else &#123; // 에러 발생                return error(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    // 2) 캡차 이미지 요청용 getImage() 메소드    private static String getImage(HttpServletRequest request, InputStream is)&#123;        int read;        byte[] bytes = new byte[1024];        // 랜덤한 이름으로 파일 생성(X)        // 현재 시간: timestamp으로 파일 생성(O)        String filename = Long.valueOf(new Date().getTime()).toString();        // 캡차 이미지가 저장될 storage 디렉토리의 경로를 알아낸다.        String directory = &quot;storage&quot;;        // HttpServletRequest request가 있어야 realPath를 구할 수 있다.        // 따라서 execute() 메소드에게서 HttpServletRequest request를 받아 온다.        // 기존: getImage(InputStream is) &#123; ... &#125;        // 수정: getImage(HttpServletRequest request, InputStream is)               String realPath = request.getServletContext().getRealPath(directory);        // storage 디렉토리가 안 생기면 강제로 만들어 주는 코드        File dir = new File(realPath);  // File dir에는 storage 디렉토리 정보가 저장된다.        if ( !dir.exists() ) &#123;  // dir(storage 디렉토리)이 없으면            dir.mkdirs();  // 해당 디렉토리(storage 디렉토리)를 생성하라.        &#125;        // storage 디렉토리 경로를 포함하도록 File f를 수정한다.        // 기존: File f = new File(filename + &quot;.jpg&quot;);        // 수정: File f = new File(realPath, filename + &quot;.jpg&quot;);        File f = new File(realPath, filename + &quot;.jpg&quot;);        try(OutputStream outputStream = new FileOutputStream(f))&#123;            f.createNewFile();            while ((read = is.read(bytes)) != -1) &#123;                outputStream.write(bytes, 0, read);            &#125;            // directory(상대경로)와 filename을 JSP(로그인화면)에서 확인할 수 있도록            // request에 저장해 둔다.            // GetImageCaptchaCommand의 execute() 메소드는 PathNRedirect를 반환하는데,            // 이 때 반환방법은 forward이다. (request의 데이터 유지를 위해서)            request.setAttribute(&quot;filename&quot;, filename + &quot;.jpg&quot;);            request.setAttribute(&quot;directory&quot;, directory);            // return &quot;이미지 캡차가 생성되었습니다.&quot;;            return filename;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;이미지 캡차 파일 생성에 실패 했습니다.&quot;,e);        &#125;    &#125;    // 2) 캡차 이미지 요청용 error() 메소드    private static String error(InputStream body) &#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;&#125;</code></pre><hr><p><a href="#%EC%BA%A1%EC%B0%A8-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-getimagecaptchacommand-%EC%83%9D%EC%84%B1">GetImageCaptchaCommand</a> 메소드 순서 요약</p><ol><li>네이버 캡차 API에서 clientId 와 password를 발급 받는다.</li><li>캡차 키 요청(get() 메소드 활용)을 받고 Json parse를위한 JSONSimple 라이브러리 사용</li><li>응답받은 키로 이미지를 요청(get2() 메소드 활용 과 동시에 get2()내부에서 getImage() 메소드도 실행됨.)</li><li>getImage()메소드로 이미지 생성</li><li>파일명과 파일위치를 반환받아 request 영역에 저장 (String filename, directory)</li></ol><hr><h3 id="index페이지에서-loginPage로-이동"><a href="#index페이지에서-loginPage로-이동" class="headerlink" title="index페이지에서 loginPage로 이동"></a>index페이지에서 loginPage로 이동</h3><hr><p><a href="#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%8E%98%EC%9D%B4%EC%A7%80">index페이지</a>에서 loginPage로 이동해서 생성된 캡차이미지 활용</p><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;로그인&lt;/h3&gt;    &lt;form action=&quot;/18_CAPTCHA/login.do&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;id&quot; placeholder=&quot;아이디&quot; /&gt;&lt;br/&gt;        &lt;input type=&quot;password&quot; name=&quot;pw&quot; placeholder=&quot;비밀번호&quot; /&gt;&lt;br/&gt;&lt;br/&gt;        아래 이미지를 보이는 대로 입력하세요.&lt;br/&gt;        &lt;img alt=&quot;캡차이미지&quot; src=&quot;$&#123;directory&#125;/$&#123;filename&#125;&quot; style=&quot;width: 200px;&quot;&gt;        &lt;input type=&quot;button&quot; value=&quot;새로고침&quot; onclick=&quot;location.href=&#39;/18_CAPTCHA/getImageCaptcha.do&#39;&quot; /&gt;&lt;br/&gt;        &lt;input type=&quot;text&quot; name=&quot;input_key&quot; placeholder=&quot;자동입력 방지문자&quot; /&gt;&lt;br/&gt;&lt;br/&gt;        &lt;button&gt;로그인&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>img 태그의 경로설정에서 이미지가 안불러와져서 한참 애먹었다.. 상대경로로 지정해주니 해결되었음<br>src=”${directory}/${filename}: localhost:8080/18_CAPCHA/storage/1608569563538.jpg</p></blockquote><h3 id="loginPage의-login-do-요청-처리를-위한-컨트롤러-작성"><a href="#loginPage의-login-do-요청-처리를-위한-컨트롤러-작성" class="headerlink" title="loginPage의 login.do 요청 처리를 위한 컨트롤러 작성"></a>loginPage의 login.do 요청 처리를 위한 컨트롤러 작성</h3><hr><blockquote><p><a href="#index%EC%9D%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%98%EB%9F%AC-%EA%B0%80%EA%B8%B0">위 코드</a>에 추가</p></blockquote><pre><code class="java">switch(cmd)&#123;    case &quot;/getImageCaptcha.do&quot;:        command = new GetImageCaptchaCommand();        pathNRedirect = command.execute(request, response);        break;    case &quot;/loginPage.do&quot;;        command = new InputKeyCheckCommand();        pathNRedirect = command.execute(request, response);        break;    &#125;</code></pre><h3 id="login-do-의-모델-InputKeyCheckCommand-생성"><a href="#login-do-의-모델-InputKeyCheckCommand-생성" class="headerlink" title="login.do 의 모델 InputKeyCheckCommand 생성"></a>login.do 의 모델 InputKeyCheckCommand 생성</h3><blockquote><p>captcha 이미지와 입력값을 비교한다.</p></blockquote><hr><pre><code class="java">package command;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import common.PathNRedirect;public class InputKeyCheckCommand implements Command &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        String clientId = &quot;u7aGTrFmp005OR4CJWy4&quot;;  //애플리케이션 클라이언트 아이디값&quot;;        String clientSecret = &quot;V00UJonEUP&quot;;  //애플리케이션 클라이언트 시크릿값&quot;;        String code = &quot;1&quot;; // 키 발급시 0,  캡차 이미지 비교시 1로 세팅        // session에서 key 가져오면 발급 받은 캡차 발급 키를 알 수 있다.        HttpSession session = request.getSession();        String key = (String)session.getAttribute(&quot;key&quot;);  // 캡차 키 발급시 받은 키값        String value = request.getParameter(&quot;input_key&quot;);  // 사용자가 입력한 캡차 이미지 글자값        String apiURL = &quot;https://openapi.naver.com/v1/captcha/nkey?code=&quot; + code + &quot;&amp;key=&quot; + key + &quot;&amp;value=&quot; + value;        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        String responseBody = get(apiURL, requestHeaders);        System.out.println(responseBody);        // responseBody        // 성공: &#123;&quot;result&quot;:true,&quot;responseTime&quot;:21.39&#125;        // 실패: &#123;&quot;result&quot;:false,&quot;responseTime&quot;:5.76&#125;        // result를 responseBody에서 꺼낸다.        JSONParser parser = new JSONParser();        JSONObject obj = null;        try &#123;            obj = (JSONObject)parser.parse(responseBody);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        boolean result = (boolean)obj.get(&quot;result&quot;);        // loginResult.jsp로 result값(true, false)을 보내기 위해서        // request에 result를 저장해 둔다. 그리고 forward 한다.        request.setAttribute(&quot;result&quot;, result);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;login/loginResult.jsp&quot;);        pathNRedirect.setRedirect(false);  // forward        return pathNRedirect;    &#125;    private static String get(String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                return readBody(con.getInputStream());            &#125; else &#123; // 에러 발생                return readBody(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    private static HttpURLConnection connect(String apiUrl)&#123;        try &#123;            URL url = new URL(apiUrl);            return (HttpURLConnection)url.openConnection();        &#125; catch (MalformedURLException e) &#123;            throw new RuntimeException(&quot;API URL이 잘못되었습니다. : &quot; + apiUrl, e);        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;연결이 실패했습니다. : &quot; + apiUrl, e);        &#125;    &#125;    private static String readBody(InputStream body)&#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;&#125;</code></pre><p>request에 비교한 입력값에대한 결과를 <code>boolean</code> 타입으로 저장시켜 준다.<br>그리고 Path와 Redirect 유무를 가진 <strong>PathNRedirect</strong> 를 반환해준다.</p><h3 id="Captcha이미지와-입력값의-결과-출력"><a href="#Captcha이미지와-입력값의-결과-출력" class="headerlink" title="Captcha이미지와 입력값의 결과 출력"></a>Captcha이미지와 입력값의 결과 출력</h3><blockquote><p>loginPage.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;script&gt;    if ( $&#123;result&#125; ) &#123;        alert(&#39;성공입니다.&#39;);        location.href = &#39;/18_CAPTCHA/index.do&#39;;    &#125; else &#123;        alert(&#39;실패입니다.&#39;);        // history.back();  새로운 이미지를 받아서 다시 시도할 수 있도록 새로운 캡차 이미지를 받아야 한다.        location.href = &#39;/18_CAPTCHA/getImageCaptcha.do&#39;;    &#125;&lt;/script&gt;</code></pre><h3 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h3>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Captcha </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
