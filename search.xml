<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring-quiz2</title>
      <link href="2021/01/14/spring-quiz2/"/>
      <url>2021/01/14/spring-quiz2/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-으로-계산기-만들기"><a href="#Spring-으로-계산기-만들기" class="headerlink" title="Spring 으로 계산기 만들기"></a>Spring 으로 계산기 만들기</h2><p><sub>클릭 할 때마다 아래와 같이 계산이 되는 계산기를 만들어 본다</sub></p><img src="https://i.esdrop.com/d/d5aoD5pVBH.png"/><p><sub>이번엔 만든 순서대로 한번 구성해 보았습니다</sub></p><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;calc&quot;&gt;        첫 번째 수: &lt;input type=&quot;text&quot; name=&quot;n1&quot; /&gt;&lt;br/&gt;        두 번째 수: &lt;input type=&quot;text&quot; name=&quot;n2&quot; /&gt;&lt;br/&gt;        &lt;input type=&quot;hidden&quot; name=&quot;btn&quot; value=&quot;덧셈&quot; /&gt;        &lt;button&gt;덧셈&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>위 내용을 토대로 Dto 를 만들러 갑니다.</li></ul><h3 id="Dto"><a href="#Dto" class="headerlink" title="Dto"></a>Dto</h3><blockquote><p>Calculator.java</p></blockquote><pre><code class="java">package com.koreait.mvc10.dto;public class Calculator &#123;    private int n1;    private int n2;    private String btn;    private double result;    private String viewName;    private String op;    public Calculator() &#123;    &#125;    // method    public int getN1() &#123;        return n1;    &#125;    public void setN1(int n1) &#123;        this.n1 = n1;    &#125;    public int getN2() &#123;        return n2;    &#125;    public void setN2(int n2) &#123;        this.n2 = n2;    &#125;    public String getBtn() &#123;        return btn;    &#125;    public void setBtn(String btn) &#123;        this.btn = btn;    &#125;    public double getResult() &#123;        return result;    &#125;    // 스스로 계산하는 setResult() 메소드로 변경합니다.    public void setResult() &#123;        if (btn.equals(&quot;덧셈&quot;)) &#123;            result = n1 + n2;            // 덧셈 후에는 뺄셈입니다.            btn =&quot;뺄셈&quot;;            // 덧셈 결과는 result.jsp에서 보여줍니다.            viewName=&quot;result&quot;;            // result.jsp에서 보여줄 연산 기호는 + 입니다            op = &quot;+&quot;;        &#125; else if (btn.equals(&quot;뺄셈&quot;)) &#123;            result = n1 - n2;            btn = &quot;곱셈&quot;;            viewName=&quot;result&quot;;            op =&quot;-&quot;;        &#125;else if(btn.equals(&quot;곱셈&quot;)) &#123;            result = n1 * n2;            btn = &quot;나눗셈&quot;;            viewName=&quot;result&quot;;            op=&quot;*&quot;;        &#125;else if(btn.equals(&quot;나눗셈&quot;)) &#123;            result = (double)n1 / n2;            btn =&quot;초기화면&quot;;            viewName = &quot;result&quot;;            op = &quot;/&quot;;        &#125; else if(btn.equals(&quot;초기화면&quot;))&#123;            viewName =&quot;index&quot;;        &#125;    &#125;    public String getViewName() &#123;        return viewName;    &#125;    public void setViewName(String viewName) &#123;        this.viewName = viewName;    &#125;    public String getOp() &#123;        return op;    &#125;    public void setOp(String op) &#123;        this.op = op;    &#125;&#125;</code></pre><p><sub>스스로 계산사는 메소드로 변경한 것과 operation을 넣은것이 중요</sub></p><h3 id="result-jsp"><a href="#result-jsp" class="headerlink" title="result.jsp"></a>result.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;calc&quot;&gt;        첫 번째 수: $&#123;calculator.n1&#125; &lt;br/&gt;        두 번째 수: $&#123;calculator.n2&#125; &lt;br/&gt;        $&#123;calculator.n1&#125; $&#123;calculator.op&#125; $&#123;calculator.n2&#125; = $&#123;calculator.result&#125; &lt;br/&gt;        &lt;input type=&quot;hidden&quot; name=&quot;n1&quot; value=&quot;$&#123;calculator.n1&#125;&quot; /&gt;        &lt;input type=&quot;hidden&quot; name=&quot;n2&quot; value=&quot;$&#123;calculator.n2&#125;&quot; /&gt;        &lt;input type=&quot;hidden&quot; name=&quot;btn&quot; value=&quot;$&#123;calculator.btn&#125;&quot; /&gt;        &lt;button&gt;$&#123;calculator.btn&#125;&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><sub> 결과 화면을 먼저 예측해서 만들어 본다 </sub></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><blockquote><p>가장중요!!!</p></blockquote><pre><code class="java">package com.koreait.mvc10.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.koreait.mvc10.dto.Calculator;@Controllerpublic class MyController &#123;        @RequestMapping(value= &#123;&quot;/&quot;,&quot;index&quot;&#125;, method=RequestMethod.GET)            public String index() &#123;            return &quot;index&quot;;        &#125;        @RequestMapping(value=&quot;calc&quot;,  method=RequestMethod.GET)        public String calc(Calculator calculator) &#123;        // 뷰(JSP)로 전달할 데이터를 model 에 저장합니다.        // 저장할 때 속성(attribute)로 저장합니다.(파라미터가 아닙니다.)        // public String calc(Calculator calculator, Model model) &#123;        // model.addAttribute(&quot;calculator&quot;,calculator); 모델을 사용한다면 이렇게 바뀝니다.            calculator.setResult(); // 연산이 수행됩니다.            if(calculator.getViewName().equals(&quot;result&quot;)) &#123;            return calculator.getViewName(); // forward 합니다.(result.jsp가 뷰인 경우입니다.)(파라미터 가지고 가야하는 경우!)            &#125;else &#123;                //return &quot;redirect:&quot; + calculator.getViewName(); // index.jsp로 이동하는 매핑값(index)                return &quot;redirect:/&quot;; // index.jsp로 이동하는 매핑값(/) 을 이용합니다.. (매핑은 새로운 커멘드를 호출하기 위해있는거임)            &#125;        &#125;&#125;</code></pre><p><strong>중요!!</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> calculator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-Webmaker-게시판</title>
      <link href="2021/01/14/spring-Webmaker/"/>
      <url>2021/01/14/spring-Webmaker/</url>
      
        <content type="html"><![CDATA[<h2 id="lombok과-Spring을-이용해-게시판을-만들어보자"><a href="#lombok과-Spring을-이용해-게시판을-만들어보자" class="headerlink" title="lombok과 Spring을 이용해 게시판을 만들어보자"></a>lombok과 Spring을 이용해 게시판을 만들어보자</h2><h3 id="lombok-이란"><a href="#lombok-이란" class="headerlink" title="lombok 이란"></a>lombok 이란</h3><p>일반적으로 자바개발을 하다보면 Model 을 만들고 각 멤버변수를 접근할수 있는 (각 요소들이 private 접근권한을 가지고 있을때) method 를 만들게 된다. 아래처럼 말이다. (윈도우/이클립스 기준)</p><pre><code class="java">public class Student &#123;    private int id;    private String name;    private int grade;    private String department;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getGrade() &#123;        return grade;    &#125;    public void setGrade(int grade) &#123;        this.grade = grade;    &#125;    public String getDepartment() &#123;        return department;    &#125;    public void setDepartment(String department) &#123;        this.department = department;    &#125;    @Override    public String toString() &#123;        return &quot;Student [id=&quot; + id + &quot;, name=&quot; + name + &quot;, grade=&quot; + grade + &quot;, department=&quot; + department + &quot;]&quot;;    &#125;    &#125;</code></pre><p>이렇게 하는 방법도 있지만 어노테이션 설정으로 적용할수 있는 간단한 라이브러리를 소개하고자 한다. 바로 lombok, 공식 홈페이지 : <a href="https://projectlombok.org/">https://projectlombok.org</a> 설치 및 사용방법은 아주 간단하다. 공식 홈페이지에서 jar를 다운받고 실행, 아래처럼 이클립스 실행파일 경로를 설정해준다음에 인스톨을 누르면 된다. lombok.png maven 환경에서 dependency를 가져오기 위해서는 당연히 추가설정을 해줘야 한다.</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;version&gt;1.16.10&lt;/version&gt; &lt;!--버전은 그때 맞춰서--&gt;&lt;/dependency&gt;</code></pre><p><sub>실제로 코드상에서 사용방법은 다음과 같다. 정말 간단히, 어노테이션만 적용해주면 끝!</sub></p><p><sub>lombok 설치 방법중 중요한 부분만 캡쳐해 보았다 자세한 사항은 따로 검색해 보길 바란다. </sub></p><img src="https://i.esdrop.com/d/Lbw57CuDef.png"/><img src="https://i.esdrop.com/d/FhTRtT45rP.png"/><h2 id="Db설정"><a href="#Db설정" class="headerlink" title="Db설정"></a>Db설정</h2><pre><code class="sql">DROP SEQUENCE SIMPLE_SEQ;CREATE SEQUENCE SIMPLE_SEQSTART WITH 1INCREMENT BY 1MAXVALUE 999999NOCYCLENOCACHE;DROP TABLE SIMPLE;CREATE TABLE SIMPLE(    NO NUMBER PRIMARY KEY,    WRITER VARCHAR2(100),    TITLE VARCHAR2(1000),    CONTENT VARCHAR2(4000),    REGDATE DATE);</code></pre><hr><h2 id="DTO-생성"><a href="#DTO-생성" class="headerlink" title="DTO 생성"></a>DTO 생성</h2><pre><code class="java">package com.koreait.simple1.dto;import java.sql.Date;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@NoArgsConstructor  // 디폴트 생성자를 자동으로 생성해 줍니다.@AllArgsConstructor  // 필드를 이용한 생성자를 자동으로 생성해 줍니다.@Data  // lombok의 애너테이션, getter/setter등을 자동으로 생성해 줍니다.       // Window - Show View - Outline 에서 확인이 가능합니다.public class SimpleDto &#123;    // field    private int no;    private String writer;    private String title;    private String content;    private Date regDate;&#125;</code></pre><p><sub> lombok과 애너테이션들을 이용해 생성자를 자동으로 생성!!<sub></p><hr><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><pre><code class="java">package com.koreait.simple1.dao;import java.sql.Connection;import java.sql.Date;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.sql.DataSource;import com.koreait.simple1.dto.SimpleDto;public class SimpleDao &#123;    // Connection Pool 처리는 DataSource 클래스가 합니다.    // 필요한 설정은 톰캣 내부의 context.xml에 있습니다.    // &lt;Resource name=&quot;jdbc/oracle&quot;&gt;을 처리하는 Context 클래스가 필요합니다.    // name에 의한 접근: JNDI    private DataSource dataSource;    // singleton    private SimpleDao() &#123;        // context.xml에 있는 설정을 읽어와서 dataSource를 만듭니다.        try &#123;            Context context = new InitialContext();            dataSource = (DataSource)context.lookup(&quot;java:comp/env/jdbc/oracle&quot;);  // 톰캣이다: java:comp/env/ 나머지는 &lt;Resource&gt;의 name 속성        &#125; catch (NamingException e) &#123;            e.printStackTrace();        &#125;    &#125;    private static SimpleDao simpleDao = new SimpleDao();    public static SimpleDao getInstance() &#123;        return simpleDao;    &#125;    private Connection con;    private PreparedStatement ps;    private ResultSet rs;    private String sql;    private void close(Connection con, PreparedStatement ps, ResultSet rs) &#123;        try &#123;            if (rs != null) &#123; rs.close(); &#125;            if (ps != null) &#123; ps.close(); &#125;            if (con != null) &#123; con.close(); &#125;        &#125; catch (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;    /***** 1. list *****/    public List&lt;SimpleDto&gt; simpleList() &#123;        List&lt;SimpleDto&gt; list = new ArrayList&lt;SimpleDto&gt;();        try &#123;            con = dataSource.getConnection();            sql = &quot;SELECT NO, WRITER, TITLE, CONTENT, REGDATE FROM SIMPLE&quot;;            ps = con.prepareStatement(sql);            rs = ps.executeQuery();  // select문 실행 메소드            while (rs.next()) &#123;                int no = rs.getInt(&quot;NO&quot;);                String writer = rs.getString(&quot;WRITER&quot;);                String title = rs.getString(&quot;TITLE&quot;);                String content = rs.getString(&quot;CONTENT&quot;);                Date regDate = rs.getDate(&quot;REGDATE&quot;);                SimpleDto simpleDto = new SimpleDto(no, writer, title, content, regDate);                list.add(simpleDto);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, rs);        &#125;        return list;    &#125;    /***** 2. insert *****/    public void simpleInsert(SimpleDto simpleDto) &#123;        try &#123;            con = dataSource.getConnection();            sql = &quot;INSERT INTO SIMPLE VALUES (SIMPLE_SEQ.NEXTVAL, ?, ?, ?, SYSDATE)&quot;;            ps = con.prepareStatement(sql);            ps.setString(1, simpleDto.getWriter());            ps.setString(2, simpleDto.getTitle());            ps.setString(3, simpleDto.getContent());            ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;    &#125;    /***** 3. view *****/    public SimpleDto simpleView(int no) &#123;        SimpleDto simpleDto = null;        try &#123;            con = dataSource.getConnection();            sql = &quot;SELECT * FROM SIMPLE WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setInt(1, no);            rs = ps.executeQuery();            if (rs.next()) &#123;                String writer = rs.getString(&quot;WRITER&quot;);                String title = rs.getString(&quot;TITLE&quot;);                String content = rs.getString(&quot;CONTENT&quot;);                Date regDate = rs.getDate(&quot;REGDATE&quot;);                simpleDto = new SimpleDto(no, writer, title, content, regDate);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, rs);        &#125;        return simpleDto;    &#125;    /***** 4. delete *****/    public void simpleDelete(int no) &#123;        try &#123;            con = dataSource.getConnection();            sql = &quot;DELETE FROM SIMPLE WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setInt(1, no);            ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;    &#125;    /***** 5. update *****/    public void simpleUpdate(SimpleDto simpleDto) &#123;        try &#123;            con = dataSource.getConnection();            sql = &quot;UPDATE SIMPLE SET TITLE = ?, CONTENT = ? WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setString(1, simpleDto.getTitle());            ps.setString(2, simpleDto.getContent());            ps.setInt(3, simpleDto.getNo());            ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;    &#125;&#125;</code></pre><p><sub> 기능 추가될 때마다 추가시켜 나간다</sub></p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p><sub>첫번째로 Java interface 를 이용해 모든 커멘드에 기본 인터페이스로 참조될 SimpleCommand.java 생성 </sub></p><h3 id="SimpleCommand"><a href="#SimpleCommand" class="headerlink" title="SimpleCommand"></a>SimpleCommand</h3><pre><code class="java">package com.koreait.simple1.command;import org.springframework.ui.Model;public interface SimpleCommand &#123;    public void execute(Model model);&#125;</code></pre><h3 id="SimpleListCommand"><a href="#SimpleListCommand" class="headerlink" title="SimpleListCommand"></a>SimpleListCommand</h3><pre><code class="java">package com.koreait.simple1.command;import org.springframework.ui.Model;import com.koreait.simple1.dao.SimpleDao;public class SimpleListCommand implements SimpleCommand &#123;    @Override    public void execute(Model model) &#123;        // JSP와 달리 command는 데이터만 처리하면 됩니다.        // VIEW는 컨트롤러가 처리합니다.        model.addAttribute(&quot;list&quot;, SimpleDao.getInstance().simpleList());    &#125;&#125;</code></pre><h3 id="SimpleInsertCommand"><a href="#SimpleInsertCommand" class="headerlink" title="SimpleInsertCommand"></a>SimpleInsertCommand</h3><pre><code class="java">package com.koreait.simple1.command;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.ui.Model;import com.koreait.simple1.dao.SimpleDao;import com.koreait.simple1.dto.SimpleDto;public class SimpleInsertCommand implements SimpleCommand &#123;    @Override    public void execute(Model model) &#123;        // 전달 받은 model에는 request가 들어 있어요.        // 그걸 꺼내야 합니다.        // model에 저장된 속성을 직접 꺼내는 방법은 없어요.        // 대신 model은 Map으로 바꾸는 것이 가능합니다. (asMap() 메소드)        // Map으로 바꾸고 나면 Map에서 꺼내는 메소드인 get() 메소드를 이용해서 꺼내면 됩니다.        Map&lt;String, Object&gt; map = model.asMap();        HttpServletRequest request = (HttpServletRequest) map.get(&quot;request&quot;);  // model에 저장된 속성(attribute)을 키 값으로 사용하면 됩니다.        String writer = request.getParameter(&quot;writer&quot;);        String title = request.getParameter(&quot;title&quot;);        String content = request.getParameter(&quot;content&quot;);        SimpleDto simpleDto = new SimpleDto();        simpleDto.setWriter(writer);        simpleDto.setTitle(title);        simpleDto.setContent(content);        SimpleDao.getInstance().simpleInsert(simpleDto);    &#125;&#125;</code></pre><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><pre><code class="java">@Controllerpublic class SimpleController &#123;    // 21_simple 프로젝트는 command들을 new로 생성하는 연습입니다.    // field    private SimpleCommand command;    @RequestMapping(value=&quot;/&quot;, method=RequestMethod.GET)    public String index() &#123;        return &quot;index&quot;;    &#125;    @RequestMapping(value=&quot;simpleList.do&quot;)    public String simpleList(Model model) &#123;        // DB에서 list를 가져와서 simpleListPage.jsp로 이동시킵니다.        // simpleListPage.jsp로 보낼 데이터인 list는 Model에 저장합니다.        // Model에 저장된 데이터를 simpleListPage.jsp으로 보내려면 forward합니다.        /*            SimpleListCommand가 없다면 아래와 같이 작업할 수 있겠습니다.            하지만, 이렇게 하시면 안 됩니다.            SimpleDao simpleDao = SimpleDao.getInstance();            model.addAttribute(&quot;list&quot;, simpleDao.simpleList());            return &quot;simple/simpleListPage&quot;;        */        command = new SimpleListCommand();  // 개발자 직접 생성        command.execute(model);        return &quot;simple/simpleListPage&quot;;  // simple 폴더 아래 simpleListPage.jsp로 forward합니다.    &#125;    @RequestMapping(value=&quot;simpleInsertPage.do&quot;)    public String simpleInsertPage() &#123;        return &quot;simple/simpleInsertPage&quot;;  // simple 폴더 아래 simpleInsertPage.jsp로 forward합니다.    &#125;    @RequestMapping(value=&quot;simpleInsert.do&quot;)    public String simpleInsert(HttpServletRequest request, Model model) &#123;        // SimpleInsertCommand 가 삽입을 담당합니다.        // 모든 command들은 model이 필요합니다.        // SimpleInsertCommand에게 request를 전달하려면?        // 모든 command들은 실행할 때 model만 전달 받습니다.        // 따라서, model에 request를 저장해 둡니다. 그리고 model을 전달합니다.        model.addAttribute(&quot;request&quot;, request);        command = new SimpleInsertCommand();  // 개발자가 직접 생성        command.execute(model);        // return &quot;simple/simpleListPage&quot;;  // insert 후에는 forward하면 안 됩니다.        return &quot;redirect:simpleList.do&quot;;  // insert 후에는 redirect 합니다.    &#125;    &#125;</code></pre><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><h3 id="Index-jsp"><a href="#Index-jsp" class="headerlink" title="Index.jsp"></a>Index.jsp</h3><p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>    pageEncoding=”UTF-8”%&gt;<br><!DOCTYPE html></p><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Insert title here</title></head><body><pre><code>    &lt;!-- 이동합니다 --&gt;    &lt;a href=&quot;simpleList.do&quot;&gt;간단게시판으로 이동&lt;/a&gt;</code></pre></body></html><p><sub>첫 화면을 먼저 만들어 준다 </sub></p><h3 id="SimpleListPage"><a href="#SimpleListPage" class="headerlink" title="SimpleListPage"></a>SimpleListPage</h3><pre><code class="java">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=&quot;1&quot;&gt;        &lt;thead&gt;            &lt;tr&gt;                &lt;td&gt;번호&lt;/td&gt;                &lt;td&gt;작성자&lt;/td&gt;                &lt;td&gt;제목&lt;/td&gt;                &lt;td&gt;작성일&lt;/td&gt;            &lt;/tr&gt;        &lt;/thead&gt;        &lt;tbody&gt;            &lt;c:if test=&quot;$&#123;empty list&#125;&quot;&gt;                &lt;tr&gt;                    &lt;td colspan=&quot;4&quot;&gt;없음&lt;/td&gt;                &lt;/tr&gt;            &lt;/c:if&gt;            &lt;c:if test=&quot;$&#123;not empty list&#125;&quot;&gt;                &lt;c:forEach var=&quot;simpleDto&quot; items=&quot;$&#123;list&#125;&quot;&gt;                    &lt;tr&gt;                        &lt;td&gt;$&#123;simpleDto.no&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;simpleDto.writer&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;simpleDto.title&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;simpleDto.regDate&#125;&lt;/td&gt;                    &lt;/tr&gt;                &lt;/c:forEach&gt;            &lt;/c:if&gt;        &lt;/tbody&gt;        &lt;tfoot&gt;            &lt;tr&gt;                &lt;td colspan=&quot;4&quot;&gt;                    &lt;input type=&quot;button&quot; value=&quot;새글작성하러가기&quot; onclick=&quot;location.href=&#39;simpleInsertPage.do&#39;&quot; /&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/tfoot&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><sub> 간단게시판으로 이동하면 보여줄화면이다</sub></p><h3 id="SimpleInsertPage"><a href="#SimpleInsertPage" class="headerlink" title="SimpleInsertPage"></a>SimpleInsertPage</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;simpleInsert.do&quot;&gt;        작성자        &lt;input type=&quot;text&quot; name=&quot;writer&quot; /&gt;&lt;br/&gt;        제목        &lt;input type=&quot;text&quot; name=&quot;title&quot; /&gt; &lt;br/&gt;        내용        &lt;input type=&quot;text&quot; name=&quot;content&quot; /&gt;&lt;br/&gt;        &lt;button&gt;작성완료&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><sub> 새글 작성하러 가기로 가면 보여줄 화면이다 </sub></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> board </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-Ajax-02</title>
      <link href="2021/01/12/spring-Ajax-02/"/>
      <url>2021/01/12/spring-Ajax-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring을-이용해-jquery를-이용해-ajax를-호출"><a href="#Spring을-이용해-jquery를-이용해-ajax를-호출" class="headerlink" title="Spring을 이용해 jquery를 이용해 ajax를 호출"></a>Spring을 이용해 jquery를 이용해 ajax를 호출</h2><h3 id="jquery-넣기"><a href="#jquery-넣기" class="headerlink" title="jquery 넣기"></a>jquery 넣기</h3><img src="https://i.esdrop.com/d/c7jkgcazHg.jpg"/><p>사이트 접속 후 minified 코드를 클릭 후</p><p><code>index</code>의 script 위에 script 로 삽입!</p><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><p><sub>view -&gt; index.jsp 코드작성<sub></p><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;%-- jquery CDN --%&gt;&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot; integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    // 페이지 로드 이벤트    $(function()&#123;        fn_send1();        fn_send2();    &#125;);    function fn_send1() &#123;        $(&#39;#btn1&#39;).click(function()&#123;            $.ajax(&#123;                url: &#39;getText&#39;,  // RequestMapping의 value를 작성합니다.                type: &#39;get&#39;,  // RequestMapping의 method를 작성합니다.                data: &#39;send=&#39; + $(&#39;#send&#39;).val(),  // controller로 보내는 값(파라미터)                dataType: &#39;text&#39;,  // controller에게서 받아 오는 값의 타입                success: function(responseText) &#123;  // responseText: controller에게서 받아 오는 값, return text;에서 text를 받는 변수가 responseText입니다.                    $(&#39;#content1&#39;).text(responseText.trim());  // trim(): 불필요한 공백 제거                &#125;,                /*                    $(&#39;#content1&#39;) == &lt;div id=&quot;content1&quot;&gt;&lt;/div&gt;                    $(&#39;#content1&#39;).text(responseText) == &lt;div id=&quot;content1&quot;&gt;responseText&lt;/div&gt;                    $(&#39;#content1&#39;).text() == responseText                */                error: function()&#123;                    alert(&#39;실패&#39;);                &#125;            &#125;);        &#125;);    &#125;    function fn_send2() &#123;        $(&#39;#btn2&#39;).click(function()&#123;            $.ajax(&#123;                url: &#39;getJson&#39;,                type: &#39;post&#39;,                data: &#39;send=&#39; + $(&#39;#send&#39;).val(),                dataType: &#39;json&#39;,  // return 되는 데이터가 json이다.                success: function(responseObj) &#123;                    // responseObj는 json 데이터이므로,                    // 자바스크립트는 객체로 처리하면 됩니다.                    // 객체.프로퍼티   또는  객체[&#39;프로퍼티&#39;]  방법이 가능합니다.                    $(&#39;#content2&#39;).empty();                    $(&#39;#content2&#39;).append(&#39;&lt;ul&gt;&lt;li&gt;&#39; + responseObj.send + &#39;&lt;/li&gt;&#39;);                    $(&#39;#content2&#39;).append(&#39;&lt;li&gt;&#39; + responseObj.exist + &#39;&lt;/li&gt;&lt;/ul&gt;&#39;);                &#125;,                error: function() &#123;                    alert(&#39;실패&#39;);                &#125;            &#125;);        &#125;);    &#125;&lt;/script&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form&gt;        보내는 값&lt;br/&gt;        &lt;input type=&quot;text&quot; id=&quot;send&quot; name=&quot;send&quot; /&gt;&lt;br/&gt;&lt;br/&gt;        &lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;일반텍스트&quot; /&gt;&lt;br/&gt;        &lt;div id=&quot;content1&quot;&gt;&lt;/div&gt;&lt;br/&gt;        &lt;input type=&quot;button&quot; id=&quot;btn2&quot; value=&quot;JSON&quot; /&gt;&lt;br/&gt;        &lt;div id=&quot;content2&quot;&gt;&lt;/div&gt;&lt;br/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="컨트롤러"><a href="#컨트롤러" class="headerlink" title="컨트롤러"></a>컨트롤러</h3><pre><code class="java">@Controllerpublic class MyController &#123;    @RequestMapping(value=&quot;/&quot;,                    method=RequestMethod.GET)    public String index() &#123;        return &quot;index&quot;;    &#125;    @RequestMapping(value=&quot;getText&quot;,                    method=RequestMethod.GET,                    produces=&quot;text/plain; charset=utf-8&quot;)  // return text; 할 때  text가 &quot;text/plain&quot; 타입입니다.    @ResponseBody  // return 하는 데이터는 응답입니다. (뷰나 다른 매핑값이 아니고, 데이터를 반환합니다.)    public String getText(@RequestParam(value=&quot;send&quot;) String send) &#123;        String text = send + &quot;를 받았습니다.&quot;;        // ajax는 반환하는(return) 값이 &quot;뷰&quot;도 아니고, &quot;다른 매핑값&quot;도 아닙니다.        // 실제로 데이터(텍스트, json, xml 등)를 반환합니다.        return text;  // text는 데이터를 의미합니다. return 하는 데이터는 요청한 곳으로 보내는 데이터입니다. 즉 응답(response)하는 방식입니다.    &#125;    @RequestMapping(value=&quot;getJson&quot;,                    method=RequestMethod.POST,                    produces=&quot;application/json; charset=utf-8&quot;)    /*        produces=MediaType.APPLICATION_JSON_VALUE        produces=&quot;application/json&quot;    */    @ResponseBody    public String getJson(@RequestParam(&quot;send&quot;) String send) &#123;        // json 데이터를 넘겨 주기        JSONObject obj = new JSONObject();        obj.put(&quot;send&quot;, send);        obj.put(&quot;exist&quot;, send.isEmpty() ? &quot;없음&quot; : &quot;있음&quot;);        return obj.toJSONString();        // send가 있다면,        // return &#123;&quot;send&quot;: &quot;보낸데이터&quot;, &quot;exist&quot;: &quot;있음&quot;&#125;;        // send가 없다면,        // return &#123;&quot;send&quot;: &quot;&quot;, &quot;exist&quot;: &quot;없음&quot;&#125;;        // return 하는 데이터가 JSON이므로        // 1. @ResponseBody 가 필요하고, (return 하는 것이 뷰나 다른 매핑값이 아니라 &quot;데이터&quot;이다.)        // 2. produces=&quot;application/json; charset=utf-8&quot; 이 필요하다.    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> WEB </category>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> Spring </tag>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-Ajax-01 Ajax시작</title>
      <link href="2021/01/12/spring-Ajax-01/"/>
      <url>2021/01/12/spring-Ajax-01/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery의-Ajax-사용하기"><a href="#jQuery의-Ajax-사용하기" class="headerlink" title="jQuery의 Ajax 사용하기"></a>jQuery의 Ajax 사용하기</h1><h2 id="Ajax란"><a href="#Ajax란" class="headerlink" title="Ajax란?"></a>Ajax란?</h2><p><code>Ajax</code>(Asynchronous JavaScript and XML)란 비동기 방식의 Javascript와 XML을 가리킵니다. </p><table><thead><tr><th align="center">동기 방식</th><th align="center">비동기 방식</th></tr></thead><tbody><tr><td align="center">서버에 신호를 보냈을 떄 응답이 돌아와야 다음 동작을 수행한다.</td><td align="center">서버에 신호를 보냈을 때 응답 상태와 상관없이 다음 동작을 수행할 수 있다.</td></tr></tbody></table><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax?"></a>Ajax?</h3><p>Ajax를 이용하는 이유는 화면 전환 없이 클라이언트(사용자 컴퓨터)와 서버간에 XML, JSON(JavaScript Object Notation), 텍스트, HTML 등의 정보를 교하기 위해서입니다. <code>Ajax가 등장하기 전에는 반드시 서버를 거쳐야만 자료를 요청</code>할 수 있었습니다. 그러나 Ajax를 이용하면 사용자가 서버에 자료를 요청 시 <code>화면의 전환 없이</code> 요청한 자료를 전송받을 수 있습니다. 또 자료를 요청할 경우 어느 정도 시간이 소요되는 동기 방식에 반해 Ajax를 이용하면 클라이언트가 기다릴 필요 없이 다른 작업을 바로 수행할 수 있습니다.</p><hr><h2 id="ajax-메서드"><a href="#ajax-메서드" class="headerlink" title="$.ajax() 메서드"></a>$.ajax() 메서드</h2><p>$.ajax() 메서드는 사용자가 지정한 URL 경로에 파일의 데이터를 전송하고 입력한 URL 경로 파일로부터 용청한 데이터를 불러옵니다.</p><p> 이때 불러올 수 있는 외부 데이터로는 텍스트, HTML, XML, JSON 형식 등이 있으며, 선택한 요소에 Ajax를 이용해 요청한 외부 데이터를 불러옵니다. 옵션은 속성과 값으로 이루어지며, 중괄호{ } 내의 다양한 옵션을 입력할 수 있습니다.</p><p>다음과 같은 형태로 사용됩니다.</p><pre><code class="javascript">$.ajax(&#123;    url: &quot;전송 페이지&quot;(action url),    type: &quot;전송 방식&quot;(get, post),    data: &quot;전송할 데이터&quot;,    dataType: &quot;요청한 데이터 형식&quot;(&quot;html&quot;, &quot;xml&quot;, &quot;json&quot;, &quot;text&quot;, &quot;json&quot;),    success: function(data)&#123;        //전송에 성공하면 실행될 코드;    &#125;,    error: function()&#123;        //전송에 실패하면 실행될 코드;    &#125;&#125;);</code></pre><h2 id="json을-이용한-예시"><a href="#json을-이용한-예시" class="headerlink" title="json을 이용한 예시"></a>json을 이용한 예시</h2><pre><code class="json">    [        &#123;            &quot;name&quot;: &quot;재익&quot;,            &quot;age&quot;: 24,            &quot;addr&quot;: &quot;부천&quot;,            &quot;phone&quot;: &quot;010-1111-2222&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;자이언티&quot;,            &quot;age&quot;: 91,            &quot;addr&quot;: &quot;부산&quot;,            &quot;phone&quot;: &quot;010-333-4444&quot;        &#125;    ]</code></pre><ol start="2"><li><p>위의 json 값을 읽어올 Reader</p><pre><code class="javascript">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $.ajax(&#123;        url: &#39;DATA.json&#39;,        dataType: &#39;json&#39;,        type: &#39;get&#39;,        success: function(data)&#123;            var result = &#39;&lt;ul&gt;&#39;;            $(data).each(function(i, person)&#123;                result += &#39;&lt;li&gt;&#39; + person.name + &#39;&lt;/li&gt;&#39;;                result += &#39;&lt;li&gt;&#39; + person.age + &#39;&lt;/li&gt;&#39;;                result += &#39;&lt;li&gt;&#39; + person.addr + &#39;&lt;/li&gt;&#39;;                result += &#39;&lt;li&gt;&#39; + person.phone + &#39;&lt;/li&gt;&#39;;            &#125;);            result += &#39;&lt;/ul&gt;&#39;;            $(&#39;body&#39;).html(result);        &#125;,        error: function()&#123;            alert(&#39;실패&#39;);        &#125;    &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ol><p><sub> 이제 ajax가 spring 에서 쓰이는 방법을 알아보자 <sub></p><p> <a href="https://jakezo.github.io/2021/01/12/spring-Ajax-02/">다음 포스트</a> </p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> WEB </category>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> Spring </tag>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-07</title>
      <link href="2021/01/10/spring-07/"/>
      <url>2021/01/10/spring-07/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-06 quiz1 bmi</title>
      <link href="2021/01/10/spring-06/"/>
      <url>2021/01/10/spring-06/</url>
      
        <content type="html"><![CDATA[<h2 id="Bmi-계산기를-만들어보자"><a href="#Bmi-계산기를-만들어보자" class="headerlink" title="Bmi 계산기를 만들어보자"></a>Bmi 계산기를 만들어보자</h2><h2 id="결과화면"><a href="#결과화면" class="headerlink" title="결과화면"></a>결과화면</h2><img src="https://i.esdrop.com/d/kbU7NAbqDu.png" /><p><sub> 결과 화면을 미리 보고 만들어보자</sub></p><h2 id="계산기-만들기"><a href="#계산기-만들기" class="headerlink" title="계산기 만들기"></a>계산기 만들기</h2><h3 id="BMICalculator-java"><a href="#BMICalculator-java" class="headerlink" title="BMICalculator.java"></a>BMICalculator.java</h3><pre><code class="java">package com.koreait.quiz2;public class BMICalculator &#123;    // bmi = 몸무게(kg) / 키(m) 제곱    // field    // 저체중(bmi : ~19)     private double normal; // 정상(bmi : 20~25) 20을 저장해둔다.    private double over; // 과체중(bmi : 26~30) 26을 저장해둔다.    private double obesity; // 비만(bmi : 31~)  31을 저장해둔다.    // constructor    public BMICalculator() &#123;    &#125;    // method    public void bmiInfo(double weight, double height) &#123;        double h = height * 0.01;  // cm -&gt; m        double bmi = weight / (h * h);        String state = null;        if ( bmi &gt;= obesity ) &#123;            state = &quot;비만&quot;;        &#125; else if ( bmi &gt;= over ) &#123;            state = &quot;과체중&quot;;        &#125; else if ( bmi &gt;= normal ) &#123;            state = &quot;정상체중&quot;;        &#125; else &#123;            state = &quot;저체중&quot;;        &#125;        System.out.println(&quot;체질량지수: &quot; + bmi + &quot;(&quot; + state + &quot;)&quot;);    &#125;    public double getNormal() &#123;        return normal;    &#125;    public void setNormal(double normal) &#123;        this.normal = normal;    &#125;    public double getOver() &#123;        return over;    &#125;    public void setOver(double over) &#123;        this.over = over;    &#125;    public double getObesity() &#123;        return obesity;    &#125;    public void setObesity(double obesity) &#123;        this.obesity = obesity;    &#125;&#125;</code></pre><p><sub>BMI지수를 구하기 위해서는 공식이 필요하니까<br>필드를 정해주고 bmiCalculator 메서드를 통해 계산 공식을 넣고 setter를 지정한다.</sub></p><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre><code class="java">package com.koreait.quiz2;import java.util.ArrayList;public class Person &#123;    // field    private String name;  // 이름    private double weight; // 몸무게    private double height; // 키    private BMICalculator bmiCalculator;  // bmi 계산기(체질량지수)    private ArrayList&lt;String&gt; hobbies; // 최소 3개의 취미    // constructor    public Person() &#123;    &#125;    // method    public void personInfo() &#123;        System.out.println(&quot;성명: &quot; + name);        System.out.println(&quot;키: &quot; + height);        System.out.println(&quot;몸무게: &quot; + weight);        bmiCalculatorInfo();        System.out.println(&quot;취미: &quot; + hobbies);    &#125;    public void bmiCalculatorInfo() &#123;        bmiCalculator.bmiInfo(weight, height);    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public double getWeight() &#123;        return weight;    &#125;    public void setWeight(double weight) &#123;        this.weight = weight;    &#125;    public double getHeight() &#123;        return height;    &#125;    public void setHeight(double height) &#123;        this.height = height;    &#125;    public BMICalculator getBmiCalculator() &#123;        return bmiCalculator;    &#125;    public void setBmiCalculator(BMICalculator bmiCalculator) &#123;        this.bmiCalculator = bmiCalculator;    &#125;    public ArrayList&lt;String&gt; getHobbies() &#123;        return hobbies;    &#125;    public void setHobbies(ArrayList&lt;String&gt; hobbies) &#123;        this.hobbies = hobbies;    &#125;&#125;</code></pre><p><sub> 나의 정보와 관련된 클래스이ㅏㄷ. </sub></p><h3 id="app-context-xml"><a href="#app-context-xml" class="headerlink" title="app-context.xml"></a>app-context.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;bmiCalc&quot; class=&quot;com.koreait.quiz2.BMICalculator&quot;&gt;        &lt;property name=&quot;normal&quot; value=&quot;20&quot; /&gt;        &lt;property name=&quot;over&quot; value=&quot;26&quot; /&gt;        &lt;property name=&quot;obesity&quot; value=&quot;31&quot; /&gt;    &lt;/bean&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.koreait.quiz2.Person&quot;&gt;        &lt;property name=&quot;name&quot; value=&quot;앨리스&quot; /&gt;        &lt;property name=&quot;weight&quot; value=&quot;55.5&quot; /&gt;        &lt;property name=&quot;height&quot; value=&quot;165.5&quot; /&gt;        &lt;property name=&quot;bmiCalculator&quot; ref=&quot;bmiCalc&quot; /&gt;        &lt;property name=&quot;hobbies&quot;&gt;            &lt;list&gt;                &lt;value&gt;운동&lt;/value&gt;                &lt;value&gt;여행&lt;/value&gt;                &lt;value&gt;독서&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p>특히 중요한 부분은 <code>xml</code> 매핑이다.<br>각 클래스의 setter는 값을 달라고 열어놓기만 하는 상태이고<br>모든 값은 xml에서 해결한다는 것!</p><p><code>bmiCalculator</code></p><p>3개 필드가 setter형태로 존재하므로 꼭 property로 묶어주고 bmi지수대로 값을 지정해준다는 것</p><p>public void bmiCalculator도 신경써야하지 않나? 처음에는 헷갈렸는데</p><p>유심히 보면 person에서 소환하고 있어서 여기서 해결할거니까 신경쓸 것이 없다.</p><p><code>person</code></p><p> 5개의 필드가 setter형태로 존재하므로 property로 묶어주고</p><p>중요한 점은 위에서 유심히 보라고 했던 <code>ArrayList&lt;String&gt; hobbies</code><br>hobbies는 List타입이라는 인터페이스를 가지고 있으므로 List형태로 묶고 value값을 지정해주면 된다.</p><p>또 bmiCalculator는 BMICalculator를 참조한다는 의미로 ref를 써주면 된다.</p><hr><h3 id="PersonMain-java"><a href="#PersonMain-java" class="headerlink" title="PersonMain.java"></a>PersonMain.java</h3><pre><code class="java">package com.koreait.quiz2;import org.springframework.context.support.AbstractApplicationContext;import org.springframework.context.support.GenericXmlApplicationContext;public class PersonMain &#123;    public static void main(String[] args) &#123;        AbstractApplicationContext ctx = new GenericXmlApplicationContext(&quot;classpath:app-context2.xml&quot;);        Person p = ctx.getBean(&quot;person&quot;, Person.class);        p.personInfo();        ctx.close();    &#125;&#125;</code></pre><p>그러면 classpath:app-context2.xml로 위치를 지정하고</p><p>ctx에 그 값을 넣어주고</p><p>Person를 가져와서 getBean에서 뽑아오는 person Bean객체를 넣어주고</p><p>내 신상정보 메서드를 소환해서 정하면 원하는 결과값이 나온다.</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-05 애너테이션(annotation) 사용</title>
      <link href="2021/01/10/spring-05/"/>
      <url>2021/01/10/spring-05/</url>
      
        <content type="html"><![CDATA[<h2 id="애너테이션-사용"><a href="#애너테이션-사용" class="headerlink" title="애너테이션 사용"></a>애너테이션 사용</h2><h3 id="애너테이션이란"><a href="#애너테이션이란" class="headerlink" title="애너테이션이란"></a>애너테이션이란</h3><ul><li><p>스프링 애너테이션(Annotation)</p><p>  기존에 XML에서 하던 빈 설정을 애너테이션을 이용해서 자바 코드에서 설정하는 방법</p><p>  기능이 복잡해짐에 따라 XML에서 설정하는 것보다 유지 보수가 유리하다.</p><p>  현재 애플리케이션 개발 시 XML 설정 방법과 애너테이션 방법을 혼합해서 사용한다.</p></li></ul><blockquote><p>@Configuration</p></blockquote><p>app-context.xml 하고 같은 일을 하는 클래스이다.</p><h2 id="실전문제"><a href="#실전문제" class="headerlink" title="실전문제"></a>실전문제</h2><blockquote><p>app-context.xml 이 없는 ver</p></blockquote><h3 id="Song-java"><a href="#Song-java" class="headerlink" title="Song.java"></a>Song.java</h3><pre><code class="java">package com.koreait.spring;public class Song &#123;    // field    private String title;    private String genre;    // constructor    public Song() &#123;    &#125;    public Song(String title, String genre) &#123;        super();        this.title = title;        this.genre = genre;    &#125;    // method    public String getTitle() &#123;        return title;    &#125;    public void setTitle(String title) &#123;        this.title = title;    &#125;    public String getGenre() &#123;        return genre;    &#125;    public void setGenre(String genre) &#123;        this.genre = genre;    &#125;    public void songInfo() &#123;        System.out.println(title + &quot;(&quot; + genre + &quot;)&quot;);    &#125;&#125;</code></pre><p><sub>title genre 필드를 만들고 getter setter, 그리고 generate Constructor using fiends 까지 해준다 </sub></p><hr><h3 id="singer-java"><a href="#singer-java" class="headerlink" title="singer.java"></a>singer.java</h3><pre><code class="java">package com.koreait.spring;public class Singer &#123;    // field    private String name;    private Song song;    //constructor    public Singer() &#123;        // TODO Auto-generated constructor stub    &#125;    public Singer(String name, Song song) &#123;        super();        this.name = name;        this.song = song;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Song getSong() &#123;        return song;    &#125;    public void setSong(Song song) &#123;        this.song = song;    &#125;    public void singInfo() &#123;        System.out.println(&quot;이름:&quot; + name );        song.songInfo();    &#125;&#125;</code></pre><p><sub> <code>private Song song</code> 해줌으로써 songInfo(); 를 가져온다 </sub></p><hr><h2 id="Java-스타일-메인"><a href="#Java-스타일-메인" class="headerlink" title="Java 스타일 메인"></a>Java 스타일 메인</h2><pre><code class="java">package com.koreait.spring;public class MainClass &#123;    public static void main(String[] args) &#123;        Song song = new Song();        song.setTitle(&quot;Dynamite&quot;);        song.setGenre(&quot;댄스&quot;);        Singer singer =new Singer();        singer.setName(&quot;BTS&quot;);        singer.setSong(song);        singer.singInfo();    &#125;&#125;</code></pre><hr><h2 id="Spring-Style-Main"><a href="#Spring-Style-Main" class="headerlink" title="Spring Style Main"></a>Spring Style Main</h2><h3 id="AppContext-java"><a href="#AppContext-java" class="headerlink" title="AppContext.java"></a>AppContext.java</h3><blockquote><p>중요!! xml 을 대신한다.</p></blockquote><pre><code class="java">package com.koreait.spring;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;// 애너테이션 사용/**  @Configuration*  *  : 나는 app-context.xml 하고 같은일을 하는 클래스 이다..* */@Configurationpublic class AppContext &#123;   // 메소드 하나당 Bean을 하나 씩 만듭니다.   // Bean 을 만드는 메소드들은 @ 애너테이션을 추가해야 한다.   /*    *  &lt;bean id=&quot;song1&quot; class=&quot;com.koreait.spring.Song&quot;&gt;    *      *  &lt;property name=&quot;title&quot; value=&quot;Dynamite&quot; /&gt;    *  &lt;property name=&quot;genre&quot; value=&quot;댄스&quot; /&gt;    *  &lt;/bean&gt;    *      *  아래 메소드를 위 &lt;bean&gt; 태그와 같은 일을 한다.    *     */   @Bean   // 이 메소드는 Bean 을 만드는 메소드 입니다.   public Song song1() &#123;       Song song = new Song();                    // &lt;bean id=&quot;song1&quot; class=&quot;com.koreait.spring.Song&quot;&gt;       song.setTitle(&quot;Dynamite1&quot;); //  &lt;property name=&quot;title&quot; value=&quot;Dynamite&quot; /&gt;       song.setGenre(&quot;댄스1&quot;);  // &lt;property name=&quot;genre&quot; value=&quot;댄스&quot; /&gt;       return song;   &#125;   /*    &lt;bean id=&quot;song2&quot; class=&quot;com.koreait.spring.Song&quot;&gt;      &lt;constructor-arg value=&quot;Dynamite&quot; /&gt;      &lt;constructor-arg  value=&quot;댄스&quot; /&gt;      &lt;/bean&gt;       아래 메소드는 위 &lt;bean&gt; 태그와 같은 일을 한다.   */   @Bean(name=&quot;song2&quot;)  // @Bean(name=&quot;bean의 id&quot;)    public Song zzzzz() &#123;  // 메소드의 이름 zzzz는 사용되지 않아요.       return new Song(&quot;Dynamite2&quot;, &quot;댄스2&quot;);   &#125;   /*    &lt;bean id=&quot;singer1&quot; class=&quot;com.koreait.spring.Singer&quot;&gt;      &lt;property name=&quot;name&quot;  value=&quot;BTS&quot; /&gt;      &lt;property  name=&quot;song&quot;  ref=&quot;song1&quot; /&gt;      &lt;/bean&gt;       아래 메소드는 위 &lt;bean&gt; 태그와 같은 일을 한다.   */   @Bean   public Singer singer1() &#123;       Singer singer = new Singer();       singer.setName(&quot;BTS3&quot;);       singer.setSong(song1());  // public Song song1()&#123;&#125; 메소드를 호출하면 song1 이라는 Bean 이 반환됩니다.       return singer;   &#125;   /*    &lt;bean id=&quot;singer2&quot; class=&quot;com.koreait.spring.Singer&quot;&gt;            &lt;constructor-arg value=&quot;BTS&quot; /&gt;      &lt;constructor-arg  ref=&quot;song2&quot; /&gt;      &lt;/bean&gt;       아래 메소드는 위 &lt;bean&gt; 태그와 같은 일을 한다.    */   @Bean   public Singer singer2() &#123;       return new Singer(&quot;BTS4&quot;, zzzzz());  // public Song zzzzz()&#123;&#125; 메소드를 호출하면 song2 라는 Bean 이 반환   &#125;&#125;</code></pre><h3 id="SpringMainClass-java"><a href="#SpringMainClass-java" class="headerlink" title="SpringMainClass.java"></a>SpringMainClass.java</h3><pre><code class="java">package com.koreait.spring;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.AbstractApplicationContext;public class SpringMainClass &#123;    public static void main(String[] args) &#123;        // @Configuration 애너테이션을 추가한 AppContext.java 를        // 처리하는 클래스는 AnnotationConfigApplicationContext 입니다.        // AnnotationConfigApplicationContext 클래스는 AbstractApplicationContext 클래스의 서브클래스 입니다.        AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(AppContext.class);        Song s1 = ctx.getBean(&quot;song1&quot;, Song.class);        Song s2 = ctx.getBean(&quot;song2&quot;, Song.class);        s1.songInfo();        s2.songInfo();        Singer gasu1 = ctx.getBean(&quot;singer1&quot;, Singer.class);        Singer gasu2 = ctx.getBean(&quot;singer2&quot;, Singer.class);        gasu1.singInfo();        gasu2.singInfo();        ctx.close();    &#125;&#125;</code></pre><p><sub>AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(AppContext.class);<br>부분 중요 </sub></p><h2 id="결과화면"><a href="#결과화면" class="headerlink" title="결과화면"></a>결과화면</h2><img src="https://i.esdrop.com/d/ogH2VR8S7e.png" />]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-04 Collection 활용(2)</title>
      <link href="2021/01/09/spring-04/"/>
      <url>2021/01/09/spring-04/</url>
      
        <content type="html"><![CDATA[<h2 id="알아볼-내용"><a href="#알아볼-내용" class="headerlink" title="알아볼 내용"></a>알아볼 내용</h2><blockquote><p>app-context 가 두개 있는경우</p></blockquote><p><sub>app-context가 두개가 있는 경우 그리고 porperty 태그를 대신할수 있는 p속성에 대해 알아봅시다</sub></p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre><code class="java">package com.koreait.spring;public class Person &#123;    // field    private String name;    private Car myCar;    // constructor    public Person() &#123;    &#125;    // method    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Car getMyCar() &#123;        return myCar;    &#125;    public void setMyCar(Car myCar) &#123;        this.myCar = myCar;    &#125;    public void personInfo() &#123;        System.out.println(&quot;이름: &quot; + name);        myCar.carInfo();    &#125;&#125;</code></pre><blockquote><p><code>personInfo()</code> 부분을 잘 살펴보자</p></blockquote><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre><code class="java">package com.koreait.spring;public class Person &#123;    // field    private String name;    private Car myCar;    // constructor    public Person() &#123;    &#125;    // method    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Car getMyCar() &#123;        return myCar;    &#125;    public void setMyCar(Car myCar) &#123;        this.myCar = myCar;    &#125;    public void personInfo() &#123;        System.out.println(&quot;이름: &quot; + name);        myCar.carInfo();    &#125;&#125;</code></pre><h2 id="기본-Java-방법"><a href="#기본-Java-방법" class="headerlink" title="기본 Java 방법"></a>기본 Java 방법</h2><h3 id="MainClass-java"><a href="#MainClass-java" class="headerlink" title="MainClass.java"></a>MainClass.java</h3><pre><code class="java">package com.koreait.spring;public class MainClass &#123;    public static void main(String[] args) &#123;        Car car = new Car();        car.setModel(&quot;520d&quot;);        car.setPrice(7000);        car.carInfo();        Person person = new Person();        person.setName(&quot;제임스&quot;);        person.setMyCar(car);        person.personInfo();    &#125;&#125;</code></pre><h2 id="Spring-방법"><a href="#Spring-방법" class="headerlink" title="Spring 방법"></a>Spring 방법</h2><h3 id="app-context1-xml"><a href="#app-context1-xml" class="headerlink" title="app-context1.xml"></a>app-context1.xml</h3><p><sub> Namespaces 탭에서 p 속성을 선택해서 <code>&lt;property&gt;</code>태그를 대신 사용한다.<br></sub></p><p><sub>Car 과 Person을 분리해서 xml을 만드는 방식</sub></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;&lt;!-- app-context1.xml 에서는 Car만 만들었습니다. --&gt;    &lt;!--        원래 디폴트 생성자 + setter        &lt;bean id=&quot;객체명&quot; class=&quot;클래스명&quot;&gt;            &lt;property name=&quot;필드명&quot; value=&quot;값&quot; /&gt;        &lt;/bean&gt;        Namespaces 탭에서 p 속성을 선택하면 아래와 같이 바꿀 수 있어요.        &lt;bean id=&quot;객체명&quot; class=&quot;클래스명&quot; p:필드명=&quot;값&quot; /&gt;    --&gt;    &lt;!--        Car car = new Car();        car.setModel(&quot;520d&quot;);        car.setPrice(7000);    --&gt;    &lt;bean id=&quot;car&quot; class=&quot;com.koreait.spring.Car&quot; p:model=&quot;520d&quot; p:price=&quot;7000&quot; /&gt;&lt;/beans&gt;</code></pre><h3 id="app-context2-xml"><a href="#app-context2-xml" class="headerlink" title="app-context2.xml"></a>app-context2.xml</h3><pre><code class="xml">&lt;!-- app-context2.xml 에서는 Person만 생성합니다. --&gt;    &lt;!--        Person person = new Person();        person.setName(&quot;제임스&quot;);        person.setMyCar(car);    --&gt;    &lt;bean id=&quot;person&quot; class=&quot;com.koreait.spring.Person&quot; p:name=&quot;제임스&quot; p:myCar-ref=&quot;car&quot; /&gt;&lt;/beans&gt;</code></pre><h3 id="SpringMainClass-java"><a href="#SpringMainClass-java" class="headerlink" title="SpringMainClass.java"></a>SpringMainClass.java</h3><pre><code class="java">package com.koreait.spring;public class SpringMainClass &#123;    public static void main(String[] args) &#123;        String resourceLocation1 = &quot;classpath:app-context1.xml&quot;;        String resourceLocation2 = &quot;classpath:app-context2.xml&quot;;        AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocation1, resourceLocation2);        Person p = ctx.getBean(&quot;person&quot;, Person.class);        // &quot;person&quot; 은 app-Context2.xml 의 bean id        p.personInfo();        ctx.close();        &#125;&#125;</code></pre><p><sub>AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocation1, resourceLocation2);  부분 중요</sub></p><h2 id="결과화면"><a href="#결과화면" class="headerlink" title="결과화면"></a>결과화면</h2><img src="https://i.esdrop.com/d/Ke1fGkw2xh.png" /><p><strong>resuouceLocation</strong>: 이 친구를 통해 <strong>classpath</strong>를 <code>app-Context.xml</code> 로 쓰겠다! 라고</p><p>위치를 지정해주면 스프링 컨테이너(IOC컨테이너)가 만들어진다.</p><p><strong>AbstractApplicationContext</strong> : 컨택스트를 생성하는 인터페이스</p><p><strong>getBean</strong> : <code>app-Context.xml</code>에 지정된 bean id에서 뽑아오겠다 라는 의미이다.</p><p>MyCalculator.class는 해당클래스를 나타낸다.</p><p>즉, 설정파일.xml로 위치를 지정해주고<br><strong>AbstractApplicationContext</strong>라는 인터페이스를 통해서 저장한 파일을 ctx에 담고<br><strong>getBean</strong>을 통해서 <strong>xml</strong>에 있는 클래스와 해당 정보를 담는 것</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-03 Collection 활용</title>
      <link href="2021/01/09/spring-03/"/>
      <url>2021/01/09/spring-03/</url>
      
        <content type="html"><![CDATA[<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>##$ ListHandler</p><pre><code class="java">public class ListHandler &#123;    // field    private List&lt;String&gt; list;    //constructor    public ListHandler() &#123;    &#125;    // method    public List&lt;String&gt; getList() &#123;        return list;    &#125;    public void setList(List&lt;String&gt; list) &#123;        this.list = list;    &#125;    public void listInfo() &#123;         for (String item : list) &#123;             System.out.println(item);         &#125;    &#125;&#125;</code></pre><hr><h3 id="SetHandle"><a href="#SetHandle" class="headerlink" title="SetHandle"></a>SetHandle</h3><pre><code class="java">public class SetHandler &#123;        // field        private Set&lt;String&gt; set;        // constructor        public SetHandler() &#123;        &#125;        // method        public Set&lt;String&gt; getSet() &#123;            return set;        &#125;        public void setSet(Set&lt;String&gt; set) &#123;            this.set = set;        &#125;        public void setInfo() &#123;            // Set 순회 1        //    for (String item : set) &#123;        //        System.out.println(item);        //    &#125;            // Set 순회 2            Iterator&lt;String&gt; itr = set.iterator();            while (itr.hasNext()) &#123;                System.out.println(itr.next());            &#125;        &#125;&#125;</code></pre><hr><h3 id="MapHandler"><a href="#MapHandler" class="headerlink" title="MapHandler"></a>MapHandler</h3><pre><code class="java">public class MapHandler &#123;    // field    private Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();    // constructor    public MapHandler() &#123;    &#125;    //method    public Map&lt;String, String&gt; getMap() &#123;        return map;    &#125;    public void setMap(Map&lt;String, String&gt; map) &#123;        this.map = map;    &#125;    public void mapInfo() &#123;        // keySet() : key만 빼서 value를 알아내는 방식        // Set&lt;String&gt; keys = map.keySet();        // for(String key : keys) &#123;        // System.out.println(key + &quot;:&quot; + map.get(key));        // &#125;        // entrySet() : key와 value를 동시에 빼는 방식        Set&lt;String&gt; keys =map.keySet();        for (String key :keys) &#123;            System.out.println(key + &quot;:&quot; + map.get(key));        &#125;        for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;            System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());        &#125;    &#125;&#125;</code></pre><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><h3 id="Spring을-사용하지-않을때"><a href="#Spring을-사용하지-않을때" class="headerlink" title="Spring을 사용하지 않을때"></a>Spring을 사용하지 않을때</h3><pre><code class="java">public class MainClass &#123;    public static void main(String[] args) &#123;        ListHandler listHandler = new ListHandler();        List&lt;String&gt; foods = new ArrayList&lt;String&gt;();        foods.add(&quot;떡볶이&quot;);        foods.add(&quot;김밥&quot;);        foods.add(&quot;순대&quot;);        foods.add(&quot;튀김&quot;);        foods.add(&quot;어묵&quot;);        listHandler.setList(foods);        listHandler.listInfo();        System.out.println(listHandler.getList());        SetHandler setHandler = new  SetHandler();        Set&lt;String&gt; courses = new HashSet&lt;String&gt;();        courses.add(&quot;자바&quot;);        courses.add(&quot;자바&quot;);        courses.add(&quot;파이썬&quot;);        courses.add(&quot;파이썬&quot;);        courses.add(&quot;스프링&quot;);        courses.add(&quot;스프링&quot;);        setHandler.setSet(courses);        setHandler.setInfo();        MapHandler mapHandler = new MapHandler();        Map&lt;String, String&gt; dict = new HashMap&lt;String, String&gt;();        dict.put(&quot;spring&quot;, &quot;봄&quot;);        dict.put(&quot;summer&quot;, &quot;여름&quot;);        dict.put(&quot;fall&quot;, &quot;가을&quot;);        dict.put(&quot;winter&quot;, &quot;겨울&quot;);        mapHandler.setMap(dict);        mapHandler.mapInfo();&#125;</code></pre><p><sub>메인클래스에서 new생성자를 통해 매개변수를 전달하고 계산내용을 실행한다.</p><p>만약 계산 값을 바꾸려면 MainClass의 set부분을 수정해줘야 한다.<br></sub></p><h3 id="app-context-xml"><a href="#app-context-xml" class="headerlink" title="app-context.xml"></a>app-context.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!--        ** List 계열은 &lt;list&gt;태그와 &lt;value&gt;태그로 처리합니다.        ListHandler listHandler = new ListHandler();        List&lt;String&gt; foods = new ArrayList&lt;String&gt;();        foods.add(&quot;떡볶이&quot;);        foods.add(&quot;김밥&quot;);        foods.add(&quot;순대&quot;);        foods.add(&quot;튀김&quot;);        foods.add(&quot;어묵&quot;);        listHandler.setList(foods);    --&gt;    &lt;bean id=&quot;listHandler&quot; class=&quot;com.koreait.spring.ListHandler&quot;&gt;        &lt;property name=&quot;list&quot;&gt;            &lt;list&gt;                &lt;value&gt;떡볶이&lt;/value&gt;                &lt;value&gt;김밥&lt;/value&gt;                &lt;value&gt;순대&lt;/value&gt;                &lt;value&gt;튀김&lt;/value&gt;                &lt;value&gt;어묵&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!--        ** Set 계열은 &lt;set&gt;태그와 &lt;value&gt;태그로 처리합니다.        SetHandler setHandler = new SetHandler();        Set&lt;String&gt; courses = new HashSet&lt;String&gt;();        courses.add(&quot;자바&quot;);        courses.add(&quot;자바&quot;);        courses.add(&quot;파이썬&quot;);        courses.add(&quot;파이썬&quot;);        courses.add(&quot;스프링&quot;);        courses.add(&quot;스프링&quot;);        setHandler.setSet(courses);    --&gt;     &lt;bean id=&quot;setHandler&quot; class=&quot;com.koreait.spring.SetHandler&quot;&gt;         &lt;property name=&quot;set&quot;&gt;             &lt;set&gt;                 &lt;value&gt;자바&lt;/value&gt;                 &lt;value&gt;자바&lt;/value&gt;                 &lt;value&gt;파이썬&lt;/value&gt;                 &lt;value&gt;파이썬&lt;/value&gt;                 &lt;value&gt;스프링&lt;/value&gt;                 &lt;value&gt;스프링&lt;/value&gt;             &lt;/set&gt;         &lt;/property&gt;     &lt;/bean&gt;    &lt;!--         ** Map 계열은 &lt;map&gt;태그와 &lt;entry&gt;태그로 처리합니다.        MapHandler mapHandler = new MapHandler();        Map&lt;String, String&gt; dict = new HashMap&lt;String, String&gt;();        dict.put(&quot;spring&quot;, &quot;봄&quot;);        dict.put(&quot;summer&quot;, &quot;여름&quot;);        dict.put(&quot;fall&quot;, &quot;가을&quot;);        dict.put(&quot;winter&quot;, &quot;겨울&quot;);        mapHandler.setMap(dict);        mapHandler.mapInfo(); --&gt;    &lt;bean id=&quot;mapHandler&quot; class=&quot;com.koreait.spring.MapHandler&quot;&gt;        &lt;property name=&quot;map&quot;&gt;            &lt;map&gt;                &lt;entry key=&quot;spring&quot; value=&quot;봄&quot; /&gt;                &lt;entry key=&quot;summer&quot; value=&quot;여름&quot; /&gt;                &lt;entry key=&quot;fall&quot; value=&quot;가을&quot; /&gt;                &lt;entry key=&quot;winter&quot; value=&quot;겨울&quot; /&gt;            &lt;/map&gt;        &lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="SpringMainClass"><a href="#SpringMainClass" class="headerlink" title="SpringMainClass"></a>SpringMainClass</h3><pre><code class="java">package com.koreait.spring;import org.springframework.context.support.AbstractApplicationContext;import org.springframework.context.support.GenericXmlApplicationContext;public class SpringMainClass &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        String resourceLocations = &quot;classpath:appcontext.xml&quot;;        AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocations);        ListHandler handler1 = ctx.getBean(&quot;listHandler&quot;, ListHandler.class);        handler1.listInfo();        SetHandler handler2 = ctx.getBean(&quot;setHandler&quot;, SetHandler.class);        handler2.setInfo();        MapHandler handler3 = ctx.getBean(&quot;mapHandler&quot;, MapHandler.class);        handler3.mapInfo();        ctx.close();    &#125;&#125;</code></pre><h2 id="결과화면"><a href="#결과화면" class="headerlink" title="결과화면"></a>결과화면</h2><img src="https://i.esdrop.com/d/QyoOhorAtJ.png"/><blockquote><p>spring의 필요성?</p></blockquote><sub> 자바는 털 끝하나 건드릴 필요없이 xml만 수정하면 되기 때문에 부품을 생성하고 조립하는데 편리하다.<p>당장 길이가 짧은 예제로는 와닿지 않아도 대형 프로젝트나 개인 프로젝트를 할 때<br>MainClass를 수정하지 않아도 되는 편리함이 좋다고 하니 일단 그렇다고 해두자. </sub></p><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-02 Spring Collection(List Map Set) 활용</title>
      <link href="2021/01/09/spring-02/"/>
      <url>2021/01/09/spring-02/</url>
      
        <content type="html"><![CDATA[<h2 id="스프링-Collection-객체-설정"><a href="#스프링-Collection-객체-설정" class="headerlink" title="스프링 Collection 객체 설정"></a>스프링 Collection 객체 설정</h2><table><thead><tr><th align="center">컬렉션 유형</th><th align="center">엘리먼트</th></tr></thead><tbody><tr><td align="center">java.util.List, 배열</td><td align="center"><code>&lt;list&gt;</code></td></tr><tr><td align="center">java.util.Set</td><td align="center"><code>&lt;set&gt;</code></td></tr><tr><td align="center">java.util.Map</td><td align="center"><code>&lt;map&gt;</code></td></tr><tr><td align="center">java.util.Properties</td><td align="center"><code>&lt;props&gt;</code></td></tr></tbody></table><h3 id="List-타입-매핑"><a href="#List-타입-매핑" class="headerlink" title="List 타입 매핑"></a>List 타입 매핑</h3><p><sub>* 매핑(mapping)이란 하나의 값을 다른 값으로 대응시키는 것을 말한다.</sub></p><pre><code class="java">&lt;bean id=&quot;빈 아이디&quot; class=&quot;클래스 주소&quot;&gt;&lt;property name=&quot;메소드이름&quot;&gt;&lt;list&gt;&lt;value&gt;리스트1&lt;/value&gt;&lt;value&gt;리스트2&lt;/value&gt;&lt;/list&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h3 id="Map-타입-매핑"><a href="#Map-타입-매핑" class="headerlink" title="Map 타입 매핑"></a>Map 타입 매핑</h3><pre><code class="java">&lt;bean id=&quot;빈 아이디&quot; class=&quot;클래스 주소&quot;&gt;&lt;property name=&quot;메소드이름&quot;&gt;&lt;map&gt;&lt;entry&gt;&lt;key&gt;&lt;value&gt;킴썽&lt;/value&gt;&lt;/key&gt;&lt;value&gt; 한화 이글스 만세 &lt;/value&gt;&lt;/entry&gt;&lt;entry&gt;&lt;key&gt;&lt;value&gt;하루키&lt;/value&gt;&lt;/key&gt;&lt;value&gt; 야쿠르트 스왈로즈 만세 &lt;/value&gt;&lt;/entry&gt;&lt;/map&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><p><sub><code>&lt;entry&gt;</code>엘리먼트에서 사용된 <code>&lt;key&gt;</code>엘리먼트는 Map 객체의 key값을 설정할 때 사용, </p><p><code>&lt;value&gt;</code> 엘리먼트는 Map객체의 value를 설정할 때 사용 </sub></p><h3 id="Set-타입-매핑"><a href="#Set-타입-매핑" class="headerlink" title="Set 타입 매핑"></a>Set 타입 매핑</h3><pre><code class="java">&lt;bean id=&quot;빈 아이디&quot; class=&quot;클래스 주소&quot;&gt; &lt;property name=&quot;메소드이름&quot;&gt;&lt;set value-type=&quot;java.lang.String&quot;&gt; -&gt;여기는 근데 int타입을 넣고싶으면 java.lang.Integer 넣으면 되는건가&lt;value&gt; 한화이글스 화이팅 &lt;/value&gt;&lt;value&gt; 한화이글스 화이팅 &lt;/value&gt;&lt;value&gt; KT 위즈도 힘내랑! &lt;/value&gt;&lt;/set&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><p>중복값을 허용하지 않는 경우에 사용하는 set 컬렉션이다. 위의 예는 메소드를 호출할 때 문자열 타입의 데이터 여러개를 저장한 Set 컬렉션을 인자로 전달하겠다는 설정이다. 그런데 위 설정을 보면 “한화이글스 화이팅”이라는 문장이 두 번 등록된 것을 볼 수 있다. </p><p><code>Set 컬렉션은 같은 데이터를 중복해서 저장하지 않으므로</code> 실제 실행해보면 “한화이글스 화이팅”은 한 번만 저장된다. </p><hr><h3 id="Properties-타입-매핑"><a href="#Properties-타입-매핑" class="headerlink" title="Properties 타입 매핑"></a>Properties 타입 매핑</h3><pre><code class="java">&lt;bean id=&quot;빈 아이디&quot; class=&quot;클래스 주소&quot;&gt;&lt;property name=&quot;메소드 이름&quot;&gt;&lt;props&gt;&lt;prop key=&quot;킴썽&quot;&gt;한화를 응원합니다. &lt;/prop&gt;&lt;prop key=&quot;무라카미하루키&quot;&gt; 야쿠르트 스왈로즈를 응원합니다. &lt;/prop&gt;&lt;/props&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><p><sub>key=value 형태의 데이터를 등록하고 사용할 때 Properties라는 컬렉션을 사용한다.</sub></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-01</title>
      <link href="2021/01/06/spring-01/"/>
      <url>2021/01/06/spring-01/</url>
      
        <content type="html"><![CDATA[<h1 id="스프링-프레임워크란"><a href="#스프링-프레임워크란" class="headerlink" title="스프링 프레임워크란 ?"></a>스프링 프레임워크란 ?</h1><p>스프링 프레임워크(Spring Framework)는 자바 기반의 오픈소스 프레임워크로 자바 EE(Enterprise Edition)에서 요구하는 수준의 복잡한 기능들을 자바 EE를 사용하지 않고 구현하고자 시작되었습니다.</p><p>2002년 Rod Johnson이 자신의 저서 “Expert One-on-One J2EE Design and Developement”에서 제시한 코드와 아이디어를 발전시켜 오늘에 이르게 되었습니다.</p><h2 id="스프링-프레임워크-주요-특징"><a href="#스프링-프레임워크-주요-특징" class="headerlink" title="스프링 프레임워크 주요 특징"></a>스프링 프레임워크 주요 특징</h2><blockquote><p>스프링 프레임워크에 사용된 주요 특징은 다음과 같습니다.</p></blockquote><ul><li>경량 컨테이너로서 객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링 컨테이너로부터 필요한 객체를 얻어올 수 있다.</li><li>제어의 역행(IoC : Inversion of Control)을 지원한다. 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다.</li><li>의존성 주입(DI : Dependency Injection)을 지원한다. 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.</li><li>관점 지향 프로그래밍(AOP : Aspect-Oriented Programming)을 지원한다. 따라서 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.</li></ul><hr><p>일반적으로 대규모 시스템은 한번 개발하면 오랜동안 유지되면 급격한 변경 보다는 점진적으로 보완하는 형태로 시스템을 유지보수해 나갑니다. </p><h1 id="spring-시작"><a href="#spring-시작" class="headerlink" title="spring 시작"></a>spring 시작</h1><h2 id="초기설정"><a href="#초기설정" class="headerlink" title="초기설정"></a>초기설정</h2><p>스프링 다운 받은 후</p><img src="https://i.esdrop.com/d/vmuTuFDt2f.png" /><p>왼쪽 이부분 삭제 후 tomcat 8.5 로 바꿔준다.</p><img src="https://i.esdrop.com/d/PLfqaVnOcc.png"/><p>window -&gt; preferences 들어가서 나머지 이클립스랑 동일하게 그리고 저부분 tomcat 추가한다.</p><h2 id="프로젝트-시작"><a href="#프로젝트-시작" class="headerlink" title="프로젝트 시작"></a>프로젝트 시작</h2><img src="https://i.esdrop.com/d/ie9mjyXjlz.png"/>위에 나와 있는 부분 누른 후 프로젝트 시작<h2 id="계산기-만들기"><a href="#계산기-만들기" class="headerlink" title="계산기 만들기."></a>계산기 만들기.</h2><h3 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h3><pre><code class="java">public class Calculator &#123;   // field   // constructor   public Calculator() &#123;   &#125;   // method   public void add(int a, int b) &#123;      System.out.println( a + &quot;+&quot; + b + &quot;=&quot; + (a + b) );   &#125;   public void subtract (int a, int b) &#123;      System.out.println( a + &quot;-&quot; + b + &quot;=&quot; + (a - b) );   &#125;   public void multiply(int a, int b) &#123;      System.out.println( a + &quot;*&quot; + b + &quot;=&quot; + (a * b) );   &#125;   public void divide(int a, int b) &#123;      System.out.println( a + &quot;/&quot; + b + &quot;=&quot; + (a / b) );   &#125;&#125;</code></pre><h3 id="EngineerCalculator-java"><a href="#EngineerCalculator-java" class="headerlink" title="EngineerCalculator.java"></a>EngineerCalculator.java</h3><p><code>field</code> 만든 후 source 의 Generate getters setters 사용해<br><code>method</code>를 생성한다.<br><code>constructor</code> 필수!</p><pre><code class="java">public class EngineerCalculator &#123;   // field   private Calculator calculator;   private int a;   private int b;   // constructor   public EngineerCalculator() &#123;      // bean   &#125;   public EngineerCalculator(Calculator calculator, int a, int b) &#123;      super();      this.calculator = calculator;      this.a = a;      this.b = b;   &#125;   // method   public void add() &#123;      calculator.add(a, b);   &#125;   public void subtract() &#123;      calculator.subtract(a, b);   &#125;   public void multiply() &#123;      calculator.multiply(a, b);   &#125;   public void divide() &#123;      calculator.divide(a, b);   &#125;   public Calculator getCalculator() &#123;      return calculator;   &#125;   public void setCalculator(Calculator calculator) &#123;      this.calculator = calculator;   &#125;   public int getA() &#123;      return a;   &#125;   public void setA(int a) &#123;      this.a = a;   &#125;   public int getB() &#123;      return b;   &#125;   public void setB(int b) &#123;      this.b = b;   &#125;&#125;</code></pre><h2 id="자바-스타일로-만들기"><a href="#자바-스타일로-만들기" class="headerlink" title="자바 스타일로 만들기"></a>자바 스타일로 만들기</h2><h3 id="MainClass-java"><a href="#MainClass-java" class="headerlink" title="MainClass.java"></a>MainClass.java</h3><pre><code class="java">package com.koreait.spring;public class MainClass &#123;    public static void main(String[] args) &#123;        // 개발자가 직접 new를 이용해서 각종 객체(인스턴스, 빈)을 생성한다.        Calculator calculator1 = new Calculator();        Calculator calculator2 = new Calculator();        // EngineerCalculator 사용방법        // 1. 디폴트 생성자 + setter        // 2. 필드를 이용한 생성자        // 1. 디폴트 생성자 + setter        // 1) 디폴트 생성        EngineerCalculator eCalculator1 = new EngineerCalculator();        // 2) setter        eCalculator1.setA(10);        eCalculator1.setB(3);        eCalculator1.setCalculator(calculator1);        eCalculator1.add();        eCalculator1.subtract();        eCalculator1.multiply();        eCalculator1.divide();        // 2. 필드를 이용한 생성자        EngineerCalculator eCalculator2 = new EngineerCalculator(calculator2, 100, 30);        eCalculator2.add();        eCalculator2.subtract();        eCalculator2.multiply();        eCalculator2.divide();    &#125;&#125;</code></pre><p><sub>메인클래스에서 new생성자를 통해 매개변수를 전달하고 계산내용을 실행한다.</p><p>만약 계산 값을 바꾸려면 MainClass의 set부분을 수정해줘야 한다.</sub></p><h2 id="Spring-스타일로-Main-만들기"><a href="#Spring-스타일로-Main-만들기" class="headerlink" title="Spring 스타일로 Main 만들기"></a>Spring 스타일로 Main 만들기</h2><h3 id="★app-context-xml★-만들기-중요"><a href="#★app-context-xml★-만들기-중요" class="headerlink" title="★app-context.xml★ 만들기 (중요)"></a>★app-context.xml★ 만들기 (중요)</h3><blockquote><p>resources 폴더 에서 생성</p></blockquote><p><sub>app-context.xml 빈(객체, 인스턴스)을 만들어 주는 xml 파일</sub></p><p> spring bean configuration file </p><ol><li><p>디폴트 생성자 + setter</p><ol><li><p>디폴트 생성자<br><code>&lt;bean id=&quot;객체명&quot; class=&quot;클래스명&quot; /&gt;</code></p></li><li><p>디폴트 생성자 + setter<br><code> &lt;bean id=&quot;객체명&quot; class=&quot;클래스명&gt;</code><br><code>&lt;property name=&quot;필드명&quot;&gt;</code><br>   <code>&lt;value&gt;값&lt;/value&gt;</code>    // 일반 타입용, 문자, 숫자 상관 없이 따옴표 없이 그냥 적어요.<br><code>&lt;/property&gt;</code><br><code>&lt;property name=&quot;필드명&quot;&gt;</code><br>   <code>&lt;ref bean=&quot;객체명&quot; /&gt;</code>    // 다른 빈(bean)을 필드로 가지는 경우에 써요.<br><code>&lt;/property&gt;</code><br><code>&lt;/bean&gt;</code></p></li><li><p>디폴트 생성자 + setter<br><code>&lt;bean id=&quot;객체명&quot; class=&quot;클래스명&gt;</code><br><code>&lt;property name=&quot;필드명&quot; value=&quot;값&quot; /&gt;</code>    // 일반 타입용, 문자, 숫자 상관 없이 항상 따옴표를 써야 해요.<br><code>&lt;property name=&quot;필드명&quot; ref=&quot;객체명&quot; /&gt;</code>    // 다른 빈(bean)을 필드로 가지는 경우에 써요.<br><code>&lt;/bean&gt;</code></p></li></ol></li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!--        지금부터 아래 빈을 만들거에요.        Calculator calculator1 = new Calculator();        Calculator calculator2 = new Calculator();    --&gt;    &lt;bean id=&quot;calculator1&quot; class=&quot;com.koreait.spring.Calculator&quot; /&gt;    &lt;bean id=&quot;calculator2&quot; class=&quot;com.koreait.spring.Calculator&quot; /&gt;    &lt;!--        지금부터 아래 빈을 만들거에요.        EngineerCalculator eCalculator1 = new EngineerCalculator();        eCalculator1.setA(10);        eCalculator1.setB(3);        eCalculator1.setCalculator(calculator1);    --&gt;    &lt;bean id=&quot;eCalculator1&quot; class=&quot;com.koreait.spring.EngineerCalculator&quot;&gt;        &lt;property name=&quot;a&quot;&gt;            &lt;value&gt;10&lt;/value&gt;        &lt;/property&gt;        &lt;property name=&quot;b&quot;&gt;            &lt;value&gt;3&lt;/value&gt;        &lt;/property&gt;        &lt;property name=&quot;calculator&quot;&gt;            &lt;ref bean=&quot;calculator1&quot; /&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!--        지금부터 아래 빈을 만들거에요.        EngineerCalculator eCalculator2 = new EngineerCalculator(calculator2, 100, 30);    --&gt;    &lt;bean id=&quot;eCalculator2&quot; class=&quot;com.koreait.spring.EngineerCalculator&quot;&gt;        &lt;constructor-arg&gt;            &lt;ref bean=&quot;calculator2&quot; /&gt;        &lt;/constructor-arg&gt;        &lt;constructor-arg&gt;            &lt;value&gt;100&lt;/value&gt;        &lt;/constructor-arg&gt;        &lt;constructor-arg&gt;            &lt;value&gt;30&lt;/value&gt;        &lt;/constructor-arg&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="SpringMainClass-java"><a href="#SpringMainClass-java" class="headerlink" title="SpringMainClass.java"></a>SpringMainClass.java</h3><pre><code class="java">public class SpringMainClass &#123;    public static void main(String[] args) &#123;        // TODO Auto-generated method stub        // app-context.xml 에 정의된 빈(bean)을 생성하는 클래스가 있습니다.        // GenericXmlApplicationContext 클래스 입니다        // AbstractApplicationcontext는 GenericXmlApplicationContext 의 슈퍼클래스 입니다.        String resourceLocations = &quot;classpath:app-context.xml&quot;;        AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocations);        // cal1과 cal2의생성을 app-context.xml 에서 처리합니다        //개발자가 직접 생성하지 않고, app-context.xml에게 빈을 요청하는 방식입니다(getBean)        // 빈의 생성 권한을 스프링 프레임워크가 가져갑니다.        // 개발자가 빈을 생성하지 않습니다.        // IoC: Inversion of Control (제어의 역전)        // getBean ( bean 태그의 id, bean 태그의 class)        Calculator cal1 = ctx.getBean(&quot;calculator1&quot;, Calculator.class); //&lt;bean id =&quot; calculator        cal1.add(10, 3);        cal1.subtract(10, 3);        cal1.multiply(10, 3);        cal1.divide(10, 3);        Calculator cal2 = ctx.getBean(&quot;calculator2&quot;, Calculator.class);        cal2.add(100, 30);        cal2.subtract(1000, 3);        cal2.multiply(100, 30);        cal2.divide(100, 30);        ctx.close();    &#125;&#125;</code></pre><p><strong>자바와 스프링의 차이를 잘 알고 숙지하자</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-03</title>
      <link href="2021/01/06/Git-03/"/>
      <url>2021/01/06/Git-03/</url>
      
        <content type="html"><![CDATA[<h2 id="Eclipse에서-Git-사용하기"><a href="#Eclipse에서-Git-사용하기" class="headerlink" title="Eclipse에서 Git 사용하기"></a>Eclipse에서 Git 사용하기</h2><p>Eclipse에서 Git 사용하기</p><ol><li>Window - Show View - Other… - Git - Git Repositories</li></ol><ul><li>프로젝트를 github.com에 올리기 위해서 프로젝트를 만든다.</li></ul><ol start="2"><li><p>새 프로젝트 만들기<br>D:/workspace/Homepage</p></li><li><p>생성된 프로젝트를 로컬저장소로 지정한다.</p><ol><li>Git Repositories</li><li>Create a new local Git repository<br>-&gt; D:/workspace/Homepage</li></ol></li><li><p>Homepage 프로젝트에 .git 숨김 폴더가 생긴다.</p></li><li><p>Homepage 프로젝트에 .gitignore 파일이 생긴다.<br>(관리 안해도 되는 파일들)</p></li><li><p>github.com에 Homepage라는 Repository를 만든다. (원격저장소)</p></li><li><p>github.com에 만든 Homepage Repository를 원격저장소로 등록한다.</p><ol><li>Git Repositories</li><li>Homepage 프로젝트를 열고 Romotes에서 마우스 오른쪽 버튼</li><li>create remote</li><li>원격저장소 이름: origin</li><li>uri change 후 uri 등록(<a href="https://github.com/itlecture/Homepage.git">https://github.com/itlecture/Homepage.git</a>)</li><li>Authentication<br>User/Password (github.com에 가입한 내용으로)<br>Store in Secure Store 체크 권장</li></ol></li><li><p>Window - Show View - Other… - Git - Git Staging</p></li><li><p>Unstaged Changes의 모든 것 -&gt; Staged Changes 보내고 (++버튼)</p></li><li><p>commit 메시지 작성 후 commit</p></li><li><p>다시 Git Repositories로 돌아와서 Homepage 프로젝트의 마우스 오른쪽 버튼 Properties</p></li><li><p>Add Entry… 버튼 클릭 후 아래 입력<br>key    remote.origin.fetch<br>value   +refs/heads/<em>:refs/remotes/origin/</em></p></li><li><p>Homepage 프로젝트의 마우스 오른쪽 버튼 Pull..</p></li><li><p>Homepage 프로젝트의 마우스 오른쪽 버튼 Push to origin</p></li><li><p>github.com Homepage Repository에 잘 올라왔는지 확인</p></li></ol><hr><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>github.com 의 Homepage Repository를 불러오는 가장 쉬운 방법: 복제(clone)</p><ol><li><p>Git Repositories</p></li><li><p>Clone a Git repository</p></li><li><p>uri에 <a href="https://github.com/itlecture/Homepage.git">https://github.com/itlecture/Homepage.git</a> 등록 Next</p></li><li><p>마지막 단계 Destination의 Directory 설정 (복제한 Homepage를 어디에 저장할 것인가? workspace를 결정한다는 의미)</p></li><li><p>Git Repositories에는 Homepage가 등록되지만 좌측 Project Explorer에는 등록되지 않는다.</p></li><li><p>좌측 Project Explorer에 Homepage 프로젝트를 등록하기 위해서 import한다.</p><ul><li>import - General - Existing Projects into Workspace</li></ul></li><li><p>모든 가져오기가 끝났으므로 코드 작업 후 Git Staging에서 add -&gt; commit -&gt; push 하면 된다.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git(2)</title>
      <link href="2021/01/06/Git-02/"/>
      <url>2021/01/06/Git-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-사용하기-다운로드-및-실행"><a href="#Git-사용하기-다운로드-및-실행" class="headerlink" title="Git 사용하기(다운로드 및 실행)"></a>Git 사용하기(다운로드 및 실행)</h2><ol><li><p>git-scm.com 에서 git 다운로드 및 설치가 필요합니다.</p></li><li><p>sourcetreeapp.com 에서 sourcetree 다운로드 및 설치를 할 수 있습니다.</p></li></ol><blockquote><p>sourcetree : git을 관리하는 gui 도구</p></blockquote><dl><dt>형상관리도구(버전관리도구)</dt><dd>프로젝트의 개발과정에서 필요한 필수 도구</dd></dl><h2 id="git-개요"><a href="#git-개요" class="headerlink" title="git 개요"></a>git 개요</h2><p>개인 PC에 로컬저장소(local)를 만든다. (폴더를 만든다.)<br>git init 명령을 통해서 로컬저장소를 git으로 관리한다. (.git 이라는 숨김 폴더가 생긴다.)<br>로컬저장소에 파일을 추가한다. 그렇다고 git이 관리하지 않는다.<br>관리할 파일을 git add 명령으로 관리할 수 있다. (staging)<br>관리할 파일을 git commit 할 수 있다. (로컬저장소에 저장)<br>commit이 완료되면 git push 명령으로 원격저장소(server)에 올릴 수 있다.</p><h2 id="git-연습"><a href="#git-연습" class="headerlink" title="git 연습"></a>git 연습</h2><blockquote><p>(시작 메뉴 - Git폴더 - Git Bash)</p></blockquote><p>~  : 루트 디렉토리 (사용자 폴더  C:/Users/ITSC)<br>.  : 현재 디렉토리<br>.. : 상위 디렉토리</p><p><code>$</code> pwd  : 현재 경로 확인하기<br>/c/Users/ITSC</p><p><code>$</code> cd ~  : 루트 디렉토리로 이동하기<br><code>$</code> pwd<br>/c/Users/ITSC</p><p><code>$</code> cd .  : 현재 디렉토리로 이동하기<br><code>$</code> pwd<br>/c/Users/ITSC</p><p><code>$</code> cd ..  : 상위 디렉토리로 이동하기<br><code>$</code> pwd<br>/c/Users</p><p><code>$</code> clear  : 화면 초기화</p><p>ITSC@DESKTOP-L7VVF0L MINGW64 /c/Users<br><code>$</code> mkdir local_vcs  : 현재 경로(/c/Users)에 local_vcs 디렉토리 만들기</p><p>ITSC@DESKTOP-L7VVF0L MINGW64 /c/Users<br><code>$</code> cd local_vcs  : local_vcs 디렉토리로 이동하기</p><p>ITSC@DESKTOP-L7VVF0L MINGW64 /c/Users/local_vcs<br><code>$</code> cd ..  : local_vcs 디렉토리의 상위 디렉토리로 이동하기</p><p>ITSC@DESKTOP-L7VVF0L MINGW64 /c/Users<br><code>$</code> rmdir local_vcs  : local_vcs 디렉토리 삭제하기</p><p>ITSC@DESKTOP-L7VVF0L MINGW64 /c/Users<br><code>$</code> ls<br>‘All Users’@  ‘Default User’@   ITSC/<br> Default/      desktop.ini      Public/</p><p><code>$</code> git config –global user.name  : 사용자 확인하기<br>MINKYONGTAE</p><p><code>$</code> git config –global user.email  : 사용자 이메일 확인하기<br><a href="mailto:&#103;&#x74;&#95;&#109;&#105;&#110;&#64;&#110;&#x61;&#118;&#101;&#114;&#46;&#x63;&#111;&#109;">&#103;&#x74;&#95;&#109;&#105;&#110;&#64;&#110;&#x61;&#118;&#101;&#114;&#46;&#x63;&#111;&#109;</a></p><p><code>$</code> git config –global user.name “USERNAME”  : 사용자 이름 등록하기<br><code>$</code> git config –global user.email “EMAIL”  : 사용자 이메일 등록하기</p><p><code>$</code> cd ~  : 루트 디렉토리로 이동</p><p><code>$</code> mkdir local_vcs  : local_vcs 디렉토리 만들기</p><p><code>$</code> cd local_vcs  : local_vcs 디렉토리로 이동하기</p><p><code>$</code> git init  : 현재 디렉토리를 git으로 관리하라.<br>Initialized empty Git repository in C:/Users/ITSC/local_vcs/.git/</p><p><code>$</code> ls -al  : 현재 디렉토리의 파일/디렉토리 목록 확인 (숨김파일확인+리스트보기)<br><code>$</code> ls -a  : -a(숨김파일보기옵션)</p><p><code>$</code> touch master.txt  : master.txt 파일 만들기</p><p><code>$</code> echo ‘hello git’ &gt;&gt; master.txt  : ‘hello git’을 master.txt로 보내기(기록하기)</p><p><code>$</code> cat master.txt  : master.txt 파일 열기<br>hello git</p><p><code>$</code> git status  : 상태보기(아직 Untracked 상태: 추적하기 전이다.)<br>On branch master</p><p>No commits yet</p><p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>        master.txt</p><p>nothing added to commit but untracked files present (use “git add” to track)</p><p><code>$</code> git add master.txt  : master.txt 파일을 추적하라. (인덱스 영역으로 올린다. staging: 스태이징)</p><p> <em>처음으로 git add 할 때는 git commit -am 명령이 불가능하다. 단독 명령으로 git add를 해야한다.</em></p><p><code>$</code> git status  : 다시 상태보기 (staging 확인)<br>On branch master</p><p>No commits yet</p><p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   master.txt</p><p><code>$</code> git rm –cached master.txt  : master.txt 파일을 더 이상 추적하지 않는다. (unstaging)<br>rm ‘master.txt’</p><p><code>$</code> git add master.txt  : 다시 master.txt 파일을 추적하라. (인덱스 영역으로 올린다. staging: 스태이징)</p><p><code>$</code> git commit  : 현재 로컬저장소(local_vcs)를 commit 하겠다. 커밋 메시지 작성을 위한 vim 에디터가 열린다.</p><h2 id="vim-에디터-사용"><a href="#vim-에디터-사용" class="headerlink" title="vim 에디터 사용"></a>vim 에디터 사용</h2><p>단축키 i : 끼워넣기 상태<br>단축키 a : 끼워넣기 상태<br>키워넣기 상태에서 작성<br>작성 후 Esc (끼워넣기 상태에서 빠져나옴)<br>종료를 위해서 :wq (저장하고 닫기)</p><hr><p><code>$</code> git status  : 다시 상태보기 (commit이 완료되면 clean 상태가 되고, 원격저장소에 데이터를 올릴 수 있다.)<br>On branch master<br>nothing to commit, working tree clean</p><p><code>$</code> git log  : 로그 확인하기 (커밋한 사람, 일시, 커밋메시지)</p><p><code>$</code> git log –oneline  : 로그 한 줄로 보여주기</p><p><code>$</code> echo ‘ nice to meet you’ &gt;&gt; master.txt  : ‘ nice to meet you’를 master.txt에 추가하기</p><p><code>$</code> git status  : 다시 상태를 확인하면 Untracked 상태이므로 git add가 필요하다.</p><p><code>$</code> git add .  : 로컬저장소의 모든 파일을 staging하라. (바뀐 파일이 많으면 사용)</p><p><code>$</code> git commit -m ‘[02]master=&gt;modify master.txt add nice to meet you’  : 커밋하면서 커밋메시지 동시에 작성하기</p><p><code>$</code> git log –oneline  : 로그보기 (2번의 커밋이 모두 나타난다. 최근 커밋 아이디를 HEAD라고 한다.)<br>2239f0b (HEAD -&gt; master) [02]master=&gt;modify master.txt add nice to meet you<br>af48e77 [01]master=&gt;create master.txt add hello git</p><p><code>$</code> git diff –word-diff 2239f0b af48e77  : 두 커밋 아이디를 이용해서 차이를 비교</p><p><code>$</code> git diff –word-diff HEAD HEAD<del>1  : HEAD(가장 최근 commit)와 HEAD</del>1(HEAD 이전 commit)의 차이를 비교</p><p><code>$</code> echo ‘ how are you today?’ &gt;&gt; master.txt  : ‘ how are you today?’를 master.txt에 추가하기</p><p><code>$</code> git commit -am ‘[03]master=&gt;modify master.txt add how are you today?’  : git add + git commit -m == git commit -am</p><p><code>$</code> git log –oneline</p><h2 id="github-com-에-접속해서-회원가입하기"><a href="#github-com-에-접속해서-회원가입하기" class="headerlink" title="github.com 에 접속해서 회원가입하기"></a>github.com 에 접속해서 회원가입하기</h2><ol><li><p>create repository 클릭해서 새 저장소(repository) 만들기</p><ul><li>public</li><li>add README.md 체크</li></ul></li><li><p>repository에서 Code버튼을 클릭하면 원격저장소 확인 가능<br>-&gt; <a href="https://github.com/itlecture/local_vcs.git">https://github.com/itlecture/local_vcs.git</a></p></li><li><p>로컬저장소(local_vcs)의 내용을 올리는 </p></li><li><p>원격저장소(<a href="https://github.com/itlecture/local_vcs.git)%EB%A5%BC">https://github.com/itlecture/local_vcs.git)를</a> 등록해야 한다.</p></li><li><p>원격저장소 등록하기(앞으로 원격저장소는 origin이라고 부른다.)<br><code>$</code> git remote add origin <a href="https://github.com/itlecture/local_vcs.git">https://github.com/itlecture/local_vcs.git</a></p></li><li><p>로컬저장소 -&gt; 원격저장소 : push  (올리기)</p></li><li><p>로컬저장소 &lt;- 원격저장소 : pull  (내려받기)</p></li></ol><p> <strong>중요. 원격저장소에 올리려면 가장 먼저 pull을 해야 한다. (pull -&gt; push)</strong></p><p><code>$</code> git push origin main  ## origin의 main브랜치로 올리기 (최초 실패)</p><p><code>$</code> git pull origin main  ## origin의 main브랜치를 받아오기 (최초 실패)</p><ul><li>최초 pull을 할 때는 로컬저장소와 원격저장소가 서로 상관 없는 저장소이기 때문에 실패한다.</li><li>상관 없어도 pull을 진행하는 옵션(–allow-unrelated-histories)을 써야 한다.</li></ul><p><code>$</code> git pull origin main –allow-unrelated-histories</p><ul><li>vim 편집기가 실행되면  :wq  눌러서 종료한다.</li></ul><p><code>$</code> git push origin main  ## 로컬저장소의 내용을 origin의 main 브랜치로 올린다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-01</title>
      <link href="2021/01/06/Git-01/"/>
      <url>2021/01/06/Git-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-이란-무엇인가"><a href="#Git-이란-무엇인가" class="headerlink" title="Git 이란 무엇인가?"></a>Git 이란 무엇인가?</h2><p><code>Git</code>이란 버전 관리 시스템(VCS, Version Control System)의 한 종류이다.</p><p>그렇다면 여기서 말하는 버전 관리란 무엇이고, 왜 필요할까?</p><p>버전 관리란 이름 그대로 여러 파일을 하나의 버전으로 묶어 관리하는 것이다. 버전 관리를 예를 들어 말해보자.</p><p>예를 들어, 우리가 제출해야 하는 레포트가 하나 있다. 처음에 ‘report.txt’를 만들었다가 내용이 바뀔 경우 ‘report_최종.txt’으로 바꿨다가 다시 수정을 거치면서 ‘report_진짜최종.txt’ 이런식으로 만든 경험이 있을 것이다.</p><p>우리는 여러 파일들을 복사, 저장, 백업 등을 하였고 이것을 버전 관리라고 부른다.</p><h2 id="Git의-필요성"><a href="#Git의-필요성" class="headerlink" title="Git의 필요성"></a>Git의 필요성</h2><p>Git의 필요성을 말하기 위해 예를 하나 들어보자.</p><p>나와 나의 동료가 동시에 같은 웹사이트에서 페이지를 업데이트하고 있다고 하자.</p><p>나는 무언가를 변경하고 저장한 다음 웹사이트에 그것을 업로드한다. 그런데 이때 문제는 동료가 동시에 같은 페이지에서 작업할 때이다. 확인하지 않고 동시에 작업을 한다면 누군가의 작업은 겹쳐쓰여질 것이고 지워질 것이다.</p><p>깃과 같은 버전관리 시스템은 그런 일을 방지해준다.</p><p>나와 동료는 같은 페이지에 각자의 수정사항을 각각 업로드할 수 있고, 깃은 두 개의 복사본을 저장한다.</p><p>그런 후 우리는 어떤 작업도 잃어버리지 않고 변경사항들을 병합(Merge)할 수 있다. 깃은 이전에 만들어진 모든 변경사항의 “스냅샷”을 저장하기 때문에 이전 시점의 어떤 버전으로 되돌릴 수도 있다.</p><p>이렇기에 프로젝트를 진행할 때 Git은 아주 유용하며 필수적으로 많이 사용한다. 프로젝트에서 내가 작업한 부분을 올리고 다른 사람이 작업한 부분을 올려 스냅샷이 저장되고 어떠한 코드도 손실되지 않고 나눠서 작업한 파일을 병합할 수 있기때문이다.</p><h2 id="Git-기본-용어"><a href="#Git-기본-용어" class="headerlink" title="Git 기본 용어"></a>Git 기본 용어</h2><p>Git을 사용하기 위해 알아야 할 용어들이 있다.</p><p>Repository : 저장소를 의미하며, 저장소는 히스토리, 태그, 소스의 가지치기 혹은 branch에 따라 버전을 저장한다. 저장소를 통해 작업자가 변경한 모든 히스토리를 확인 할 수 있다.</p><p>Working Tree : 저장소를 어느 한 시점을 바라보는 작업자의 현재 시점이다.</p><p>Staging Area : 저장소에 커밋하기 전에 커밋을 준비하는 위치이다.</p><p>Commit : 현재 변경된 작업 상태를 점검을 마치면 확정하고 저장소에 저장하는 작업이다.</p><p>Head : 현재 작업중인 Branch를 가리키는 것이다.</p><p>Branch : 가지 또는 분기점을 의미하며, 작업을 할때에 현재 상태를 복사하여 Branch에서 작업을 한 후에 완전하다 싶을때 Merge를 하여 작업을 한다.</p><p>Merge : 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미한다.</p><h2 id="Git-기본-용어-1"><a href="#Git-기본-용어-1" class="headerlink" title="Git 기본 용어"></a>Git 기본 용어</h2><p>Git을 사용하기 위해 알아야 할 용어들이 있다.</p><p>Repository : 저장소를 의미하며, 저장소는 히스토리, 태그, 소스의 가지치기 혹은 branch에 따라 버전을 저장한다. 저장소를 통해 작업자가 변경한 모든 히스토리를 확인 할 수 있다.</p><p>Working Tree : 저장소를 어느 한 시점을 바라보는 작업자의 현재 시점이다.</p><p>Staging Area : 저장소에 커밋하기 전에 커밋을 준비하는 위치이다.</p><p>Commit : 현재 변경된 작업 상태를 점검을 마치면 확정하고 저장소에 저장하는 작업이다.</p><p>Head : 현재 작업중인 Branch를 가리키는 것이다.</p><p>Branch : 가지 또는 분기점을 의미하며, 작업을 할때에 현재 상태를 복사하여 Branch에서 작업을 한 후에 완전하다 싶을때 Merge를 하여 작업을 한다.</p><p>Merge : 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미한다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-12 MVC 의 개념 보충</title>
      <link href="2021/01/05/JSP-12/"/>
      <url>2021/01/05/JSP-12/</url>
      
        <content type="html"><![CDATA[<h2 id="MVC-Model-View-Controller-의-개념"><a href="#MVC-Model-View-Controller-의-개념" class="headerlink" title="MVC (Model, View, Controller) 의 개념"></a>MVC (Model, View, Controller) 의 개념</h2><p>MVC의 기본개념에 대해 새로 정립하고 싶어서 다시 정리를 해 보았다.’</p><img src="https://i.esdrop.com/d/bxi8qQXghl.png"/> - MVC Pattern<p><code>MVC</code>는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.</p><p>MVC-Pattern<br>제목에도 나와있듯이 “MVC”는 Model View Controller의 약자이다. 소프트웨어를 이 세가지 역할로 구분하여 개발하는 방법론이다.  Spring Framework와 JSP 예제를 보더라도 위 디자인 패턴을 많이 사용하는 것을 볼 수 있다.</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model은 데이터베이스나 파일과 같은 데이터 소스를 제어한 후 그 결과를 리턴한다. 여기서 나오는 단어가 “DAO”이다. Data Access Object의 약자이며 실질적으로 데이터베이스에 접근하여 검색, 추가, 수정, 삭제 등 데이터의 조작을 할 수 있는 객체이다.</p><img src="https://i.esdrop.com/d/0ca329heGV.png"/>Data Access Object<p>위 그림과 같이 어떤 요청이 들어와 Controller가 받아 요청처리를 위해 Model을 사용한다. 이 Model에 정의된 DAO는 데이터 처리 후 결과를 반환한다.</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>View는 데이터가 반영되어 클라이언트 측(사용자)에게 보여주는 역할을 한다. 데이터를 처리해서 보내는 곳은 당연히 Model이 되고,  클라이언트 측 기술(웹에선 HTML/CSS/Javascript)들을 모아둔 컨테이너이다.</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>controller는 클라이언트 측 요청을 받아 이를 파악한 후 그 요청에 맞는 데이터를 Model에 의뢰하는 역할을 한다. Spring Framework에서는 “DispatcherServlet”이 되고 프레임워크를 사용하지 않는 일반 JSP Dynamic Web Project에서는 web.xml에서 정의한 Servlet이다.</p><h2 id="MVC에서-자주-쓰이는-용어"><a href="#MVC에서-자주-쓰이는-용어" class="headerlink" title="MVC에서 자주 쓰이는 용어"></a>MVC에서 자주 쓰이는 용어</h2><ul><li>DAO(=Data Access Object) : 실질적으로 DB에 접근하는 객체를 말한다.</li><li>DTO(=Data Transfer Object) : 컨트롤러, 뷰, 비즈니스, 퍼시스턴스 계층간 데이터 교환을 위한 객체이다. 일반적인 DTO는 로직을 갖고 있지 않으며 속성과 그 속성을 접근하기 위한 getter, setter 메소드만 가진 클래스이다.</li><li>VO(=Value Object) : DTO와 비슷한 개념, 다만 VO는 Read Only속성을 가진다.</li><li>MO(=Model)</li></ul><h2 id="MVC-개발-순서"><a href="#MVC-개발-순서" class="headerlink" title="MVC 개발 순서"></a>MVC 개발 순서</h2><ol><li><p>Web Application(JSP Model 1) 개발 순서</p><ol><li>DBMS 설정</li><li>DTO(Data Transfer Object, Domain, Model) Class 제작</li><li>DAO(Data Access Object, Persistence) Class 제작</li><li>Manager Class(Process, Business Logic) 제작</li><li>Manager Test</li><li>JSP 생성 연동</li></ol></li><li><p>MVC Web Application(JSP Model 2) 개발 순서</p><ol><li>DBMS 설정</li><li>DTO(Data Transfer Object, Domain, Model) Class 제작</li><li>DAO(Data Access Object, Persistence) Class 제작</li><li>Manager Class(Process, Business Logic) 제작</li><li>Manager Test</li><li>Servlet Controller 제작</li><li>Action Interface 제작</li><li>Action 구현 Class 제작</li><li>Manager Class 연동</li><li>JSP 생성 연동</li></ol></li></ol><p>참고자료<br><a href="https://opentutorials.org/course/697/3828">https://opentutorials.org/course/697/3828</a> – MVC 디자인 패턴</p><p><a href="https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC">https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC</a> – MVC 위키피디아</p><p><a href="http://genesis8.tistory.com/214">http://genesis8.tistory.com/214</a> – DAO / VO / DTO 란?</p><p><a href="https://m.blog.naver.com/PostView.nhn?blogId=sunmaket&amp;logNo=50113449506&amp;proxyReferer=https://www.google.co.kr/">https://m.blog.naver.com/PostView.nhn?blogId=sunmaket&amp;logNo=50113449506&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F</a> – MVC 개발순서</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-10 DBCP란</title>
      <link href="2021/01/04/JSP-10/"/>
      <url>2021/01/04/JSP-10/</url>
      
        <content type="html"><![CDATA[<h1 id="DBCP를-배워봅시다"><a href="#DBCP를-배워봅시다" class="headerlink" title="DBCP를 배워봅시다."></a>DBCP를 배워봅시다.</h1><h2 id="DBCP의-의미"><a href="#DBCP의-의미" class="headerlink" title="DBCP의 의미"></a>DBCP의 의미</h2><p>데이터 베이스에 연결하여 사용하는 경우 데이터 베이스에 접속하기 위해 Connection 등의 객체를 생성해야 한다.</p><p>이게 혼자서 쓸 때는 접속 할 때마다 객체를 생성해도 괜찮지만 사람들이 많이 접속하는 사이트에서는 사용자 한 명당 하나씩 계속 객체를 생성하게 되면 서버가 객체를 생성하는데 리소스를 많이 쓰게 된다.</p><p>이러한 현상을 해결하고자 ‘커넥션 풀’이라는 공간을 만들어 커넥션 객체들을 담아놓고 차후 사용자가 데이터 베이스에 접속을 시도하면 커넥션 풀에 담겨있는 커넥션 객체를 하나하나 꺼내주는 방법을 적용시켰다.</p><p>이것이 바로 DBCP(DataBase Connection Pool)이다.</p><hr><h1 id="사용환경을-위한-준비"><a href="#사용환경을-위한-준비" class="headerlink" title="사용환경을 위한 준비"></a>사용환경을 위한 준비</h1><h2 id="jar-준비"><a href="#jar-준비" class="headerlink" title="jar 준비"></a>jar 준비</h2><img src="https://i.esdrop.com/d/6nCfp14fhx.png"/><hr><h1 id="페이지-만들기"><a href="#페이지-만들기" class="headerlink" title="페이지 만들기"></a>페이지 만들기</h1><h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><ul><li>green.sql</li></ul><pre><code class="sql">DROP TABLE GREEN;CREATE TABLE GREEN(    NO NUMBER PRIMARY KEY,    WRITER VARCHAR2(100),    TITLE VARCHAR2(1000) NOT NULL,    CONTENT VARCHAR2(4000),    HIT NUMBER,    POSTDATE DATE);DROP SEQUENCE GREEN_SEQ;CREATE SEQUENCE GREEN_SEQSTART WITH 1000INCREMENT BY 1MAXVALUE 999999NOCYCLENOCACHE;</code></pre><h2 id="Dto"><a href="#Dto" class="headerlink" title="Dto"></a>Dto</h2><blockquote><p>GreenDto</p></blockquote><pre><code class="java">package dto;import java.sql.Date;public class GreenDto &#123;    private int no;    private String writer;    private String title;    private String content;    private int hit;    private Date postDate;    public final int getNo() &#123;        return no;    &#125;    public final void setNo(int no) &#123;        this.no = no;    &#125;    public final String getWriter() &#123;        return writer;    &#125;    public final void setWriter(String writer) &#123;        this.writer = writer;    &#125;    public final String getTitle() &#123;        return title;    &#125;    public final void setTitle(String title) &#123;        this.title = title;    &#125;    public final String getContent() &#123;        return content;    &#125;    public final void setContent(String content) &#123;        this.content = content;    &#125;    public final int getHit() &#123;        return hit;    &#125;    public final void setHit(int hit) &#123;        this.hit = hit;    &#125;    public final Date getPostDate() &#123;        return postDate;    &#125;    public final void setPostDate(Date postDate) &#123;        this.postDate = postDate;    &#125;&#125;</code></pre><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><p>기능 추가될때마다 들어와서 수정해 주어야 한다.</p><pre><code class="java">package dao;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.sql.DataSource;import dto.GreenDto;public class GreenDao &#123;    private Connection con;    private PreparedStatement ps;    private ResultSet rs;    private String sql;    private static DataSource dataSource;    static &#123;        try &#123;            Context context = new InitialContext();            dataSource = (DataSource)context.lookup(&quot;java:comp/env/jdbc/oracle&quot;);        &#125; catch (NamingException e) &#123;            e.printStackTrace();        &#125;    &#125;    private GreenDao() &#123;&#125;    private static GreenDao greenDao = new GreenDao();    public static GreenDao getInstance() &#123;        return greenDao;    &#125;    /***** 1. 접속 해제 *****/    public void close(Connection con, PreparedStatement ps, ResultSet rs) &#123;        try &#123;            if (rs != null) &#123; rs.close(); &#125;            if (ps != null) &#123; ps.close(); &#125;            if (con != null) &#123; con.close(); &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    /***** 2. 전체 목록 가져오기 *****/    public ArrayList&lt;GreenDto&gt; list() &#123;        ArrayList&lt;GreenDto&gt; list = new ArrayList&lt;&gt;();        try &#123;            con = dataSource.getConnection();            sql = &quot;SELECT * FROM GREEN ORDER BY HIT DESC&quot;;            ps = con.prepareStatement(sql);            rs = ps.executeQuery();            while (rs.next()) &#123;                GreenDto greenDto = new GreenDto();                greenDto.setNo( rs.getInt(&quot;NO&quot;) );                greenDto.setWriter( rs.getString(&quot;WRITER&quot;) );                greenDto.setTitle( rs.getString(&quot;TITLE&quot;) );                greenDto.setContent( rs.getString(&quot;CONTENT&quot;) );                greenDto.setHit( rs.getInt(&quot;HIT&quot;) );                greenDto.setPostDate( rs.getDate(&quot;POSTDATE&quot;) );                list.add(greenDto);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, rs);        &#125;        return list;    &#125;    /***** 3. 삽입하기 *****/    public int insert(GreenDto greenDto) &#123;        int result = 0;        try &#123;            con = dataSource.getConnection();            sql = &quot;INSERT INTO GREEN VALUES (GREEN_SEQ.NEXTVAL, ?, ?, ?, 0, SYSDATE)&quot;;            ps = con.prepareStatement(sql);            ps.setString(1, greenDto.getWriter());            ps.setString(2, greenDto.getTitle());            ps.setString(3, greenDto.getContent());            result = ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;        return result;    &#125;    /***** 4. 게시글 가져오기 *****/    public GreenDto view(int no) &#123;        GreenDto greenDto = null;        try &#123;            con = dataSource.getConnection();            sql = &quot;SELECT * FROM GREEN WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setInt(1, no);            rs = ps.executeQuery();            if (rs.next()) &#123;                greenDto = new GreenDto();                greenDto.setNo( rs.getInt(1) );                greenDto.setWriter( rs.getString(2) );                greenDto.setTitle( rs.getString(3) );                greenDto.setContent( rs.getString(4) );                greenDto.setHit( rs.getInt(5) );                greenDto.setPostDate( rs.getDate(6) );            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, rs);        &#125;        return greenDto;    &#125;    /***** 5. 조회수 증가하기 *****/    public int updateHit(int no) &#123;        int result = 0;        try &#123;            con = dataSource.getConnection();            sql = &quot;UPDATE GREEN SET HIT = HIT + 1 WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setInt(1, no);            result = ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;        return result;    &#125;    /***** 6. 게시글 삭제하기 *****/    public int delete(int no) &#123;        int result = 0;        try &#123;            con = dataSource.getConnection();            sql = &quot;DELETE FROM GREEN WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setInt(1, no);            result = ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;        return result;    &#125;    /***** 7. 게시글 수정하기 *****/    public int update(GreenDto greenDto) &#123;        int result = 0;        try &#123;            con = dataSource.getConnection();            sql = &quot;UPDATE GREEN SET TITLE = ?, CONTENT = ? WHERE NO = ?&quot;;            ps = con.prepareStatement(sql);            ps.setString(1, greenDto.getTitle());            ps.setString(2, greenDto.getContent());            ps.setInt(3, greenDto.getNo());            result = ps.executeUpdate();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            close(con, ps, null);        &#125;        return result;    &#125;&#125;</code></pre><h2 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h2><blockquote><p>PathNRedirect.java 생성</p></blockquote><pre><code class="java">package common;public class PathNRedirect &#123;    private String path;    // 경로    private boolean isRedirect;    // 리다이렉트 여부    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123;        this.isRedirect = isRedirect;    &#125;&#125;</code></pre><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p><code>Interface</code> 생성으로 다른 command 들이 implements 할 <code>Command</code> 생성</p><h3 id="GreenCommand-java"><a href="#GreenCommand-java" class="headerlink" title="GreenCommand.java"></a>GreenCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface GreenCommand &#123;    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><h3 id="GreenListCommand-java"><a href="#GreenListCommand-java" class="headerlink" title="GreenListCommand.java"></a>GreenListCommand.java</h3><pre><code class="java">package command;import java.util.ArrayList;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;import dao.GreenDao;import dto.GreenDto;public class GreenListCommand implements GreenCommand &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        // Green테이블의 전체목록을 request에 저장해 두기        ArrayList&lt;GreenDto&gt; list = GreenDao.getInstance().list();        request.setAttribute(&quot;list&quot;, list);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;green/listPage.jsp&quot;);        pathNRedirect.setRedirect(false);    // forward (request.setAttribute(&quot;list&quot;, list);) 잘 전달된다.        return pathNRedirect;    &#125;&#125;</code></pre><h3 id="GreenInsertCommand-java"><a href="#GreenInsertCommand-java" class="headerlink" title="GreenInsertCommand.java"></a>GreenInsertCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;import dao.GreenDao;import dto.GreenDto;public class GreenInsertCommand implements GreenCommand &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        // DB에 삽입 후 결과를 request에 저장        String writer = request.getParameter(&quot;writer&quot;);        String title = request.getParameter(&quot;title&quot;);        String content = request.getParameter(&quot;content&quot;);        GreenDto greenDto = new GreenDto();        greenDto.setWriter(writer);        greenDto.setTitle(title);        greenDto.setContent(content);        int result = GreenDao.getInstance().insert(greenDto);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;green/insertResult.jsp?result=&quot; + result);    // redirect도 새로운 request는 전달된다.        pathNRedirect.setRedirect(true);    // redirect (기존 request를 넘기지 않는다)        return pathNRedirect;     &#125;&#125;</code></pre><h3 id="GreenViewCommand-java"><a href="#GreenViewCommand-java" class="headerlink" title="GreenViewCommand.java"></a>GreenViewCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;import dao.GreenDao;import dto.GreenDto;public class GreenViewCommand implements GreenCommand &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        String strNo = request.getParameter(&quot;no&quot;);        int no = 0;        if (strNo != null &amp;&amp; !strNo.isEmpty()) &#123;            no = Integer.parseInt(strNo);        &#125;        GreenDao.getInstance().updateHit(no);    // 조회수 증가 결과는 처리하지 않음        GreenDto greenDto = GreenDao.getInstance().view(no);            boolean result = false;        if (greenDto != null) &#123;            result = true;        &#125;        // boolean result = (greenDto != null);        PathNRedirect pathNRedirect = new PathNRedirect();        if (result) &#123;     // result가 true이므로 성공            request.setAttribute(&quot;greenDto&quot;, greenDto);            pathNRedirect.setPath(&quot;green/viewPage.jsp&quot;);            pathNRedirect.setRedirect(false);    // forward        &#125; else &#123;    // 실패            pathNRedirect.setPath(&quot;green/viewFail.jsp&quot;);            pathNRedirect.setRedirect(false);    // forward        &#125;            return pathNRedirect;    &#125;&#125;</code></pre><h3 id="GreenDeleteCommand-java"><a href="#GreenDeleteCommand-java" class="headerlink" title="GreenDeleteCommand.java"></a>GreenDeleteCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;import dao.GreenDao;public class GreenDeleteCommand implements GreenCommand &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        int no = Integer.parseInt(request.getParameter(&quot;no&quot;));        int result = GreenDao.getInstance().delete(no);        PathNRedirect pathNRedirect = new PathNRedirect();        //pathNRedirect.setPath(&quot;green/deleteResult.jsp&quot;);        if (result &gt; 0) &#123; // 삭제가 성공했을때            pathNRedirect.setPath(&quot;green/deleteSuccess.jsp&quot;);            pathNRedirect.setRedirect(true);    // redirect        &#125; else &#123;    // 삭제가 실패했을 떄            pathNRedirect.setPath(&quot;green/deleteFail.jsp&quot;);            pathNRedirect.setRedirect(false);    // forward        &#125;        return pathNRedirect;    &#125;&#125;</code></pre><h3 id="GreenUpdateCommand-java"><a href="#GreenUpdateCommand-java" class="headerlink" title="GreenUpdateCommand.java"></a>GreenUpdateCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;import dao.GreenDao;import dto.GreenDto;public class GreenUpdateCommand implements GreenCommand &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        int no = Integer.parseInt(request.getParameter(&quot;no&quot;));        String title = request.getParameter(&quot;title&quot;);        String content = request.getParameter(&quot;content&quot;);        GreenDto greenDto = new GreenDto();        greenDto.setNo(no);        greenDto.setTitle(title);        greenDto.setContent(content);        int result = GreenDao.getInstance().update(greenDto);        PathNRedirect pathNRedirect = new PathNRedirect();        if (result &gt; 0) &#123;    // 수정이 성공            pathNRedirect.setPath(&quot;green/updateSuccess.jsp?no=&quot; + no);            pathNRedirect.setRedirect(true);    // redirect        &#125; else &#123;    // 수정이 실패하면            pathNRedirect.setPath(&quot;green/updateFail.jsp&quot;);            pathNRedirect.setRedirect(false);    // forward        &#125;        return pathNRedirect;    &#125;&#125;</code></pre><hr><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p><code>Controller</code>에 새로운 기능 들이 추가 될 때 마다. <code>Command</code>를 만들어준다.</p><h3 id="GreenController-java"><a href="#GreenController-java" class="headerlink" title="GreenController.java"></a>GreenController.java</h3><pre><code class="java">package controller;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.GreenCommand;import command.GreenDeleteCommand;import command.GreenInsertCommand;import command.GreenListCommand;import command.GreenUpdateCommand;import command.GreenViewCommand;import common.PathNRedirect;@WebServlet(&quot;*.do&quot;)public class GreenController extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public GreenController() &#123;        super();    &#125;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        request.setCharacterEncoding(&quot;UTF-8&quot;);        response.setContentType(&quot;text/html; chareset=UTF-8&quot;);        String requestURI = request.getRequestURI();        String contextPath = request.getContextPath();        String cmd = requestURI.substring(contextPath.length());        GreenCommand command = null;        // String path = null;        PathNRedirect pathNRedirect = null;        switch (cmd) &#123;        // Command 필요(DB, 로직)        case &quot;/listPage.do&quot;:            command = new GreenListCommand();            pathNRedirect = command.execute(request, response);            break;        case &quot;/insert.do&quot;:            command = new GreenInsertCommand();            pathNRedirect = command.execute(request, response);            break;        case &quot;/viewPage.do&quot;:            command = new GreenViewCommand();            pathNRedirect = command.execute(request, response);            break;        case &quot;/delete.do&quot; :            command = new GreenDeleteCommand();            pathNRedirect = command.execute(request, response);            break;        case &quot;/update.do&quot; :            command = new GreenUpdateCommand();            pathNRedirect = command.execute(request, response);            break;        // 단순이동        case &quot;/insertPage.do&quot;:            pathNRedirect = new PathNRedirect();            pathNRedirect.setPath(&quot;green/insertPage.jsp&quot;);            pathNRedirect.setRedirect(true);            break;        case &quot;/updatePage.do&quot; :            pathNRedirect = new PathNRedirect();            pathNRedirect.setPath(&quot;green/updatePage.jsp&quot;);            pathNRedirect.setRedirect(false);    // forward            break;        &#125;        String path = pathNRedirect.getPath();        if (pathNRedirect.isRedirect()) &#123;            response.sendRedirect(path);        &#125; else &#123;            request.getRequestDispatcher(path).forward(request, response);        &#125;    &#125;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        doGet(request, response);    &#125;&#125;</code></pre><h2 id="ViewPage"><a href="#ViewPage" class="headerlink" title="ViewPage"></a>ViewPage</h2><p> <a href="https://jakezo.github.io/2021/01/04/JSP-11/">다음 포스트</a> </p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> JSON </tag>
            
            <tag> SQL </tag>
            
            <tag> DBCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-02 Map</title>
      <link href="2021/01/04/java-02/"/>
      <url>2021/01/04/java-02/</url>
      
        <content type="html"><![CDATA[<p>JSP 에서 Map 의 사용이 중요하기 때문에 먼저 정리해 보았습니다.</p><h2 id="맵-Map"><a href="#맵-Map" class="headerlink" title="맵 (Map)"></a>맵 (Map)</h2><p>‘사람’을 예로 들면 누구든지 “이름” = “홍길동”, “생일” = “몇 월 몇 일” 등으로 구분할 수 있다. 자바의 맵(Map)은 이러한 대응관계를 쉽게 표현할 수 있게 해 주는 자료형이다. 이것은 요즘 나오는 대부분의 언어들도 갖고 있는 자료형으로 Associative array, Hash라고도 불린다.</p><p>맵(Map)은 사전(dictionary)과 비슷하다. 즉, people 이란 단어에 “사람”, baseball 이라는 단어에 “야구”라는 뜻이 부합되듯이 Map은 Key와 Value라는 것을 한 쌍으로 갖는 자료형이다.</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>people</td><td>사람</td></tr><tr><td>baseball</td><td>야구</td></tr></tbody></table><p>Map은 리스트나 배열처럼 순차적으로(sequential) 해당 요소 값을 구하지 않고 key를 통해 value를 얻는다. 맵(Map)의 가장 큰 특징이라면 key로 value를 얻어낸다는 점이다. baseball이란 단어의 뜻을 찾기 위해서 사전의 내용을 순차적으로 모두 검색하는 것이 아니라 baseball이라는 단어가 있는 곳만을 펼쳐보는 것이다.</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>자바의 맵(Map)중 가장 간단한 HashMap에 대해서 알아보자.</p><blockquote><p>Map 역시 List와 마찬가지로 인터페이스이다.</p></blockquote><pre><code class="java">HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();map.put(&quot;people&quot;, &quot;사람&quot;);map.put(&quot;baseball&quot;, &quot;야구&quot;);</code></pre><p>key와 value가 String 형태인 HashMap을 만들고 위에서 보았던 예제의 항목값들을 입력해 보았다. key와 value는 위 예제에서 보듯이 put메소드를 이용하여 입력한다.</p><blockquote><p>※ HashMap 역시 제네릭스를 이용한다. 위의 HashMap 의 제네릭스는 Key, Value 모두 String 타입이다.</p></blockquote><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>key에 해당되는 값을 얻기 위해서는 다음과 같이 한다.</p><pre><code class="java">System.out.println(map.get(&quot;people&quot;));</code></pre><p>위와같이 get 메소드를 이용하면 value값을 얻을 수 있다. 위 예제는 결과로 “사람”이라는 문자열을 출력할 것이다.</p><h3 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h3><p>containsKey 메소드는 맵(Map)에 해당 키(key)가 있는지를 조사하여 그 결과값을 리턴한다.</p><pre><code class="java">System.out.println(map.containsKey(&quot;people&quot;));</code></pre><p>“people”이라는 키는 존재하므로 true가 출력될 것이다.</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>remove 메소드는 맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.</p><pre><code class="java">System.out.println(map.remove(&quot;people&quot;));</code></pre><p>“people”에 해당되는 아이템(people:사람)이 삭제된 후 “사람”이 출력될 것이다.</p><p>다음은 테스트 시 사용되었던 코드 전체이다.</p><p>TestMap.java</p><pre><code class="java">import java.util.HashMap;public class TestMap &#123;public static void main(String[] args) &#123;HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();map.put(&quot;people&quot;, &quot;사람&quot;);map.put(&quot;baseball&quot;, &quot;야구&quot;);        System.out.println(map.get(&quot;people&quot;));        System.out.println(map.containsKey(&quot;people&quot;));        System.out.println(map.remove(&quot;people&quot;));        System.out.println(map.size());    &#125;&#125;</code></pre><h2 id="LinkedHashMap과-TreeMap"><a href="#LinkedHashMap과-TreeMap" class="headerlink" title="LinkedHashMap과 TreeMap"></a>LinkedHashMap과 TreeMap</h2><p>Map의 가장 큰 특징은 순서에 의존하지 않고 key로 value를 가져오는데 있다. 하지만 가끔은 Map에 입력된 순서대로 데이터를 가져오고 싶은 경우도 있고 때로는 입력된 key에 의해 소트된 데이터를 가져오고 싶을 수도 있을 것이다. 이런경우에는 LinkedHashMap과 TreeMap을 사용하는 것이 유리하다.</p><ul><li>  LinkedHashMap은 입력된 순서대로 데이터가 출력되는 특징을 가지고 있다.</li><li>  TreeMap은 입력된 key의 소트순으로 데이터가 출력되는 특징을 가지고 있다.</li></ul><h3 id="Ex02-HashMap"><a href="#Ex02-HashMap" class="headerlink" title="Ex02-HashMap"></a>Ex02-HashMap</h3><pre><code class="java">public class Ex02_HashMap &#123;    public static void main(String[] args) &#123;        // 어떤 사람의 정보(이름, 나이, 키, 성별)를 Map으로 생성        Map&lt;String, String&gt; person = new HashMap&lt;&gt;();        person.put(&quot;name&quot;, &quot;alice&quot;);        person.put(&quot;age&quot;, 20 + &quot;&quot;);        person.put(&quot;height&quot;, 175.5 + &quot;&quot;);        person.put(&quot;gender&quot;, &quot;여&quot;);        // 순회 1. keySet() 메소드        // 1. key만 뺀다.        // 2. key들은 Set에 저장해야만 한다.        // 3. get() 메소드에 Set에서 뺀 key를 전달하면 value가 나온다.        // 1) Iterator        Set&lt;String&gt; set = person.keySet(); // set = [&quot;name&quot;, &quot;age&quot;, &quot;height&quot;, &quot;gender&quot;]        Iterator&lt;String&gt; itr = set.iterator();        while (itr.hasNext()) &#123;            String key = itr.next(); // itr.next() == key : &quot;name&quot; -&gt; &quot;age&quot; -&gt; &quot;height&quot; -&gt; &quot;gender&quot;(임의의 순서)            String value = person.get(key); // person.get(&quot;name&quot;) ==&gt; &quot;alice&quot;            System.out.println(key + &quot; : &quot; + value);        &#125;        // 2) 향상 for문        for (String key : person.keySet()) &#123;            String value = person.get(key);            System.out.println(key + &quot; : &quot; + value);        &#125;        // 순회 2. entrySet() 메소드        // entry : key와 value를 묶어서 부르는 말(person은 entry가 4개 있다.)        // key : getKey() 메소드        // value : getValue() 메소드        // 1) 향상 for문        for (Map.Entry&lt;String, String&gt; entry : person.entrySet()) &#123;            String key = entry.getKey();            String value = entry.getValue();            System.out.println(key + &quot; : &quot; + value);        &#125;        // 2) Iterator        Set&lt;Map.Entry&lt;String, String&gt;&gt; set2 = person.entrySet();        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; itr2 = set2.iterator();        while (itr2.hasNext()) &#123;            Map.Entry&lt;String, String&gt; entry = (Map.Entry&lt;String, String&gt;) itr2.next();            String key = entry.getKey();            String value = entry.getValue();            System.out.println(key + &quot; : &quot; + value);        &#125;    &#125;&#125;</code></pre><hr><h3 id="Ex02-HashSet"><a href="#Ex02-HashSet" class="headerlink" title="Ex02_HashSet"></a>Ex02_HashSet</h3><pre><code class="java">class Member &#123;    private String id;    public Member(String id) &#123;        super();        this.id = id;    &#125;    // hashCode() 메소드를 만들면 Object 클래스의 hashCode() 메소드 사용되지 않는다.    @Override    public int hashCode() &#123;        // return 1; // 임의 설정 -&gt; 모든 Member는 hash값이 1이므로 같은 Member일 가능성이 있다고 판단한다. (최악의 hashCode)        // return id.length();    // id의 글자수가 같은 Member일 가능성이 있다고 판단한다.        return id.charAt(0);    // id의 첫 번째 글자가 같으면, 같은 Member일 가능성이 있다고 판단한다.  &gt;&gt;&gt; 그룹이 세밀해질수록 더 좋다    &#125;    // hashCode() 결과가 같으면 equals() 메소드를 호출해서 비교한다.    // equals() 메소드를 만들면 Object 클래스의 equals() 메소드는 사용되지 않는다.    @Override    public boolean equals(Object obj) &#123;    // m1.equals(m2)        // this.id = m1     obj = m2 (다운캐스팅 필요)        return id.equals(((Member)obj).id);    &#125;    // hashCode 와 equals 자동생성 기능이 있다. hashCode() 의 계산법은 자동 생성이 더 뛰어나기 때문에 자동 생성 사용할 것 &#125;public class Ex02_HashSet &#123;    public static void main(String[] args) &#123;        // HashSet 클래스는 중복 저장이 불가능하다.        // 중복 체크 방법        // 1단계. hashCode 값을 비교한다.(같은 hashCode이면 같은 객체일 가능성이 있다.        // 2단계. equals로 비교한다.        Member m1 = new Member(&quot;abc&quot;);        Member m2 = new Member(&quot;abc&quot;);        Member m3 = new Member(&quot;xyz&quot;);        Set&lt;Member&gt; set = new HashSet&lt;&gt;();        set.add(m1);        set.add(m2);        System.out.println(set);        // HashMap의 활용        // 회원(Member)별 포인트(Integer) 관리        Map&lt;Member, Integer&gt; map = new HashMap&lt;&gt;();        map.put(m1, 5000);    // m1 회원의 포인트 : 5000        map.put(m1, 6000);    // m1 회원의 포인트 : 6000 으로 수정        map.put(m3, 10000);    // m1 회원의 포인트 : 10000        System.out.println(map);         &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-05 File Upload Download</title>
      <link href="2021/01/04/JSP-05/"/>
      <url>2021/01/04/JSP-05/</url>
      
        <content type="html"><![CDATA[<h2 id="File-upload"><a href="#File-upload" class="headerlink" title="File upload"></a>File upload</h2><ol><li><p><code>cos.jar</code> 라이브러리를 추가한다. (<code>servlets.com</code>)</p><ol><li><code>MultipartRequest</code> 클래스를 이용한다.</li><li>기존의 <code>request</code>를 이용해서 <code>MultipartRequest</code> 클래스 객체를 만든다.</li></ol></li><li><p><code>&lt;form method=&quot;post&quot;enctype=&quot;multipart/form-data&quot;&gt;</code></p></li><li><p><code>&lt;input type=&quot;file&quot; name=&quot;&quot; /&gt;</code></p></li><li><p>업로드 할 디렉토리(폴더)를 생성해 둔다.<br>-&gt; WebContent 디렉토리 아래에 임의의 디렉토리를 만든다.</p></li></ol><hr><blockquote><p><em>업로드 페이지</em></p></blockquote><h3 id="uploadPage-jsp"><a href="#uploadPage-jsp" class="headerlink" title="uploadPage.jsp"></a>uploadPage.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;파일 업로드 폼&lt;/h3&gt;    &lt;form action=&quot;upload.jsp&quot;          method=&quot;post&quot;          enctype=&quot;multipart/form-data&quot;&gt;          업로더 &lt;input type=&quot;text&quot; name=&quot;uploader&quot; /&gt;&lt;br/&gt;&lt;br/&gt;          첨부 &lt;input type=&quot;file&quot; name=&quot;filename&quot; /&gt;&lt;br/&gt;&lt;br/&gt;          &lt;button&gt;올리기&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p><em>업로드 설정</em></p></blockquote><h3 id="upload-jsp"><a href="#upload-jsp" class="headerlink" title="upload.jsp"></a>upload.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt;&lt;%-- 업로드가 진행되는 곳 --%&gt;&lt;%    // request의 인코딩을 할 필요가 없다.    // MultipartRequest 객체를 만들 때 인코딩을 한다.    // 디렉토리명을 변수로 저장한다.    String directory = &quot;archive&quot;;    // 디렉토리의 실제 경로를 알아낸다.    String realPath = request.getServletContext().getRealPath(directory);    // MultipartRequest 객체를 만든다. (이 때 업로드가 진행된다.)    MultipartRequest multipart = new MultipartRequest(            request,            realPath,            1024 * 1024 * 10,  // 업로드 크기 (10MB)            &quot;UTF-8&quot;,            new DefaultFileRenamePolicy()  // 동일한 파일이 업로드되면 기존 파일명을 수정하는 방법이다.(원래 파일명에 숫자 붙이기)            );%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;업로드 결과&lt;/h3&gt;    &lt;ul&gt;        &lt;li&gt;경로: &lt;%=realPath%&gt;&lt;/li&gt;        &lt;li&gt;업로더: &lt;%=request.getParameter(&quot;uploader&quot;)%&gt;&lt;/li&gt;        &lt;li&gt;업로더: &lt;%=multipart.getParameter(&quot;uploader&quot;)%&gt;&lt;/li&gt;        &lt;li&gt;올릴 때 파일명: &lt;%=multipart.getOriginalFileName(&quot;filename&quot;)%&gt;&lt;/li&gt;        &lt;li&gt;저장된 파일명: &lt;%=multipart.getFilesystemName(&quot;filename&quot;)%&gt;&lt;/li&gt;        &lt;%            // multipart 객체에 저장된 파일을 가져오는 메소드: getFile()            File file = multipart.getFile(&quot;filename&quot;);            // file을 통해서 필요한 정보를 얻어낸다.            String filename = file.getName();        // 파일명            long filesize = file.length() / 1024;    // file.length()는 바이트이므로 / 1024를 통해서 KB로 변환            pageContext.setAttribute(&quot;filesize&quot;, filesize);            String lastModifiedDate = new SimpleDateFormat(&quot;yyyy-MM-dd a h:mm&quot;).format(file.lastModified());  // 최종 수정일        %&gt;        &lt;li&gt;저장된 파일명: &lt;%=filename%&gt;&lt;/li&gt;        &lt;li&gt;파일크기: &lt;fmt:formatNumber value=&quot;$&#123;filesize&#125;&quot; pattern=&quot;#,##0&quot; /&gt;KB&lt;/li&gt;        &lt;li&gt;최종수정일: &lt;%=lastModifiedDate%&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;br/&gt;&lt;br/&gt;    &lt;a href=&quot;download.jsp?directory=&lt;%=directory%&gt;&amp;filename=&lt;%=filename%&gt;&quot;&gt;다운로드&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p><em>다운로드 설정</em></p></blockquote><h3 id="download-jsp"><a href="#download-jsp" class="headerlink" title="download.jsp"></a>download.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%    request.setCharacterEncoding(&quot;UTF-8&quot;);    String directory = request.getParameter(&quot;directory&quot;);    String filename = request.getParameter(&quot;filename&quot;);    // 1. realPath 알아내기    String realPath = request.getServletContext().getRealPath(directory);    // 2. filename을 이용해서 File 객체 생성하기    // File file = new File(realPath, filename);   // new File(realPath + &quot;/&quot; + filename);    File file = new File(realPath, filename);    // 3. (이건 다운로드다)라는 헤더 타입을 만든다.    // 파일의 이름과 파일의 길이가 필요하다.    // 서버 -&gt; 사용자 : response의 헤더 작업    // response.setContentType(&quot;application/x-msdownload&quot;);  // 아래와 같은 코드입니다.    response.setHeader(&quot;Content-Type&quot;, &quot;application/x-msdownload&quot;);    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + URLEncoder.encode(filename, &quot;UTF-8&quot;).replaceAll(&quot;\\+&quot;, &quot; &quot;));    // response.setContentLengthLong(file.length());  // 아래와 같은 코드입니다.    response.setHeader(&quot;Content-Length&quot;, file.length() + &quot;&quot;);    // 4. 진짜 다운로드를 진행한다. (파일복사와 유사한 프로그램)    // 모든 파일을 처리할 수 있는 바이트 기반 스트림을 사용한다.    BufferedInputStream bis = null;    BufferedOutputStream bos = null;    try &#123;        // JSP에서 OutputStream을 사용하려면         // JSP와 Servlet의 출력스트림 겹침 방지(IllegalStateException 발생 방지)처리가 필요하다.        out.clear();        out = pageContext.pushBody();        bis = new BufferedInputStream(new FileInputStream(file));        bos = new BufferedOutputStream(response.getOutputStream());        // 한 번에 옮기기        // file.length() 만큼 byte 배열을 확보해서 옮긴다.        byte[] array = new byte[(int)file.length()];        // 서버에서 읽기        bis.read(array, 0, (int)file.length());        // 읽은 내용을 array배열의 0번인덱스부터 길이만큼 영역에 저장해라.        // (int)file.length() -&gt; 길이가 10이라면        // bis.read(array, 0, 10) : array배열의 0번인덱스부터 10개공간 사용해서 저장해라.        // 사용자에게 쓰기        bos.write(array);    &#125; catch (FileNotFoundException e) &#123;    &#125; catch (IOException e) &#123;    &#125; finally &#123;        try &#123;            if (bos != null) &#123;                bos.close();            &#125;            if (bis != null) &#123;                bis.close();            &#125;        &#125; catch (Exception e) &#123;        &#125;    &#125;%&gt;</code></pre><h2 id="업로드-페이지및-결과-페이지"><a href="#업로드-페이지및-결과-페이지" class="headerlink" title="업로드 페이지및 결과 페이지"></a>업로드 페이지및 결과 페이지</h2><h3 id="처음화면"><a href="#처음화면" class="headerlink" title="처음화면"></a>처음화면</h3><img src="https://i.esdrop.com/d/KXiXzTr0EU.png"/><h3 id="업로드-파일-선택-후-화면"><a href="#업로드-파일-선택-후-화면" class="headerlink" title="업로드 파일 선택 후 화면"></a>업로드 파일 선택 후 화면</h3><img src="https://i.esdrop.com/d/w3aGPqwl80.png"/><h3 id="올린-후-화면"><a href="#올린-후-화면" class="headerlink" title="올린 후 화면"></a>올린 후 화면</h3><img src="https://i.esdrop.com/d/QCMLvC7cHk.png"/><h3 id="다운로드"><a href="#다운로드" class="headerlink" title="다운로드"></a>다운로드</h3><p>밑의 다운로드를 누르면 다운로드가 동작합니다.</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> File </tag>
            
            <tag> JSTL </tag>
            
            <tag> Download </tag>
            
            <tag> Upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-04 SESSION</title>
      <link href="2021/01/04/JSP-04/"/>
      <url>2021/01/04/JSP-04/</url>
      
        <content type="html"><![CDATA[<h2 id="Session-이란-무엇인가"><a href="#Session-이란-무엇인가" class="headerlink" title="Session 이란 무엇인가"></a>Session 이란 무엇인가</h2><ol><li>데이터를 저장하는 4개 영역 중 하나이다  (pageContext, application, request, session)</li><li>서버 측 영역 (쿠키에 비해 보안이 된다)</li><li>웹 브라우저가 켜져 있는 동안 유지된다.</li><li>session에 데이터 저장하기<br> setAttribute(“속성명”, 값); -&gt; 속성을 변수처럼 사용</li><li>session의 데이터 알아내기<br> getAttribute(“속성명”) -&gt; 모든 속성은 Object  타입으로 저장되므로 정상적인 사용을 위해서 캐스팅이 필요</li></ol><hr><h3 id="Session-A-jsp"><a href="#Session-A-jsp" class="headerlink" title="Session A.jsp"></a>Session A.jsp</h3><pre><code class="html">&lt;body&gt;    &lt;form action=&quot;/06_SESSION/ex01/02_session_B.jsp&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;data&quot; /&gt;        &lt;button&gt;세션에 저장하기&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="Session-B-jsp"><a href="#Session-B-jsp" class="headerlink" title="Session B.jsp"></a>Session B.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;%        request.setCharacterEncoding(&quot;UTF-8&quot;);        String data = request.getParameter(&quot;data&quot;);        // 세션에 담기        session.setAttribute(&quot;data&quot;, data);        // 화면 이동        // 기존의 request 정보를 넘기지 않는 이동        response.sendRedirect(&quot;/06_SESSION/ex01/02_session_C.jsp&quot;);    %&gt;</code></pre><h3 id="Session-C-jsp"><a href="#Session-C-jsp" class="headerlink" title="Session C.jsp"></a>Session C.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;%        request.setCharacterEncoding(&quot;utf-8&quot;);        String data = &quot;데이터 없음&quot;;        if (session.getAttribute(&quot;data&quot;) != null ) &#123;            data = session.getAttribute(&quot;data&quot;).toString();            //data = (String)session.getAttribute(&quot;data&quot;);        &#125;    %&gt;    &lt;h3&gt;세션의 data : &lt;%=data%&gt;&lt;/h3&gt;    &lt;form action=&quot;/06_SESSION/ex01/02_session_D.jsp&quot;&gt;        &lt;button&gt;세션 data 삭제하기&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="Session-D-jsp"><a href="#Session-D-jsp" class="headerlink" title="Session D.jsp"></a>Session D.jsp</h3><pre><code class="html">        // 1. 특정 속성만 제거하기        session.removeAttribute(&quot;data&quot;);        // 2. 세션 전부 초기화하기        session.invalidate();        // 3. 이전 페이지로 이동        response.sendRedirect(&quot;/06_SESSION/ex01/02_session_C.jsp&quot;);</code></pre><hr><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><img src="https://i.esdrop.com/d/FxBiUSL7vD.png"/><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><img src="https://i.esdrop.com/d/scsAgpRNzm.png"/><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><img src="https://i.esdrop.com/d/MfZRMAxi9o.png"/>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-02 TEMPLATE</title>
      <link href="2021/01/02/JSP-02/"/>
      <url>2021/01/02/JSP-02/</url>
      
        <content type="html"><![CDATA[<h2 id="01-SERVLET-EX01-Ex02-servlet-java-설명"><a href="#01-SERVLET-EX01-Ex02-servlet-java-설명" class="headerlink" title="01_SERVLET/EX01/Ex02_servlet.java 설명"></a>01_SERVLET/EX01/Ex02_servlet.java 설명</h2><pre><code class="java">@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre><hr><h2 id="Ex02-response"><a href="#Ex02-response" class="headerlink" title="Ex02 response"></a>Ex02 response</h2><pre><code class="java">@WebServlet(&quot;/Ex01_response&quot;)public class Ex01_response extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public Ex01_response() &#123;        super();    &#125;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        // 모든 코드 작성은 doGet()에서 진행합니다.        // 사용자에게 보여 줄 응답(response)을 만듭니다.        // 1. response에 content-type과 charset을 결정해 준다.        //     1) content-type: 어떤 데이터(파일)를 보여주는 것이지 그 타입을 작성        //    (1) html : text/html        //      (2) css  : text/css        //    (3) js   : text/javascript        //  2) charset : 인코딩을 결정한다.        response.setContentType(&quot;text/html&quot;);        response.setCharacterEncoding(&quot;UTF-8&quot;);        // 위 2개 코드는 한 줄로 작성해도 된다.        // response.setContentType(&quot;text/html; charset=UTF-8&quot;);        // 2. 출력스트림을 만듭니다.        //       출력스트림은 response를 이용해서 만듭니다.        // 바이트스트림 vs 문자스트림 어느 것을 쓸까? &gt;&gt; 문자 스트림(html은 모두 문자로 구성되기 때문에)        // 참고, Reader와 Writer로 끝나면 모두 문자스트림        // 문자 기반 출력스트림        // 1. FileWriter        // 2. PrintWriter        // 3. BufferedWriter        PrintWriter out = response.getWriter();            // out 출력스트림은 print(), println(), printf() 등을 사용할 수 있습니다.        // 이 중에서 가장 많이 사용되는 것은 println() 이다.        // out으로 html 태그들을 만들어야 하니까 자동으로 줄이 바뀌는 것이 좋습니다.        out.println(&quot;&lt;!DOGTYPE html&gt;&quot;);        out.println(&quot;&lt;html&gt;&quot;);        out.println(&quot;&lt;head&gt;&quot;);        out.println(&quot;&lt;title&gt;서블릿으로 만든 제목&lt;/title&gt;&quot;);        out.println(&quot;&lt;style&gt; h1&#123;color:red;&lt;/style&gt;&quot;);        out.println(&quot;&lt;script&gt;alert(&#39;반갑습니다.&#39;)&lt;/script&gt;&quot;);        out.println(&quot;&lt;/head&gt;&quot;);        out.println(&quot;&lt;body&gt;&quot;);        out.println(&quot;&lt;h1&gt;안녕하세요&lt;/h1&gt;&quot;);        out.println(&quot;&lt;/body&gt;&quot;);        out.println(&quot;&lt;/html&gt;&quot;);    &#125;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        doGet(request, response);    &#125;&#125;</code></pre><h2 id="request-객체의-정보-설명-1"><a href="#request-객체의-정보-설명-1" class="headerlink" title="request 객체의 정보 설명 1"></a>request 객체의 정보 설명 1</h2><pre><code class="java">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        // request 객체의 기본 정보        String ip = request.getRemoteAddr();            // 요청한 사람의 IP주소 (중요)        String contextPath = request.getContextPath();  // 컨텍스트패스 알아내기 (중요)        String charset = request.getCharacterEncoding();// 사용자 인코딩 알아내기        String contentType = request.getContentType();    // 컨텐트 타입 알아내기        String method = request.getMethod();            // 전송타입(GET, POST) 알아내기        // response 생성        // 1. content-type, charset        response.setContentType(&quot;text/html&quot;);        response.setCharacterEncoding(&quot;UTF-8&quot;);        // 2. 출력스트림 생성        PrintWriter out = response.getWriter();        // 3. 출력할 내용 만들기        out.println(&quot;&lt;!DOGTYPE html&gt;&quot;);    // html5 의미        out.println(&quot;&lt;html&gt;&quot;);        out.println(&quot;&lt;head&gt;&quot;);        out.println(&quot;&lt;title&gt;제목&lt;/title&gt;&quot;);        out.println(&quot;&lt;/head&gt;&quot;);        out.println(&quot;&lt;body&gt;&quot;);        out.println(&quot;&lt;h3&gt;&quot; + ip + &quot;&lt;/h3&gt;&quot;);        out.println(&quot;&lt;h3&gt;ContextPath: &quot; + contextPath + &quot;&lt;/h3&gt;&quot;);        out.println(&quot;&lt;h3&gt;Charset: &quot; + charset + &quot;&lt;/h3&gt;&quot;);        out.println(&quot;&lt;h3&gt;contentType: &quot; + contentType + &quot;&lt;/h3&gt;&quot;);        out.println(&quot;&lt;h3&gt;method: &quot; + method + &quot;&lt;/h3&gt;&quot;);        out.println(&quot;&lt;/body&gt;&quot;);        out.println(&quot;&lt;/html&gt;&quot;);    &#125;</code></pre><hr><h2 id="request-객체의-설명2"><a href="#request-객체의-설명2" class="headerlink" title="request 객체의 설명2."></a>request 객체의 설명2.</h2><blockquote><p><strong><em>request</em></strong></p></blockquote><pre><code class="html">/*     *    request      *      *     1. 사용자가 요청한 정보가 저장되는 객체     *     2. request에 저장된 요청 정보는 &quot;파라미터(parameter)&quot;라고 한다.     *     3. 모든 파라미터의 타입은 String or String[] 이다.     *         1) String value = request.getParameter(&quot;parameter&quot;)     *         2) String[] list = request.getParameterValues(&quot;parameter&quot;)     *     4. request를 이용해 정보를 요청하는 방법     *         1) &lt;form&gt; 태그의 모든 하위 폼 요소들은 submit하면 정보가 요청된다.     *            사용자: &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; submit 하면     *            서버   : String id = request.getParameter(&quot;id&quot;); 로 받아 들인다.     *             * 태그의 name이 없을 경우 서버측에서 데이터를 받아들이지 못 한다.     *         2) URL에 파라미터를 포함한다.     *             URL: 호스트:포트번호/ContextPath/URLMapping?파라미터=값&amp;파라미터=값     */</code></pre><h2 id="다른-페이지를-포함하는-방법"><a href="#다른-페이지를-포함하는-방법" class="headerlink" title="다른 페이지를 포함하는 방법"></a>다른 페이지를 포함하는 방법</h2><ol><li>정적 페이지: 바닥글<ol><li>변하는 내용이 없는 페이지</li><li><code>&lt;%@ include file=&quot;페이지&quot; %&gt;</code></li></ol></li></ol><ol start="2"><li>동적 페이지: 머리글<ol><li>변하는 내용이 있는 페이지</li><li><code>&lt;jsp:include page=&quot;페이지&quot;&gt;&lt;/jsp:include&gt;</code></li></ol></li></ol><hr><h3 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); %&gt;&lt;%--    주의. 태그 내부 주석은 위험합니다.    header.jsp 페이지에 파라미터 title을 전달합니다.--%&gt;&lt;jsp:include page=&quot;../template/header.jsp&quot;&gt;    &lt;jsp:param value=&quot;로그인&quot; name=&quot;title&quot; /&gt;&lt;/jsp:include&gt;            &lt;div class=&quot;login-box&quot;&gt;                &lt;input type=&quot;text&quot; name=&quot;id&quot; placeholder=&quot;아이디&quot; /&gt;&lt;br/&gt;                &lt;input type=&quot;password&quot; name=&quot;pw&quot; placeholder=&quot;****&quot; /&gt;&lt;br/&gt;&lt;br/&gt;                &lt;button&gt;로그인&lt;/button&gt;            &lt;/div&gt;&lt;%@ include file=&quot;../template/footer.jsp&quot; %&gt;</code></pre><hr><h3 id="footer-jsp"><a href="#footer-jsp" class="headerlink" title="footer.jsp"></a>footer.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;!-- main-wrap 종료 --&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;foot-wrap&quot;&gt;        &lt;a href=&quot;javascript:void(0)&quot;&gt;기업체정보&lt;/a&gt; /         &lt;a href=&quot;javascript:void(0)&quot;&gt;저작권&lt;/a&gt; /         &lt;a href=&quot;javascript:void(0)&quot;&gt;약관&lt;/a&gt;     &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="header-jsp"><a href="#header-jsp" class="headerlink" title="header.jsp"></a>header.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%    // 항상 header.jsp는 페이지의 제목을 받아온다.    request.setCharacterEncoding(&quot;UTF-8&quot;);    String title = request.getParameter(&quot;title&quot;);    if (title == null || title.isEmpty()) &#123;        title = &quot;마이MALL&quot;;  // 기본제목    &#125;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;%=title%&gt;&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;../assets/style/common.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;head-wrap&quot;&gt;        &lt;ul&gt;            &lt;li&gt;홈&lt;/li&gt;            &lt;li&gt;방명록&lt;/li&gt;            &lt;li&gt;게시판&lt;/li&gt;            &lt;li&gt;리뷰&lt;/li&gt;            &lt;li&gt;Q&amp;A&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;    &lt;!-- main-wrap 시작 --&gt;    &lt;div class=&quot;wrap&quot;&gt;        &lt;div class=&quot;main-wrap&quot;&gt;</code></pre><hr><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;assets/style/common.css&quot;&gt;    &lt;% request.setCharacterEncoding(&quot;UTF-8&quot;); %&gt;    &lt;jsp:include page=&quot;/template/header.jsp&quot;&gt;        &lt;jsp:param value=&quot;대문페이지&quot; name=&quot;title&quot;/&gt;    &lt;/jsp:include&gt;    &lt;h1&gt;홈페이지에 오신 걸 환영합니다.&lt;/h1&gt;    &lt;%@ include file=&quot;template/footer.jsp&quot; %&gt;</code></pre><h3 id="결과-페이지"><a href="#결과-페이지" class="headerlink" title="결과 페이지"></a>결과 페이지</h3><img src="https://i.esdrop.com/d/E0k3BzgtYL.png" width=""/>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-05 JSON 이란</title>
      <link href="2021/01/02/java-05/"/>
      <url>2021/01/02/java-05/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON-이란"><a href="#JSON-이란" class="headerlink" title="JSON 이란"></a>JSON 이란</h2><p>JSON은 JavaScript Object Notation의 약자에요. 줄여서 JSON. 우리말로는 “제이슨”이라고 하죠.</p><p>왜 다들 JSON, JSON거리는 걸까요?</p><p><code>JSON</code>은 네트워크를 통해 데이터를 주고받는 데 자주 사용되는 <code>경량의 데이터 형식</code> 입니다.</p><h3 id="JSON-Object"><a href="#JSON-Object" class="headerlink" title="JSON_Object"></a>JSON_Object</h3><pre><code class="java">package ex;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;public class Ex01_JSONObject &#123;    public static void main(String[] args) &#123;        // 예제로 사용할 JSON        // &#123;&quot;name&quot;:&quot;emily&quot;, &quot;age&quot;:20, &quot;isAdult&quot; : true&#125;        // OpenAPI에서 받아온 데이터로 생각        String strJSON =  &quot;&#123;\&quot;name\&quot;:\&quot;emily\&quot;, \&quot;age\&quot;:20, \&quot;isAdult\&quot; : true&#125;&quot;;        // 사용할 라이브러리 : json-simple-1.1.1.jar        // 라이브러리 역할 : JSON데이터를 JAVA의 Map으로 처리        // 1. JSON Parser: 구문분석기 생성        JSONParser parser = new JSONParser();        // 2. JSON Object: parser가 분석한 결과를 저장할 객체        JSONObject obj = null;        // 3. parsing: 구문분석        try &#123;            obj = (JSONObject) parser.parse(strJSON);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // 4. JSON Object는 Map과 사용법이 같다.        // JSONObject 클래스를 Map 인터페이스를 구현해서 만들었으므로         System.out.println(obj.get(&quot;name&quot;));    // get(&quot;key&quot;)        System.out.println(obj.get(&quot;age&quot;));    // get(&quot;key&quot;)        System.out.println((boolean)obj.get(&quot;isAdult&quot;) ? &quot;성인&quot; : &quot;미성년자&quot;); // get(&quot;key&quot;)    &#125;&#125;</code></pre><h3 id="JSON-Array"><a href="#JSON-Array" class="headerlink" title="JSON_Array"></a>JSON_Array</h3><pre><code class="java">public class Ex02_JSONArray &#123;    public static void main(String[] args) &#123;        // 예제로 사용할 JSON        // [ &#123;&#125;, &#123;&#125; ]        // [&#123;&quot;name&quot;:&quot;emily&quot;, &quot;age&quot; : 20, &quot;isAdult&quot; : true&#125;, &#123;&quot;name&quot;:&quot;james&quot;, &quot;age&quot; : 18, &quot;isAdult&quot; : false&#125;]        String strJSON = &quot;[&#123;\&quot;name\&quot;:\&quot;emily\&quot;, \&quot;age\&quot; : 20, \&quot;isAdult\&quot; : true&#125;, &#123;\&quot;name\&quot;:\&quot;james\&quot;, \&quot;age\&quot; : 18, \&quot;isAdult\&quot; : false&#125;]&quot;;        // 1. JSON Parser 생성        JSONParser parser = new JSONParser();        // 2. JSON Array 준비        JSONArray list = null;        // 3. parsing        try &#123;            list = (JSONArray) parser.parse(strJSON);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // JSONArray는 Java의 ArrayList와 사용법이 같다.        System.out.println(list.get(0));    // 첫번째        System.out.println(list.get(1));    // 두번째    &#125;&#125;</code></pre><h3 id="toJSONString"><a href="#toJSONString" class="headerlink" title="toJSONString"></a>toJSONString</h3><pre><code class="java">public class Ex03_toJSONString &#123;    public static void main(String[] args) &#123;        // 1. JSON 데이터 만들기        JSONObject obj = new JSONObject();        // Map 처럼 데이터를 저장할 수 있다.        obj.put(&quot;name&quot;, &quot;amanda&quot;);        obj.put(&quot;age&quot;, 22);        obj.put(&quot;isAdult&quot;, true);        // 2. JSON 데이터를 String으로  변환하기        String strJSON = obj.toJSONString();        System.out.println(strJSON);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-03 ArrayList</title>
      <link href="2021/01/02/java-03/"/>
      <url>2021/01/02/java-03/</url>
      
        <content type="html"><![CDATA[<h2 id="List란"><a href="#List란" class="headerlink" title="List란"></a>List란</h2><p>리스트는 배열과 비슷한 자바의 자료형으로 배열보다 편리한 기능을 많이 가지고 있다.</p><p>배열은 크기가 정해져 있다. 예를 들어 배열의 크기를 10개로 정했다면 10개 이상의 값을 담을 수는 없다.</p><p>박찬호 선수의 투구스피드를 저장해야 한다고 가정해 보자. 배열을 이용하여 투구수를 저장할 수 있을까? 1회에 투구수가 3개도 될 수 있고 100개도 될 수 있지 않은가? 프로그래밍 시 크기를 알 수 있는 상황도 있지만 명확한 크기를 알 수 없는 경우가 더 많다. 이렇게 동적으로 자료형의 갯수가 가변하는 상황이라면 List를 사용하는 것이 유리하다.</p><p><code>List</code> 자료형 중 가장 간단한 형태의 자료형인 <code>ArrayList</code>에 대해서 알아보자.</p><hr><blockquote><p>ArrayList</p></blockquote><ul><li>ArrayList       옛날에는 Vector라는 것을 사용하기도 함</li><li><ol><li>List 인터페이스를 구현하는 클래스이다.</li></ol></li><li><ol><li>ArrayList<Integer> iList = new ArrayList&lt;&gt;();</li></ol></li><li><ol start="2"><li>List<Integer> iList = new ArrayList&lt;&gt;();    // 주로 사용</li></ol></li><li></li><li><ol start="2"><li>배열을 사용하기 쉽게 만들어 놓은 클래스이다.</li></ol></li><li></li><li><ol start="3"><li>장점 : 순차적인 접근이 빠르다.(검색이 빠르다)</li></ol></li><li><ol start="4"><li>단점 : 중간 위치에 요소를 추가(뒤의 값을 뒤로 밀어야하기 때문)하거나 삭제(뒤의 값을 당겨야하기 때문)할 때 느리다.</li></ol></li></ul><h3 id="예시코드"><a href="#예시코드" class="headerlink" title="예시코드"></a>예시코드</h3><pre><code class="java">public class Ex01_ArrayList &#123;    public static void main(String[] args) &#123;        ArrayList&lt;Integer&gt; iList = new ArrayList&lt;&gt;();        // 1. 저장 : add() 메소드         iList.add(10);        iList.add(new Integer(20));        iList.add(new Integer(&quot;30&quot;));        // 2. 크기 : size() 메소드        System.out.println(&quot;iList 크기 : &quot; + iList.size());        // 3. 저장된 요소 가져오기 : get() 메소드        System.out.println(&quot;첫 번째 요소 : &quot; + iList.get(0));        System.out.println(&quot;마지막 요소 : &quot; + iList.get(iList.size() - 1));        // 4. 전체 순회하는 for문        // method 호출을 여러번 진행함, 성능이 필드 호출보다 안 좋음        // 나쁜 코드        for(int i = 0; i &lt; iList.size(); i++)            System.out.println((i + 1) + &quot;번째 요소 : &quot; + iList.get(i));        System.out.println(&quot;-----&quot;);        // 5. 개선된 for문 (size() 메소드 호출을 한 번으로 줄임)        // 클린 코드        for(int i = 0, size = iList.size(); i &lt; size; i++)            System.out.println((i + 1) + &quot;번째 요소 : &quot; + iList.get(i));        System.out.println(&quot;-----&quot;);        // 6. 삭제 : remove 메소드        iList.remove(0);  // 첫 번째 요소 삭제(인덱스 0), 삭제 된 값을 return        System.out.println(iList.get(0));    // 삭제된 자리 뒤의 요소들이 앞 당겨져 빈 자리를 메꾼다.        iList.remove(new Integer(20)); // 요소 번호가 아닌 요소의 값을 찾아 삭제, booleand type 으로 return        // 7. 검색 : contains() 메소드        if (iList.contains(new Integer(30)))    // iList에 30이 있는가?            System.out.println(&quot;30이 있다.&quot;);        // 8. 출력         System.out.println(iList); //[ , , , .]        // 9. 초기화 (모두 삭제)        iList.clear();        System.out.println(iList);    // []    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ArrayList </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-13  MVC 패턴</title>
      <link href="2021/01/02/JSP-13/"/>
      <url>2021/01/02/JSP-13/</url>
      
        <content type="html"><![CDATA[<h2 id="MVC-패턴을-배워봅시다"><a href="#MVC-패턴을-배워봅시다" class="headerlink" title="MVC 패턴을 배워봅시다."></a>MVC 패턴을 배워봅시다.</h2><img src="https://i.esdrop.com/d/f379sgqEJP.png"/><p>  <em>MVC패턴 그림을 보고 구조를 이해해보자</em></p><img src="https://i.esdrop.com/d/eEy443vxa4.png"/><h3 id="MVC-패턴의-의미"><a href="#MVC-패턴의-의미" class="headerlink" title="MVC 패턴의 의미"></a>MVC 패턴의 의미</h3><p><code>MVC</code>는 Model-View-Controller 의 약자입니다.<br>개발 할 때, 3가지 형태로 역할을 나누어 개발하는 방법론입니다.<br>비지니스 처리 로직과 사용자 인터페이스 요소들을 분리시켜 서로 영향없이 개발 하기 수월하다는 장점이 있습니다.<br>Model은 어플리케이션이 “무엇”을 할 것인지를 정의 합니다. </p><p>내부 비지니스 로직을 처리하기 위한 역할을 할 것입니다.<br>처리되는 알고리즘, DB 와 상호작용(CRUD Create Read Update Delete), 데이터 등등..<br>Controller는 모델이 “어떻게” 처리할 지를 알려주는 역할을 할 것이고, 모바일에서는 화면의 로직처리 부분입니다. 화면에서 사용자의 요청을 받아서 처리되는 부분을 구현되게 되며, 요청 내용을 분석해서 Model과 View에 업데이트 요청을 하게 됩니다.</p><p>사용자로 부터의 입력 을 받고 Model 또는 View중개인 역할<br>View는 화면에 “무엇” 인가를 “보여주기 위한 역할”을 합니다. 컨트롤러 하위에 종속되어, 모델이나 컨트롤러가 보여주려고 하는 모든 필요한 것들을 보여줄 것입니다.<br>최종 사용자에게 “무엇”을 화면(UI)으로 보여줌<br>그리고 Controller는 Model과 View가 각각 무엇을 해야 할 지를 알고 있고, 통제합니다. 비지니스 로직을 처리하는 Model과 완전히 UI에 의존적인 View가 서로 직접 이야기 할 수 없게 합니다.</p><h3 id="◆-JDBC-란-무엇일까요"><a href="#◆-JDBC-란-무엇일까요" class="headerlink" title="◆ JDBC 란 무엇일까요"></a>◆ JDBC 란 무엇일까요</h3><p>JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다. JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.</p><h3 id="◆-MyBatis란-무엇이죠"><a href="#◆-MyBatis란-무엇이죠" class="headerlink" title="◆  MyBatis란 무엇이죠?"></a>◆  MyBatis란 무엇이죠?</h3><p>마이바티스는 개발자가 지정한 SQL, 저장프로시저 그리고 몇가지 고급 매핑을 지원하는 퍼시스턴스 프레임워크이다. 마이바티스는 JDBC로 처리하는 상당부분의 코드와 파라미터 설정및 결과 매핑을 대신해준다. 마이바티스는 데이터베이스 레코드에 원시타입과 Map 인터페이스 그리고 자바 POJO 를 설정해서 매핑하기 위해 XML과 애노테이션을 사용할 수 있다.</p><ol><li>객체 지향 언어인 자바의 관계형 데이터 베이스 프로그래밍을 보다 쉽게 도와주는 프레임 워크</li></ol><ol start="2"><li>자바에서는 관계형 데이터베이스 프로그래밍을 하기위해 JDBC를 제공</li></ol><blockquote><p>MyBatis는 JDBC의 편한 사용을 위함</p></blockquote><h3 id="각각-구성-요소들의-의미"><a href="#각각-구성-요소들의-의미" class="headerlink" title="각각 구성 요소들의 의미;"></a>각각 구성 요소들의 의미;</h3><ul><li><p>MVC(Model, View, Controller) : 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴</p></li><li><p>Model = Service, DAO, DTO</p></li><li><p>View = 사용자가 보는 것</p></li><li><p>Controller = View와 Model를 이어주는 것</p></li></ul><ul><li><p>DAO(Data Access Object) :</p><p>  domain logic을 persistence mechanism과 분리하기 위해 사용</p><p>  데이터 요청이 들어올때마다 DAO에서 Connection 객체를 생성하면, 너무 많은 커넥션으로 인해 오류가 생긴다.</p><p>  그렇기 때문에 Singleton 패턴으로 하나의 객체만 생성되도록 구성한다.</p></li></ul><ul><li><p>domain logic : business logic이나 DB와 관련 없는 로직</p></li><li><p>persistence layer : DB에 data를 CRUD하는 계층</p></li><li><p>CRUD(Create, Read, Update, Drop) : DB Query</p></li></ul><ul><li><p>Connection 객체 : DB에 접근해 Query를 수행하는 객체</p></li><li><p>Query : DB를 사용하는 명령어</p></li><li><p>Singleton 패턴 : 클래스가 메모리에 할당 될 때 고정된 하나의 객체를 할당하고, 이후 그것만 참조하는 디자인패턴.</p></li><li><p>DTO(Data Transfer Object) :</p><p>  계층간 데이터 교환을 위한 Java Beans.</p><p>  DB에서 받아온 데이터들을 매핑하기위한 객체.</p><p>  일반적으로 logic을 가지고 있지 않고 getter, setter만 있다.</p></li></ul><ul><li><p>Java Beans : 자바 관련 소프트웨어 개발에 있어 재사용이 가능한 표준 컴포넌트 모델</p><ol><li><p>private field를 가지고 있다.</p></li><li><p>getter, setter로 필드에 접근한다.</p></li><li><p>생성자를 가진다.</p></li><li><p>Serializable 구현</p></li></ol></li></ul><ul><li><p>private field : 인스턴스 변수를 private로 가짐.</p></li><li><p>Serializable : 자바 내부의 Object나 데이터를 외부에서도 사용할 수 있도록 하는 기술</p></li></ul><ul><li><p>Service :</p><p>  Controller가 Request를 받으면 적절한 Service에 전달하고, 전달 받은 Service는 business logic을 처리한다.</p><p>  Service가 DB에 DAO로 접근하고, 데이터를 DTO로 전달받은 다음, 데이터를 필요에 맞게 가공하여 반환한다.<br>[출처] Java - Service, DAO, DTO 정리|작성자 브혼</p></li></ul><hr><h2 id="사용환경을-위한-준비"><a href="#사용환경을-위한-준비" class="headerlink" title="사용환경을 위한 준비"></a>사용환경을 위한 준비</h2><h3 id="jar-준비"><a href="#jar-준비" class="headerlink" title="jar 준비"></a>jar 준비</h3><img src="https://i.esdrop.com/d/ZEwcXmxott.png"/><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><blockquote><p>mybatis를 사용하기 위한 설정<br>DBService.java 객체 생성<br>sqlmap-config.xml, member.xml 설정</p></blockquote><ul><li>DBService.java</li></ul><pre><code class="java">package mybatis.config;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;public class DBService &#123;    //DBService: SqlSessionFactory 반환    private SqlSessionFactory factory;    // DBService 생성자: Singleton    private DBService() &#123;        try &#123;            String resource = &quot;mybatis/config/sqlmap-config.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            factory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch(Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    private static DBService service = new DBService();    public static DBService getInstance() &#123;        return service;    &#125;    public SqlSessionFactory getFactory() &#123;        return factory;    &#125;&#125;</code></pre><ul><li>mapper.xml</li></ul><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;mybatis.mapper.mapper&quot;&gt;  &lt;!--       패키지 : mybatis.mapper      클래스 : mapper  --&gt;  &lt;!--       1. 사용태그          1) &lt;select&gt;          2) &lt;insert&gt;          3) &lt;update&gt;          4) &lt;delete&gt;      2. 쿼리문에 전달할 파라미터가 있는 경우          : parameterType 속성          ex)              &lt;select parameterType=&quot;int&quot;&gt;    파라미터가 정수               &lt;select parameterType=&quot;dto.LimeDto&quot;&gt;    파라미터가 dto패키지의 LimeDto               &lt;select parameterType=&quot;Map&quot;&gt;          3. 쿼리문의 결과          : resultType 속성          1) 결과가 List&lt;LimeDto&gt;인 경우    &lt;select resultType=&quot;dto.LimeDto&quot;&gt;          2) 결과가 LimeDto인 경우            &lt;select resultType=&quot;dto.LimeDto&quot;&gt;          3) 결과가 0 또는 1인 경우            &lt;insert&gt; &lt;update&gt; &lt;delete&gt; 태그는 resultType을 작성하지 않는다.   --&gt;  &lt;select id=&quot;list&quot; resultType=&quot;dto.LimeDto&quot;&gt;    SELECT * FROM LIME  &lt;/select&gt;  &lt;insert id=&quot;insert&quot; parameterType=&quot;dto.LimeDto&quot;&gt;    INSERT INTO    LIME (NO, WRITER, TITLE, CONTENT, POSTDATE)    VALUES (LIME_SEQ.NEXTVAL, #&#123;writer&#125;, #&#123;title&#125;, #&#123;content&#125;, SYSDATE)  &lt;/insert&gt;  &lt;select id=&quot;view&quot; resultType=&quot;dto.LimeDto&quot;&gt;    SELECT * FROM LIME WHERE NO = #&#123;no&#125;  &lt;/select&gt;  &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;    DELETE FROM LIME WHERE NO = #&#123;no&#125;  &lt;/delete&gt;  &lt;update id=&quot;update&quot; parameterType=&quot;dto.LimeDto&quot;&gt;    UPDATE LIME SET TITLE = #&#123;title&#125;, CONTENT = #&#123;content&#125; WHERE NO = #&#123;no&#125;  &lt;/update&gt;&lt;/mapper&gt;</code></pre><ul><li>sqlmap-config.xml(member)</li></ul><p>먼저 멤버의 값을 여기 추가한다. 나중에 추가될때마다 차차 추가됩니다.</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;mybatis.mapper.member&quot;&gt;&lt;/mapper&gt;</code></pre><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><pre><code class="sql">drop sequence member_seq;create sequence member_seq start with 1increment by 1maxvalue 999999nocyclenocache;drop table member;create table member(    mno number primary key,    mid varchar2(30) not null unique,    mpw varchar2(30) not null,    mname varchar2(30),    memail varchar2(50) not null unique,    mphone varchar2(20),    maddress varchar2(100),    mregdate date);insert into member values(member_seq.nextval, &#39;admin&#39;, &#39;1111&#39;, &#39;관리자&#39;, &#39;admin@myhome.com&#39;, &#39;010-0000-0000&#39;, &#39;부천&#39;, sysdate);</code></pre><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><pre><code class="java">public class MemberDao &#123;private SqlSessionFactory factory;    private MemberDao()    &#123;        factory = DBService.getInstance().getFactory();    &#125;    private static MemberDao memberDao = new MemberDao();    public static MemberDao getInstance() &#123;        return memberDao;    &#125;&#125;</code></pre><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><pre><code class="java">package dto;import java.sql.Date;public class MemberDto &#123;    private int mNo;    private String mId;    private String mPw;    private String mName;    private String mEmail;    private String mPhone;    private String mAddress;    private Date mRegdate;    public int getmNo() &#123;        return mNo;    &#125;    public void setmNo(int mNo) &#123;        this.mNo = mNo;    &#125;    ...&#125;</code></pre><hr><h2 id="MVC-패턴-구축"><a href="#MVC-패턴-구축" class="headerlink" title="MVC 패턴 구축"></a>MVC 패턴 구축</h2><h3 id="pathNRedirect-만들기"><a href="#pathNRedirect-만들기" class="headerlink" title="pathNRedirect 만들기"></a>pathNRedirect 만들기</h3><blockquote><p>controller의 doGet()메소드의 pathNRedirect</p></blockquote><pre><code class="java">package common;public class PathNRedirect &#123;    private String path;    private boolean isRedirect;    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123;        this.isRedirect = isRedirect;    &#125;&#125;</code></pre><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><pre><code class="java">package command.member;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface MemberCommand &#123;    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="java">package controller;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.member.MemberCommand;import command.member.MemberFindIdCommand;import command.member.MemberLoginCommand;import command.member.MemberLogoutCommand;import common.PathNRedirect;@WebServlet(&quot;*.member&quot;)public class MemberController extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public MemberController() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        String requestURI = request.getRequestURI();        String context = request.getContextPath();        String cmd = requestURI.substring(context.length());        MemberCommand command = null;        PathNRedirect pathNRedirect = null;    &#125;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        // TODO Auto-generated method stub        doGet(request, response);    &#125;&#125;</code></pre><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><blockquote><p>index 파일 - header와 footer를 include 해준다.</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot;    prefix=&quot;c&quot; %&gt;&lt;!-- 머리글 포함(파라미터(title)가 있으므로 동적 페이지 포함  --&gt;&lt;jsp:include page=&quot;template/header.jsp&quot;/&gt;&lt;c:if test=&quot;$&#123;loginDto.mId eq &#39;admin&#39; &#125;&quot;&gt;    &lt;h1&gt;관리자님 환영합니다.&lt;/h1&gt;    &lt;a href=&quot;/MyHome/memberList.admin&quot;&gt;회원관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/guestList.admin&quot;&gt;방명록관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/bbsList.admin&quot;&gt;BBS관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/boardList.admin&quot;&gt;게시판관리&lt;/a&gt;&lt;br&gt;&lt;/c:if&gt;&lt;c:if test=&quot;$&#123;loginDto.mId ne &#39;admin&#39;&#125;&quot; &gt;            &lt;h1&gt;MyHome에 오신 걸 환영합니다.&lt;/h1&gt;&lt;/c:if&gt;&lt;!-- 바닥글 포함(파라미터가 없으므로 정적 페이지 포함 --&gt;    &lt;%@include file=&quot;template/footer.jsp&quot; %&gt;</code></pre><br><blockquote><p>header.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;    &lt;%        request.setCharacterEncoding(&quot;utf-8&quot;);        String title = request.getParameter(&quot;title&quot;);        if(title == null || title.isEmpty())&#123;            title = &quot;환영합니다.&quot;;        &#125;        pageContext.setAttribute(&quot;title&quot;, title);    %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;$&#123;title &#125;&lt;/title&gt;&lt;!-- css --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;asset/style/common.css?ver0.1&quot;&gt;&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot; integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function fn_logout(f)&#123;        if(confirm(&#39;로그아웃 하시겠습니까?&#39;))&#123;            f.action = &#39;/MyHome/logout.member&#39;;            f.submit();        &#125;    &#125;    function fn_signOut()&#123;        location.href= &#39;/MyHome/signOutPage.member&#39;;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;wrap&quot;&gt;        &lt;img alt=&quot;고양이&quot; src=&quot;asset/image/cat-3059075_1920.jpg&quot; style=&quot;height: 100px; width: 250px&quot;&gt;        &lt;div class=&quot;head-wrap&quot;&gt;            &lt;!-- 로그인 안 된 상태 --&gt;            &lt;c:if test=&quot;$&#123;loginDto eq null &#125;&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;MyHome로그인&quot; onclick=&quot;location.href=&#39;/MyHome/loginPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;회원가입&quot; onclick=&quot;location.href=&#39;/MyHome/signUpPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;마이페이지&quot; onclick=&quot;location.href=&#39;/MyHome/loginPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;방명록&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;BBS&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;게시판&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;!-- 2.로그인 상태 --&gt;            &lt;/c:if&gt;            &lt;c:if test=&quot;$&#123;loginDto ne null &#125;&quot;&gt;                $&#123;loginDto.mName &#125; 님 반갑습니다.&amp;nbsp;&amp;nbsp;            &lt;form&gt;                &lt;input type=&quot;button&quot; value=&quot;로그아웃&quot; onclick=&quot;fn_logout(this.form)&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;회원탈퇴&quot; onclick=&quot;fn_signOut()&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;마이페이지&quot; onclick=&quot;location.href=&#39;/MyHome/myPage.member&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;방명록&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;BBS&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;게시판&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;/form&gt;            &lt;/c:if&gt;        &lt;/div&gt;        &lt;div class=&quot;body-wrap&quot;&gt;</code></pre><br/><blockquote><p>footer.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;/div&gt;        &lt;div class=&quot;foot-wrap&quot;&gt;            개인정보보호정책 | 약관 | 저작권        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-11  MVC 패턴</title>
      <link href="2021/01/02/JSP-11/"/>
      <url>2021/01/02/JSP-11/</url>
      
        <content type="html"><![CDATA[<h2 id="MVC-패턴을-배워봅시다"><a href="#MVC-패턴을-배워봅시다" class="headerlink" title="MVC 패턴을 배워봅시다."></a>MVC 패턴을 배워봅시다.</h2><img src="https://i.esdrop.com/d/f379sgqEJP.png"/><p>  <em>MVC패턴 그림을 보고 구조를 이해해보자</em></p><img src="https://i.esdrop.com/d/eEy443vxa4.png"/><h3 id="MVC-패턴의-의미"><a href="#MVC-패턴의-의미" class="headerlink" title="MVC 패턴의 의미"></a>MVC 패턴의 의미</h3><p><code>MVC</code>는 Model-View-Controller 의 약자입니다.<br>개발 할 때, 3가지 형태로 역할을 나누어 개발하는 방법론입니다.<br>비지니스 처리 로직과 사용자 인터페이스 요소들을 분리시켜 서로 영향없이 개발 하기 수월하다는 장점이 있습니다.<br>Model은 어플리케이션이 “무엇”을 할 것인지를 정의 합니다. </p><p>내부 비지니스 로직을 처리하기 위한 역할을 할 것입니다.<br>처리되는 알고리즘, DB 와 상호작용(CRUD Create Read Update Delete), 데이터 등등..<br>Controller는 모델이 “어떻게” 처리할 지를 알려주는 역할을 할 것이고, 모바일에서는 화면의 로직처리 부분입니다. 화면에서 사용자의 요청을 받아서 처리되는 부분을 구현되게 되며, 요청 내용을 분석해서 Model과 View에 업데이트 요청을 하게 됩니다.</p><p>사용자로 부터의 입력 을 받고 Model 또는 View중개인 역할<br>View는 화면에 “무엇” 인가를 “보여주기 위한 역할”을 합니다. 컨트롤러 하위에 종속되어, 모델이나 컨트롤러가 보여주려고 하는 모든 필요한 것들을 보여줄 것입니다.<br>최종 사용자에게 “무엇”을 화면(UI)으로 보여줌<br>그리고 Controller는 Model과 View가 각각 무엇을 해야 할 지를 알고 있고, 통제합니다. 비지니스 로직을 처리하는 Model과 완전히 UI에 의존적인 View가 서로 직접 이야기 할 수 없게 합니다.</p><h3 id="◆-JDBC-란-무엇일까요"><a href="#◆-JDBC-란-무엇일까요" class="headerlink" title="◆ JDBC 란 무엇일까요"></a>◆ JDBC 란 무엇일까요</h3><p>JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다. JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.</p><h3 id="◆-MyBatis란-무엇이죠"><a href="#◆-MyBatis란-무엇이죠" class="headerlink" title="◆  MyBatis란 무엇이죠?"></a>◆  MyBatis란 무엇이죠?</h3><p>마이바티스는 개발자가 지정한 SQL, 저장프로시저 그리고 몇가지 고급 매핑을 지원하는 퍼시스턴스 프레임워크이다. 마이바티스는 JDBC로 처리하는 상당부분의 코드와 파라미터 설정및 결과 매핑을 대신해준다. 마이바티스는 데이터베이스 레코드에 원시타입과 Map 인터페이스 그리고 자바 POJO 를 설정해서 매핑하기 위해 XML과 애노테이션을 사용할 수 있다.</p><ol><li>객체 지향 언어인 자바의 관계형 데이터 베이스 프로그래밍을 보다 쉽게 도와주는 프레임 워크</li></ol><ol start="2"><li>자바에서는 관계형 데이터베이스 프로그래밍을 하기위해 JDBC를 제공</li></ol><blockquote><p>MyBatis는 JDBC의 편한 사용을 위함</p></blockquote><hr><h2 id="사용환경-준비"><a href="#사용환경-준비" class="headerlink" title="사용환경 준비"></a>사용환경 준비</h2><h3 id="필요한-jar-목록"><a href="#필요한-jar-목록" class="headerlink" title="필요한 jar 목록"></a>필요한 jar 목록</h3><img src="https://i.esdrop.com/d/ZEwcXmxott.png"/><p><code>WebContent</code> / <code>WEB-INF</code> / <code>lib</code> 에 넣어줘야함</p><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ul><li><p>mybatis를 사용하기 위한 설정</p><p>  DBService.java 객체 생성</p><p>  sqlmap-config.xml, member.xml 설정</p></li></ul><h3 id="DBService-java"><a href="#DBService-java" class="headerlink" title="DBService.java"></a>DBService.java</h3><pre><code class="java">package mybatis.config;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;public class DBService &#123;    //DBService: SqlSessionFactory 반환    private SqlSessionFactory factory;    // DBService 생성자: Singleton    private DBService() &#123;        try &#123;            String resource = &quot;mybatis/config/sqlmap-config.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            factory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch(Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    private static DBService service = new DBService();    public static DBService getInstance() &#123;        return service;    &#125;    public SqlSessionFactory getFactory() &#123;        return factory;    &#125;&#125;</code></pre><h3 id="sqlmap-config-xml"><a href="#sqlmap-config-xml" class="headerlink" title="sqlmap-config.xml"></a>sqlmap-config.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot; &gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;oracle.jdbc.driver.OracleDriver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;spring&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;oracle&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mybatis/mapper/member.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h3 id="mapper-xml-member"><a href="#mapper-xml-member" class="headerlink" title="mapper.xml(member)"></a>mapper.xml(member)</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;mybatis.mapper.member&quot;&gt;&lt;/mapper&gt;</code></pre><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><pre><code class="sql">drop sequence member_seq;create sequence member_seq start with 1increment by 1maxvalue 999999nocyclenocache;drop table member;create table member(    mno number primary key,    mid varchar2(30) not null unique,    mpw varchar2(30) not null,    mname varchar2(30),    memail varchar2(50) not null unique,    mphone varchar2(20),    maddress varchar2(100),    mregdate date);insert into member values(member_seq.nextval, &#39;admin&#39;, &#39;1111&#39;, &#39;관리자&#39;, &#39;admin@myhome.com&#39;, &#39;010-0000-0000&#39;, &#39;부천&#39;, sysdate);</code></pre><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><pre><code class="java">public class MemberDao &#123;private SqlSessionFactory factory;    private MemberDao()    &#123;        factory = DBService.getInstance().getFactory();    &#125;    private static MemberDao memberDao = new MemberDao();    public static MemberDao getInstance() &#123;        return memberDao;    &#125;&#125;</code></pre><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><pre><code class="java">package dto;import java.sql.Date;public class MemberDto &#123;    private int mNo;    private String mId;    private String mPw;    private String mName;    private String mEmail;    private String mPhone;    private String mAddress;    private Date mRegdate;    public int getmNo() &#123;        return mNo;    &#125;    public void setmNo(int mNo) &#123;        this.mNo = mNo;    &#125;    ...&#125;</code></pre><hr><h2 id="MVC-패턴-구축"><a href="#MVC-패턴-구축" class="headerlink" title="MVC 패턴 구축"></a>MVC 패턴 구축</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="java">package controller;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.member.MemberCommand;import command.member.MemberFindIdCommand;import command.member.MemberLoginCommand;import command.member.MemberLogoutCommand;import common.PathNRedirect;@WebServlet(&quot;*.member&quot;)public class MemberController extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public MemberController() &#123;        super();        // TODO Auto-generated constructor stub    &#125;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        String requestURI = request.getRequestURI();        String context = request.getContextPath();        String cmd = requestURI.substring(context.length());        MemberCommand command = null;        PathNRedirect pathNRedirect = null;    &#125;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        // TODO Auto-generated method stub        doGet(request, response);    &#125;&#125;</code></pre><blockquote><p>controller의 doGet()메소드의 pathNRedirect</p></blockquote><pre><code class="java">package common;public class PathNRedirect &#123;    private String path;    private boolean isRedirect;    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123;        this.isRedirect = isRedirect;    &#125;&#125;</code></pre><h3 id="Command"><a href="#Command" class="headerlink" title="- Command"></a>- Command</h3><pre><code class="java">package command.member;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface MemberCommand &#123;    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><h3 id="view"><a href="#view" class="headerlink" title="- view"></a>- view</h3><blockquote><p>index 파일 - header와 footer를 include 해준다.</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot;    prefix=&quot;c&quot; %&gt;&lt;!-- 머리글 포함(파라미터(title)가 있으므로 동적 페이지 포함  --&gt;&lt;jsp:include page=&quot;template/header.jsp&quot;/&gt;&lt;c:if test=&quot;$&#123;loginDto.mId eq &#39;admin&#39; &#125;&quot;&gt;    &lt;h1&gt;관리자님 환영합니다.&lt;/h1&gt;    &lt;a href=&quot;/MyHome/memberList.admin&quot;&gt;회원관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/guestList.admin&quot;&gt;방명록관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/bbsList.admin&quot;&gt;BBS관리&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;/MyHome/boardList.admin&quot;&gt;게시판관리&lt;/a&gt;&lt;br&gt;&lt;/c:if&gt;&lt;c:if test=&quot;$&#123;loginDto.mId ne &#39;admin&#39;&#125;&quot; &gt;            &lt;h1&gt;MyHome에 오신 걸 환영합니다.&lt;/h1&gt;&lt;/c:if&gt;&lt;!-- 바닥글 포함(파라미터가 없으므로 정적 페이지 포함 --&gt;    &lt;%@include file=&quot;template/footer.jsp&quot; %&gt;</code></pre><br><blockquote><p>header.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;    &lt;%        request.setCharacterEncoding(&quot;utf-8&quot;);        String title = request.getParameter(&quot;title&quot;);        if(title == null || title.isEmpty())&#123;            title = &quot;환영합니다.&quot;;        &#125;        pageContext.setAttribute(&quot;title&quot;, title);    %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;$&#123;title &#125;&lt;/title&gt;&lt;!-- css --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;asset/style/common.css?ver0.1&quot;&gt;&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot; integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function fn_logout(f)&#123;        if(confirm(&#39;로그아웃 하시겠습니까?&#39;))&#123;            f.action = &#39;/MyHome/logout.member&#39;;            f.submit();        &#125;    &#125;    function fn_signOut()&#123;        location.href= &#39;/MyHome/signOutPage.member&#39;;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;wrap&quot;&gt;        &lt;img alt=&quot;고양이&quot; src=&quot;asset/image/cat-3059075_1920.jpg&quot; style=&quot;height: 100px; width: 250px&quot;&gt;        &lt;div class=&quot;head-wrap&quot;&gt;            &lt;!-- 로그인 안 된 상태 --&gt;            &lt;c:if test=&quot;$&#123;loginDto eq null &#125;&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;MyHome로그인&quot; onclick=&quot;location.href=&#39;/MyHome/loginPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;회원가입&quot; onclick=&quot;location.href=&#39;/MyHome/signUpPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;마이페이지&quot; onclick=&quot;location.href=&#39;/MyHome/loginPage.member&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;방명록&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;BBS&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;게시판&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;!-- 2.로그인 상태 --&gt;            &lt;/c:if&gt;            &lt;c:if test=&quot;$&#123;loginDto ne null &#125;&quot;&gt;                $&#123;loginDto.mName &#125; 님 반갑습니다.&amp;nbsp;&amp;nbsp;            &lt;form&gt;                &lt;input type=&quot;button&quot; value=&quot;로그아웃&quot; onclick=&quot;fn_logout(this.form)&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;회원탈퇴&quot; onclick=&quot;fn_signOut()&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;마이페이지&quot; onclick=&quot;location.href=&#39;/MyHome/myPage.member&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;방명록&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;BBS&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;                &lt;input type=&quot;button&quot; value=&quot;게시판&quot; onclick=&quot;location.href=&#39;/MyHome/&#39;&quot;/&gt;            &lt;/form&gt;            &lt;/c:if&gt;        &lt;/div&gt;        &lt;div class=&quot;body-wrap&quot;&gt;</code></pre><br/><blockquote><p>footer.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;    &lt;/div&gt;        &lt;div class=&quot;foot-wrap&quot;&gt;            개인정보보호정책 | 약관 | 저작권        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-09 AJAX 실전 (2)</title>
      <link href="2021/01/02/JSP-09/"/>
      <url>2021/01/02/JSP-09/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX-실전-2"><a href="#AJAX-실전-2" class="headerlink" title="AJAX 실전 (2)"></a>AJAX 실전 (2)</h2><blockquote><p>AJAX를 사용하기 위한 설정 </p></blockquote><blockquote><p>My Batis의 DBService.java 객체 생성 </p></blockquote><blockquote><p>sqlmap-config.xml, member.xml 설정</p></blockquote><h3 id="mybatis-config-DBService-java"><a href="#mybatis-config-DBService-java" class="headerlink" title="mybatis/config/DBService.java"></a>mybatis/config/DBService.java</h3><pre><code class="java">package mybatis.config;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;public class DBService &#123;    // DBService: SqlSessionFactory 만들어서 반환하는 클래스    // 필드    private SqlSessionFactory factory;    // 생성자: Singleton    private DBService() &#123;        try &#123;            String resource = &quot;mybatis/config/sqlmap-config.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            factory = new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    private static DBService service = new DBService();    public static DBService getInstance() &#123;        return service;    &#125;    // 메소드    public SqlSessionFactory getFactory() &#123;        return factory;    &#125;&#125;</code></pre><h3 id="sqlmap-config-xml"><a href="#sqlmap-config-xml" class="headerlink" title="sqlmap-config.xml"></a>sqlmap-config.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot; &gt;&lt;configuration&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;oracle.jdbc.driver.OracleDriver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;spring&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;oracle&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mybatis/mapper/member.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h3 id="mapper-xml-member"><a href="#mapper-xml-member" class="headerlink" title="mapper.xml(member)"></a>mapper.xml(member)</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;mybatis.mapper.member&quot;&gt;&lt;/mapper&gt;</code></pre><blockquote><p>DataBase를 준비한다.</p></blockquote><h3 id="db-black-sql"><a href="#db-black-sql" class="headerlink" title="db/black.sql"></a>db/black.sql</h3><pre><code class="sql">DROP TABLE BLACK;CREATE TABLE BLACK(    NAME VARCHAR2(100),    AGE NUMBER,    GENDER VARCHAR2(10),    PHONE VARCHAR2(100),    ADDRESS VARCHAR2(100));INSERT INTO BLACK VALUES (&#39;에밀리&#39;, 20, &#39;여&#39;, &#39;010-1111-1111&#39;, &#39;서울&#39;);INSERT INTO BLACK VALUES (&#39;제임스&#39;, 21, &#39;남&#39;, &#39;010-2222-1111&#39;, &#39;독도&#39;);INSERT INTO BLACK VALUES (&#39;앨리스&#39;, 22, &#39;여&#39;, &#39;010-3333-1111&#39;, &#39;충청&#39;);INSERT INTO BLACK VALUES (&#39;데이빗&#39;, 23, &#39;남&#39;, &#39;010-4444-1111&#39;, &#39;강원&#39;);INSERT INTO BLACK VALUES (&#39;아만다&#39;, 24, &#39;여&#39;, &#39;010-5555-1111&#39;, &#39;제주&#39;);</code></pre><hr><blockquote><p>Dto 만들기</p></blockquote><h3 id="dto-BlackDto-java"><a href="#dto-BlackDto-java" class="headerlink" title="dto/BlackDto.java"></a>dto/BlackDto.java</h3><pre><code class="java">package dto;public class BlackDto &#123;    private String name;    private int age;    private String gender;    private String phone;    private String address;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public String getGender() &#123;        return gender;    &#125;    public void setGender(String gender) &#123;        this.gender = gender;    &#125;    public String getPhone() &#123;        return phone;    &#125;    public void setPhone(String phone) &#123;        this.phone = phone;    &#125;    public String getAddress() &#123;        return address;    &#125;    public void setAddress(String address) &#123;        this.address = address;    &#125;&#125;</code></pre><blockquote><p>Dao 만들기</p></blockquote><h3 id="dao-BlackDao-java"><a href="#dao-BlackDao-java" class="headerlink" title="dao/BlackDao.java"></a>dao/BlackDao.java</h3><pre><code class="java">package dao;import org.apache.ibatis.session.SqlSessionFactory;import mybatis.config.DBService;public class BlackDao &#123;    // 필드: SqlSessionFactory    // 모든 메소드는 factory에서 SqlSession을 생성하고    // SqlSession으로 DB 처리를 한다.    private SqlSessionFactory factory;    // Dao는 항상 Singleton 처리한다.    private BlackDao() &#123;        factory = DBService.getInstance().getFactory();    &#125;    private static BlackDao blackDao = new BlackDao();    public static BlackDao getInstance() &#123;        return blackDao;    &#125;    // DB처리 메소드&#125;</code></pre><blockquote><p>Common 에 PathNRedirect 만들기</p></blockquote><h3 id="PathNRedirect-java"><a href="#PathNRedirect-java" class="headerlink" title="PathNRedirect.java"></a>PathNRedirect.java</h3><pre><code class="java">package common;public class PathNRedirect &#123;    private String path;    private boolean isRedirect;    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123;        this.isRedirect = isRedirect;    &#125;&#125;</code></pre><blockquote><p>Command 만들기</p></blockquote><h3 id="BlackCommand-java"><a href="#BlackCommand-java" class="headerlink" title="BlackCommand.java"></a>BlackCommand.java</h3><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface BlackCommand &#123;    /* 일반 Command */    // public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);    /* AJAX Command */    // 요청한 JSP로 값을 반환하므로 path, redirect/forward가 필요 없다.    // 반환 값이 실제 데이터이다.    // 모든 반환 값은 String 타입으로 반환한다.    public String execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><blockquote><p>BlackJsonCommand.java</p></blockquote><pre><code class="java">package command;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.json.simple.JSONArray;import org.json.simple.JSONObject;import dao.BlackDao;import dto.BlackDto;public class BlackJSONCommand implements BlackCommand &#123;    @Override    public String execute(HttpServletRequest request, HttpServletResponse response) &#123;        /* 동작 확인용(DB를 사용 안 함) */        /*        JSONObject obj = new JSONObject();    // simple-json-1.1.1.jar(lib)        obj.put(&quot;name&quot;,&quot;james&quot;);        obj.put(&quot;age&quot;, 20);        obj.put(&quot;gender&quot;,&quot;여&quot;);        obj.put(&quot;phone&quot;,&quot;010-1111-1111&quot;);        obj.put(&quot;address&quot;,&quot;속초&quot;);        return obj.toJSONString();        */        /* DB에 들어가 데이터 가져오기 */        List&lt;BlackDto&gt; list = BlackDao.getInstance().list();        // list를 JSON으로 만들기        // JSONObject를 BlackDto로 보면 되기 때문에        // list는 JSONArray로 보면 된다.        JSONArray jsonArray = new JSONArray();        for (BlackDto blackDto : list) &#123;            JSONObject obj = new JSONObject();            obj.put(&quot;name&quot;, blackDto.getName());            obj.put(&quot;age&quot;, blackDto.getAge());            obj.put(&quot;gender&quot;, blackDto.getGender());            obj.put(&quot;phone&quot;, blackDto.getPhone());            obj.put(&quot;address&quot;, blackDto.getAddress());            jsonArray.add(obj);    // JSONArray는 ArrayList처럼 사용한다.        &#125;        return jsonArray.toJSONString();    &#125;&#125;</code></pre><blockquote><p>BlackStringCommand.java</p></blockquote><pre><code class="java">package command;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import dao.BlackDao;import dto.BlackDto;public class BlackStringCommand implements BlackCommand &#123;    @Override    public String execute(HttpServletRequest request, HttpServletResponse response) &#123;        // DB 사용 안 하고 출력         // return &quot;&lt;tr&gt;&lt;td colspan=\&quot;5\&quot;&gt;AJAX통신결과&lt;/td&gt;&lt;/tr&gt;&quot;;        List&lt;BlackDto&gt; list = BlackDao.getInstance().list();        String result = &quot;&quot;;        for (BlackDto blackDto : list) &#123;            result += &quot;&lt;tr&gt;&quot;;            result += &quot;&lt;td&gt;&quot; + blackDto.getName() + &quot;&lt;/td&gt;&quot;;            result += &quot;&lt;td&gt;&quot; + blackDto.getAge() + &quot;&lt;/td&gt;&quot;;            result += &quot;&lt;td&gt;&quot; + blackDto.getGender() + &quot;&lt;/td&gt;&quot;;            result += &quot;&lt;td&gt;&quot; + blackDto.getPhone() + &quot;&lt;/td&gt;&quot;;            result += &quot;&lt;td&gt;&quot; + blackDto.getAddress() + &quot;&lt;/td&gt;&quot;;            result += &quot;&lt;/tr&gt;&quot;;        &#125;        return result;    &#125;&#125;</code></pre><blockquote><p>Controller 만들기</p></blockquote><h3 id="BlackController-java"><a href="#BlackController-java" class="headerlink" title="BlackController.java"></a>BlackController.java</h3><pre><code class="java">package controller;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.BlackCommand;import command.BlackJSONCommand;import command.BlackStringCommand;@WebServlet(&quot;*.black&quot;)public class BlackController extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public BlackController() &#123;        super();    &#125;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        request.setCharacterEncoding(&quot;UTF-8&quot;);        response.setContentType(&quot;text/html; charset=UTF-8&quot;);        String requestURI = request.getRequestURI();        String contextPath = request.getContextPath();        String cmd = requestURI.substring(contextPath.length());        /*            AJAX를 처리하는 Controller는 PathNRedirect가 필요하지 않다.            PathNRedirect pathNRedirect = null;            AJAX는 실제 데이터를 String 타입으로 반환하므로  String result가 필요하다.        */        String result = null;        BlackCommand command = null;        switch (cmd) &#123;        case &quot;/getString.black&quot;:            command = new BlackStringCommand();            result = command.execute(request, response);            break;        case &quot;/getJSON.black&quot;:            command = new BlackJSONCommand();            result = command.execute(request, response);            break;        &#125;        /* AJAX를 처리하는 Controller는 PathNRedirect가 필요하지 않다.        String path = pathNRedirect.getPath();        boolean isRedirect = pathNRedirect.isRedirect();        if (isRedirect) &#123;            response.sendRedirect(path);        &#125; else &#123;            request.getRequestDispatcher(path).forward(request, response);        &#125;        */        // 반환 값(결과)을 요청한 곳으로 보내면 된다.        // 응답        PrintWriter out = response.getWriter();        out.println(result);    // AJAX 통신이 성공하면 succes: function(data) &#123;...&#125;의 data로 result가 전달된다.    &#125;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        doGet(request, response);    &#125;&#125;</code></pre><hr><h2 id="화면구성-프론트"><a href="#화면구성-프론트" class="headerlink" title="화면구성(프론트)"></a>화면구성(프론트)</h2><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;!-- AJAX 사용을 위한 script --&gt;&lt;script     src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;     integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot;     crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    // 페이지 로드 이벤트 (페이지 다 읽어서 id 먼저 파악하기)    // 1. $(document).ready(function()&#123;&#125;);    // 2. $(funtion()&#123;&#125;);    $(document).ready(function()&#123;        fn_getString();        fn_getJSON();    &#125;);    // 처리 함수    function fn_getString() &#123;        // id=btn1을 클릭하면 function()&#123;&#125; 실행        // 1. $(&#39;#btn1&#39;).click(function()&#123;&#125;);        // 2. $(&#39;body&#39;).on(&#39;click&#39;, &#39;#btn1&#39;, function()&#123;&#125;);        // 동작 확인 예제        /*        $(&#39;#btn1&#39;).click(function()&#123;            var str = &#39;&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;동작확인 예제입니다.&lt;/td&gt;&lt;/tr&gt;&#39;;            $(&#39;#content&#39;).append(str);    // 기존 요소를 살리고 추가                // $(&#39;#content&#39;).html(str);    // 기존 요소를 지우고 추가        &#125;);        */        $(&#39;#btn1&#39;).click(function()&#123;            $.ajax(&#123;                url: &#39;/17_AJAX/getString.black&#39;, // 서버에 요청, 요청 URL: BlackStringCommand를 호출한다.                type: &#39;get&#39;, // 요청방식: get, post                dataType: &#39;text&#39;,    // 받는(응답) 결과의 타입                success: function(responseText) &#123;    // responseText: BlackStringCommand의 반환 값이 저장된다.                    $(&#39;#content&#39;).empty();    // content 비우기                    $(&#39;#content&#39;).append(responseText);                &#125;,                error: function() &#123;                    alert(&#39;AJAX 통신 실패&#39;);                &#125;            &#125;);        &#125;);    &#125;    // end fn_getString()    function fn_getJSON() &#123;        $(&#39;#btn2&#39;).click(function() &#123;            $.ajax(&#123;                url: &#39;/17_AJAX/getJSON.black&#39;,                type: &#39;get&#39;,                dataType: &#39;JSON&#39;,  // 받는(응답) 결과의 타입(실제로는 JSON을 String으로 바꾼 결과를 받아온다.)                success: function(responseJSONArray) &#123;                    var result = &#39;&#39;;                    $.each(responseJSONArray, function(index, responseJSON) &#123;                        result += &#39;&lt;tr&gt;&#39;;                        result += &#39;&lt;td&gt;&#39; + responseJSON.name + &#39;&lt;/td&gt;&#39;;                        result += &#39;&lt;td&gt;&#39; + responseJSON.age + &#39;&lt;/td&gt;&#39;;                        result += &#39;&lt;td&gt;&#39; + responseJSON.gender + &#39;&lt;/td&gt;&#39;;                        result += &#39;&lt;td&gt;&#39; + responseJSON.phone + &#39;&lt;/td&gt;&#39;;                        result += &#39;&lt;td&gt;&#39; + responseJSON.address + &#39;&lt;/td&gt;&#39;;                        result += &#39;&lt;/tr&gt;&#39;;                    &#125;);                         $(&#39;#content&#39;).empty();                        $(&#39;#content&#39;).append(result);                &#125;,                error: function() &#123;                    alert(&#39;AJAX 통신 실패&#39;);                &#125;            &#125;)        &#125;);    &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;AJAX 통신버튼&lt;/h3&gt;    &lt;input type=&quot;button&quot; value=&quot;문자열&quot; id=&quot;btn1&quot; /&gt;    &lt;input type=&quot;button&quot; value=&quot;JSON&quot; id=&quot;btn2&quot; /&gt;    &lt;h3&gt;Black 테이블&lt;/h3&gt;    &lt;table border=&quot;1&quot;&gt;        &lt;thead&gt;            &lt;tr&gt;                &lt;td&gt;이름&lt;/td&gt;                &lt;td&gt;나이&lt;/td&gt;                &lt;td&gt;성별&lt;/td&gt;                &lt;td&gt;전화&lt;/td&gt;                &lt;td&gt;주소&lt;/td&gt;            &lt;/tr&gt;        &lt;/thead&gt;        &lt;tbody id=&quot;content&quot;&gt;        &lt;/tbody&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="결과화면"><a href="#결과화면" class="headerlink" title="결과화면"></a>결과화면</h2><img src="https://i.esdrop.com/d/1xG1IcRKOI.png"/><p><strong>문자열을 눌렀을때</strong></p><img src="https://i.esdrop.com/d/dfStk1MQxd.png"/><p><strong>JSON 버튼 눌렀을때</strong> 각각 밑에가뜸</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Ajax </tag>
            
            <tag> JSON </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-08 AJAX 실전(1)</title>
      <link href="2021/01/02/JSP-08/"/>
      <url>2021/01/02/JSP-08/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX-실전"><a href="#AJAX-실전" class="headerlink" title="AJAX 실전"></a>AJAX 실전</h2><h3 id="Ex01-JSONObject-java"><a href="#Ex01-JSONObject-java" class="headerlink" title="Ex01_JSONObject.java"></a>Ex01_JSONObject.java</h3><pre><code class="java">public class Ex01_JSONObject &#123;    public static void main(String[] args) &#123;        // 예제로 사용할 JSON        // &#123;&quot;name&quot;: &quot;emily&quot;, &quot;age&quot;: 20, &quot;isAdult&quot;: true&#125;        // OpenAPI에서 받아온 데이터로 생각합시다.        String strJSON = &quot;&#123;\&quot;name\&quot;: \&quot;emily\&quot;, \&quot;age\&quot;: 20, \&quot;isAdult\&quot;: true&#125;&quot;;        // 사용할 라이브러리: json-simple-1.1.1.jar        // 라이브러리 역할:  JSON데이터를 Java의 Map으로 처리        // 1. JSON Parser: 구문분석기 생성        JSONParser parser = new JSONParser();        // 2. JSON Object: parser가 분석한 결과를 저장할 객체        JSONObject obj = null;        // 3. parsing: 구문분석        try &#123;            obj = (JSONObject) parser.parse(strJSON);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // 4. JSON Object는 Map과 사용법이 같다.        // JSONObject 클래스를 Map 인터페이스를 구현해서 만들었으므로        System.out.println(obj.get(&quot;name&quot;));  // get(&quot;key&quot;)        System.out.println(obj.get(&quot;age&quot;));  // get(&quot;key&quot;)        System.out.println((boolean)obj.get(&quot;isAdult&quot;) ? &quot;성인&quot; : &quot;미성년자&quot;);  // get(&quot;key&quot;)    &#125;&#125;</code></pre><h3 id="Ex02-JSONArray-java"><a href="#Ex02-JSONArray-java" class="headerlink" title="Ex02_JSONArray.java"></a>Ex02_JSONArray.java</h3><pre><code class="java">public class Ex02_JSONArray &#123;    public static void main(String[] args) &#123;        // 예제로 사용할 JSON 배열        // [&#123;&#125;, &#123;&#125;]        // [&#123;&quot;name&quot;: &quot;emily&quot;, &quot;age&quot;: 20, &quot;isAdult&quot;: true&#125;, &#123;&quot;name&quot;: &quot;james&quot;, &quot;age&quot;: 19, &quot;isAdult&quot;: false&#125;]        String strJSON = &quot;[&#123;\&quot;name\&quot;: \&quot;emily\&quot;, \&quot;age\&quot;: 20, \&quot;isAdult\&quot;: true&#125;, &#123;\&quot;name\&quot;: \&quot;james\&quot;, \&quot;age\&quot;: 19, \&quot;isAdult\&quot;: false&#125;]&quot;;        // 1. JSON Parser 생성        JSONParser parser = new JSONParser();        // 2. JSON Array 준비        JSONArray list = null;        // 3. parsing        try &#123;            list = (JSONArray)parser.parse(strJSON);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // JSONArray는 Java의 ArrayList와 사용법이 같다.        System.out.println(list.get(0));        System.out.println(list.get(1));    &#125;&#125; </code></pre><h3 id="Ex03-toJSONString-java"><a href="#Ex03-toJSONString-java" class="headerlink" title="Ex03_toJSONString.java"></a>Ex03_toJSONString.java</h3><pre><code class="java">public class Ex03_toJSONString &#123;    public static void main(String[] args) &#123;        // 1. JSON 데이터 만들기        JSONObject obj = new JSONObject();        // Map 처럼 데이터를 저장할 수 있다.        obj.put(&quot;name&quot;, &quot;amanda&quot;);        obj.put(&quot;age&quot;, 22);        obj.put(&quot;isAdult&quot;, true);        // 2. JSON 데이터를 String으로 변환하기        String strJSON = obj.toJSONString();        System.out.println(strJSON);    &#125;&#125;</code></pre><p><a href="https://jakezo.github.io/2021/01/02/JSP-09/">다음 포스트</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Ajax </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-07 AJAX와 JSON</title>
      <link href="2021/01/02/JSP-07/"/>
      <url>2021/01/02/JSP-07/</url>
      
        <content type="html"><![CDATA[<h2 id="●-Ajax"><a href="#●-Ajax" class="headerlink" title="● Ajax"></a>● Ajax</h2><p>Ajax (Async Javascript And XML)는 웹 페이지에서 새로운 데이터를 보여주려고 할 때 웹페이지 전체를 새로고침 하지 않고, 보여주고자 하는 데이터가 포함된 페이지의 일부 만을 로드 하기 위한 기법입니다.</p><p>Ajax는 비동기 처리 모델 (또는 non-blocking 이라고도 함)을 사용하여 데이터를 처리합니다. 동기 처리 모델에서 브라우저는 자바스크립트 코드를 만나면 스크립트를 처리하기 전까지 다른 작업을 일시 중지하고, 자바스크립트 코드의 처리가 끝난 후 기존 작업을 진행합니다.</p><p>반면에 Ajax를 사용하면 브라우저는 서버에 데이터를 요청한 뒤 페이지의 나머지를 로드하고 페이지와 사용자의 상호작용을 처리합니다. 웹서버가 사용자에게 데이터를 전달하면 이벤트가 발생하게 되며, 데이터를 처리할 함수를 호출하게 됩니다. 이를 다시 정리하면 아래와 같습니다.</p><h3 id="Ajax의-장점"><a href="#Ajax의-장점" class="headerlink" title="Ajax의 장점"></a>Ajax의 장점</h3><p>Ajax를 이용하면 다음과 같은 장점이 있습니다.</p><ol><li><p>웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.</p></li><li><p>웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다.</p></li><li><p>웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.</p></li><li><p>백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.</p></li></ol><h3 id="Ajax-의-동작방식"><a href="#Ajax-의-동작방식" class="headerlink" title="Ajax 의 동작방식"></a>Ajax 의 동작방식</h3><ol><li>요청(request) - 브라우저가 서버에 정보를 요청한다.</li><li>서버의 동작 - 서버는 JSON, XML 등의 형식으로 데이터를 전달한다.</li><li>응답(response) - 브라우저에서 이벤트가 발생하여 콘텐츠를 처리한다.</li></ol><hr><h3 id="Ajax-의-구성요소"><a href="#Ajax-의-구성요소" class="headerlink" title="Ajax 의 구성요소"></a>Ajax 의 구성요소</h3><img src="https://i.esdrop.com/d/IO4qES3vWw.png" /><p> <em>AJAX 과정</em><br>#<br> 왼쪽 그림의 &lt;Ajax를 이용한 웹 응용 프로그램의 동작 원리&gt;는 다음과 같은 순서로 진행됩니다.</p><ol><li><p>: 사용자에 의한 요청 이벤트가 발생합니다.</p></li><li><p>: 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.</p></li><li><p>: 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.</p><p>(이때 웹 브라우저는 요청을 보내고 나서, 서버의 응답을 기다릴 필요 없이 다른 작업을 처리할 수 있습니다.)</p></li><li><p>: 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.</p></li></ol><p>5.와 6. : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.</p><p>(이때 전달되는 응답은 새로운 페이지를 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.)</p><ol start="7"><li><p>: 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.</p></li><li><p>: 결과적으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다.</p></li></ol><hr><h2 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h2><p>Ajax는 Async Javascript And XML의 약어로, 이름에 나와있는 것처럼 XML 형식으로 데이터를 주고 받을 수 있습니다. 하지만 최근에는 많은 경우 JSON (JavaScript Object Notation) 형식으로 데이터를 주고 받습니다.</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON (JavaScript Object Notation)은 자바스크립트의 객체 표현식과 유사한 방식으로 데이터를 주고 받는 방법입니다. 자바스크립트 객체와 거의 유사하지만 몇가지 차이점이 존재합니다.</p><p>JSON은 객체를 정의하지는 않습니다. 즉, 자바스크립트 객체가 아니라 객체 표현식으로 데이터를 표현합니다. 따라서 다른 도메인에서도 요청을 보낼 수 있습니다.</p><p>JSON은 기존에 많이 사용하던 XML 문법보다 훨씬 간결한 문법을 가지고 있습니다. 다만, 문법에 예민한 편입니다.</p><p>JSON 사용 시 악의적인 콘텐츠를 통한 공격이 있을 수 있으므로 주의해야 합니다.</p><p>아래는 JSON의 기본적인 문법입니다. 코드를 손쉽게 이해할 수 있을겁니다.</p><pre><code class="json">&#123;  &quot;key&quot;: &quot;반드시 큰따옴표로 둘러싸야한다&quot;,  &quot;value&quot;: &quot;값은 string, number, boolean, array, object, null이 올 수있다&quot;,  &quot;구분&quot;: &quot;키와 값은 : 을 이용해 구분하고 키/값 쌍은 , 로 구분한다&quot;,  &quot;name&quot;: &quot;Alice&quot;,  &quot;age&quot;: 10&#125;</code></pre><pre><code class="json">&#123;  &quot;users&quot;: [    &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 10, &quot;gender&quot;: &quot;female&quot;&#125;,    &#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 42, &quot;gender&quot;: &quot;male&quot;&#125;,    &#123;&quot;name&quot;: &quot;Chris&quot;, &quot;age&quot;: 21, &quot;gender&quot;: &quot;male&quot;&#125;  ]&#125;</code></pre><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML (eXtensible Markup Language)은 HTML과 유사한 구조를 가진 마크업 언어입니다. XML 은 모든 종류의 데이터 형식을 기술하기 위한 마크업 언어로써 개발되어졌습니다.</p><p>유연한 데이터 타입을 기술 할 수 있어서 복잡한 데이터 표현이 가능며, HTML과 동일한 방식의 DOM 메서드를 이용해 데이터의 처리가 가능합니다.</p><p>하지만 태그 형식으로 데이터를 저장하므로 실제 데이터 이외의 문자들이 사용되며 데이터가 많아질 경우 많은 양의 대역폭을 소비하게 되는 단점도 있습니다.</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;users&gt;  &lt;user&gt;    &lt;name&gt;Alice&lt;/name&gt;    &lt;age&gt;10&lt;/age&gt;    &lt;gender&gt;female&lt;/gender&gt;  &lt;/user&gt;  &lt;user&gt;    &lt;name&gt;Bob&lt;/name&gt;    &lt;age&gt;42&lt;/age&gt;    &lt;gender&gt;male&lt;/gender&gt;  &lt;/user&gt;  &lt;user&gt;    &lt;name&gt;Chris&lt;/name&gt;    &lt;age&gt;21&lt;/age&gt;    &lt;gender&gt;male&lt;/gender&gt;  &lt;/user&gt;&lt;/users&gt;</code></pre><p>더 자세한 내용은 다음 <a href="https://jakezo.github.io/2021/01/02/JSP-08/">다음 포스트</a> 를 참조하길 바랍니다.</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Ajax </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-03 CooKie</title>
      <link href="2021/01/02/JSP-03/"/>
      <url>2021/01/02/JSP-03/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie-설명"><a href="#Cookie-설명" class="headerlink" title="Cookie 설명"></a>Cookie 설명</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote><p><strong>쿠키는 서버에서 만든다</strong></p></blockquote><blockquote><p><strong>자바 영역은 서버 영역</strong></p></blockquote><ol><li><p>쿠키 생성<br>Cookie cookie = new Cookie(“name”, “emily”);    </p><p> 쿠키이름 :name, 쿠키 값 : emily</p></li><li><p>쿠키 유효 기간 정하기 (초 단위)</p><p> cookie.setMaxAge(-1); 브라우저 종료까지</p><p> cookie.setMaxAge(60);    1분(60초),</p><p> cookie.setMaxAge(60 * 60); 1시간</p><p> cookie.setMaxAge (60 * 60 * 24); // 1일</p></li><li><p>쿠키 저장 (클라이언트에게 쿠키 보내기)</p><p> response.addCookie(cookie);</p></li></ol><hr><h3 id="addCookie-01-jsp"><a href="#addCookie-01-jsp" class="headerlink" title="addCookie-01.jsp"></a>addCookie-01.jsp</h3><pre><code class="html">&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;%-- 크롬 &gt; 설정 &gt; 개인 정보 및 보안 &gt; 쿠키 및 기타 사이트 &gt; 모든 쿠키 및 사이트 데이터 보기 &gt; localhost 검색 --%&gt;        &lt;h3&gt;쿠키 확인하기&lt;/h3&gt;    &lt;ul&gt;        &lt;li&gt;쿠키이름 : &lt;%=cookie.getName() %&gt;&lt;/li&gt;        &lt;li&gt;쿠키유효기간 : &lt;%=cookie.getMaxAge() %&gt;&lt;/li&gt;        &lt;li&gt;쿠기 값 : &lt;%=cookie.getValue() %&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="Modified-Cookie-jsp"><a href="#Modified-Cookie-jsp" class="headerlink" title="Modified Cookie.jsp"></a>Modified Cookie.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;%--        특정 쿠키를 변경하는 방법        1. 서버가 클라이언트의 모든 쿠키를 읽어 들인다.        2. 변경할 쿠키를 찾는다.        3. 같은 이름의 쿠키를 만들어서 덮어쓰기 한다.     --%&gt;     &lt;%        // 1. 전체 쿠키를 읽어 들인다.          Cookie[] cookieList = request.getCookies();         // 2. 변경할 쿠키를 선언해 둔다.         Cookie ck = null;         // 3. 쿠키를 찾는다         if (cookieList != null &amp;&amp; cookieList.length != 0) &#123;             for (Cookie cookie : cookieList) &#123;                 if (cookie.getName().equals(&quot;name&quot;)) &#123;    // name 속성이 있다면                     ck = new Cookie(&quot;name&quot;, &quot;amanda&quot;);    // amanda 로 값을 바꾼다                     ck.setMaxAge(60 * 60 * 24);                                 response.addCookie(ck);    // 쿠키 저장                 &#125;             &#125;         &#125;     %&gt;     &lt;h3&gt;쿠키 확인하기&lt;/h3&gt;    &lt;ul&gt;        &lt;li&gt;쿠키이름 : &lt;%=ck.getName() %&gt;&lt;/li&gt;        &lt;li&gt;쿠키유효기간 : &lt;%=ck.getMaxAge() %&gt;&lt;/li&gt;        &lt;li&gt;쿠기 값 : &lt;%=ck.getValue() %&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="delete-Cookie-jsp"><a href="#delete-Cookie-jsp" class="headerlink" title="delete Cookie.jsp"></a>delete Cookie.jsp</h3><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;%        // 쿠키 삭제        // maxAge가 0인 같은 이름의 쿠키로 덮어쓰기        // 1. 모든 쿠키 읽어 들이기        Cookie[] cookieList = request.getCookies();        // 2. 쿠키가 존재하는지 확인        if (cookieList != null &amp;&amp; cookieList.length != 0) &#123;            // 3. 쿠키 순회하기            for (Cookie ck : cookieList) &#123;                if (ck.getName().equals(&quot;name&quot;)) &#123;                    // 4. 덮어쓰기 할 쿠키 생성                    Cookie cookie = new Cookie(&quot;name&quot;, &quot;의미없음&quot;);                    cookie.setMaxAge(0);    // 삭제를 위해 유효기간을 0으로 설정                    response.addCookie(cookie);                &#125;            &#125;        &#125;    %&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-22</title>
      <link href="2021/01/02/JSP-22/"/>
      <url>2021/01/02/JSP-22/</url>
      
        <content type="html"><![CDATA[<p>##java</p><blockquote><p>자바 공부해봅시다</p></blockquote><pre><code class="java">package ex01;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class Ex01_servlet */@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-01</title>
      <link href="2021/01/02/JSP-01/"/>
      <url>2021/01/02/JSP-01/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP-언어및-관련-내용들-정리"><a href="#JSP-언어및-관련-내용들-정리" class="headerlink" title="JSP 언어및 관련 내용들 정리"></a>JSP 언어및 관련 내용들 정리</h2><ul><li><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3></li></ul><pre><code class="s">1. Java Server Page2. HTML 문서내에서 JAVA 코드를 사용할 수 있는 서블릿(Servlet) 기반의 서버측 스크립트 언어이다    JSP 스크립트 요소    1. &lt;%@ 지시어 %&gt; : 지시어 (directive)    2. &lt;%! 선언부 %&gt; : 선언부 (declaration), 전역변수 선언, 메소드 정의    3. &lt;%= 표현식 %&gt; : 표현식 (expression), 결과 출력(변수, 메소드 호출 결과, 식)    4. &lt;% 스크립트릿 %&gt; : 스크립트릿 (scriptlet), Java 코드</code></pre><ul><li><h3 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h3></li></ul><pre><code class="s">EL1. Expression Language (표현언어)2. JSP의 새로운 스크립트 언어이다.3. 기존의 표현식(&lt;%=표현식%&gt;)을 대체하는 역할이다.4. 대체방식    &lt;%=표현식%&gt; -&gt; $&#123;표현언어&#125;5. 데이터를 저장할 수 있는 4개 영역에서 사용할 수 있다.    1) pageContext    2) request    3) session    4) application6. 각 영역의 우선순위    pageContext &gt; request &gt; session &gt; application7. 각 영역의 스코프 키워드    1) pageContext: pageScope    2) request: requestScope    3) session: sessionScope    4) application: applicationScope8. 저장이 &quot;속성&quot;으로 된 경우 다음과 같이 사용한다.    1) pageContext.setAttribute(&quot;name&quot;, &quot;에밀리&quot;) -&gt; $&#123;name&#125;                                                    -&gt; $&#123;pageScope.name&#125;    2) request.setAttribute(&quot;age&quot;, 25) -&gt; $&#123;age&#125;                                        -&gt; $&#123;requestScope.age&#125;9. request에 파라미터로 저장된 경우 다음과 같이 사용한다.    1) &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; -&gt; $&#123;param.id&#125;    2) &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; /&gt; -&gt; $&#123;paramValues.hobbies[0]&#125;        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; /&gt; -&gt; $&#123;paramValues.hobbies[1]&#125;10. EL 연산자    1) +    2) -    3) *    4) /, div : 나누기    5) %, mod : 나머지    6) &gt;, gt  : 크다   &#123;a gt 5&#125;, &#123;a &gt; 5&#125;    7) &gt;=, ge : 크거나 같다    8) &lt;, lt  : 작다    9) &lt;=, le : 작거나 같다    10) ==, eq : 같다    11) !=, ne : 같지 않다    12) and    : 그리고    13) or     : 또는    14) not    : 부정    15) empty  : 비어 있다</code></pre><ul><li><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3></li></ul><pre><code class="s">JSTL(JavaServer Pages Standard Tag Library)1. JSP 표준 태그 라이브러리(여러 프로그램이 공통으로 사용하는 코드를 모아놓은 집합)의 약어2. 이미 만들어진 태그를 이용하여 JSP환경에서 보다 가독성 좋게 JAVA를 사용할 수 있다.3. 기본적으로 제공하는 태그 외에도 자신만의 태그를 만들어서 사용할 수 있다.taglib를 사용하려면 taglib 지시어를 작성해야 한다.    1. 코어(core) 라이브러리: if, for문        &lt;%@ taglib uri=&quot;&quot; prefix=&quot;c&quot; %&gt;    2. 형식(fmt) 라이브러리: 숫자, 날짜 형식        &lt;%@ taglib uri=&quot;&quot; prefix=&quot;fmt&quot; %&gt;</code></pre><hr><h2 id="그-외"><a href="#그-외" class="headerlink" title="그 외"></a>그 외</h2><ul><li><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3></li></ul><p><strong>자바에서 DB프로그래밍을 하기 위해 사용되는 API</strong></p><ul><li><h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h3></li></ul><p><strong>데이터 베이스에 연결하여 사용하는 경우 데이터 베이스에 접속하기 위해 Connection 등의 객체를 생성해야 한다.이게 혼자서 쓸 때는 접속 할 때마다 객체를 생성해도 괜찮지만 사람들이 많이 접속하는 사이트에서는 사용자 한 명당 하나씩 계속 객체를 생성하게 되면 서버가 객체를 생성하는데 리소스를 많이 쓰게 된다.이러한 현상을 해결하고자 ‘커넥션 풀’이라는 공간을 만들어 커넥션 객체들을 담아놓고 차후 사용자가 데이터 베이스에 접속을 시도하면 커넥션 풀에 담겨있는 커넥션 객체를 하나하나 꺼내주는 방법을 적용시켰다.이것이 바로 DBCP(DataBase Connection Pool)이다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp</title>
      <link href="2021/01/02/jsp/"/>
      <url>2021/01/02/jsp/</url>
      
        <content type="html"><![CDATA[<p>스크립트릿</p><pre><code class="s">1. Java Server Page2. HTML 문서내에서 JAVA 코드를 사용할 수 있는 서블릿(Servlet) 기반의 서버측 스크립트 언어이다    JSP 스크립트 요소    1. &lt;%@ 지시어 %&gt; : 지시어 (directive)    2. &lt;%! 선언부 %&gt; : 선언부 (declaration), 전역변수 선언, 메소드 정의    3. &lt;%= 표현식 %&gt; : 표현식 (expression), 결과 출력(변수, 메소드 호출 결과, 식)    4. &lt;% 스크립트릿 %&gt; : 스크립트릿 (scriptlet), Java 코드</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="2021/01/02/Java/"/>
      <url>2021/01/02/Java/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my new poas</title>
      <link href="2021/01/02/my-new-poas/"/>
      <url>2021/01/02/my-new-poas/</url>
      
        <content type="html"><![CDATA[<p>##java</p><blockquote><p>자바 공부해봅시다</p></blockquote><pre><code class="java">package ex01;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class Ex01_servlet */@WebServlet(&quot;/Ex01_servlet&quot;)public class Ex01_servlet extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    /**     * Default constructor.      *      * 1. 생성자     *         생성자 호출 뒤 init() 메소드가 호출된다.     */    public Ex01_servlet() &#123;        System.out.println(&quot;생성자 호출&quot;);    &#125;    /**     * @see Servlet#init(ServletConfig)     *      * 2. init() 메소드     *    1) 최초 한 번만 호출된다.     *    2) 초기화 용도로 사용할 수 있다.     *    3) init() 호출 뒤 service() 메소드가 호출된다.     */    public void init(ServletConfig config) throws ServletException &#123;        System.out.println(&quot;init() 호출&quot;);    &#125;    /**     * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)     *      * 3. service() 메소드     *    1) 실제 처리를 할 수 있다.     *    2) 매개변수-1     *       (1) 타입: HttpServletRequest     *       (2) 변수: request     *       (3) 사용자의 요청을 저장하는 변수이다.     *           예) 사용자가 입력한 검색어, 아이디, 비밀번호 등이 저장된 곳이다.     *    3) 매개변수-2     *       (1) 타입: HttpServletResponse     *       (2) 변수: response     *       (3) 서버의 응답 정보를 저장하는 변수이다.     *           예) 검색어의 결과, 로그인 성공 유무 등이 저장된 곳이다.     */    protected void service(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;service() 호출&quot;);        if (request.getMethod().equalsIgnoreCase(&quot;GET&quot;)) &#123;  // GET방식의 요청이라면            doGet(request, response);  // doGet() 메소드 호출        &#125; else &#123;            doPost(request, response);        &#125;    &#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     *      * 4. doGet()     *    1) GET 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) GET 방식의 요청 방법     *       (1) &lt;form method=&quot;get&quot;&gt;     *       (2) $.ajax(&#123; type: &#39;get&#39;, &#125;);     */    protected void doGet(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doGet() 호출&quot;);        response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());    &#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     *      * 5. doPost()     *    1) POST 방식의 요청인 경우에 자동으로 호출되는 메소드이다. (service() 메소드가 없으면)     *    2) 요청(request)과 응답(response)를 모두 doGet() 메소드로 넘기고 자신은 아무 일도 하지 않는다.     */    protected void doPost(HttpServletRequest request, HttpServletResponse response)     throws ServletException, IOException &#123;        System.out.println(&quot;doPost() 호출&quot;);        doGet(request, response);    &#125;    /**     * @see Servlet#destroy()     *      * 6. destroy()     *      *    웹 서버에서 프로젝트가 소멸되면 자동으로 호출된다.     */    public void destroy() &#123;        System.out.println(&quot;destroy() 호출&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/01/hello-world/"/>
      <url>2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP-15 네이버 캡차 (capcha)</title>
      <link href="2020/12/29/JSP-15/"/>
      <url>2020/12/29/JSP-15/</url>
      
        <content type="html"><![CDATA[<h2 id="캡차-Capcha-란-무엇일까"><a href="#캡차-Capcha-란-무엇일까" class="headerlink" title="캡차(Capcha) 란 무엇일까"></a>캡차(Capcha) 란 무엇일까</h2><p>로그인 시 자동 입력 방지를 위해 사람의 눈으로 식별가능한 문자가 포함된 이미지를 전송하고 입력값을 검증하는 REST API 입니다.</p><h2 id="캡차-만들기-시작"><a href="#캡차-만들기-시작" class="headerlink" title="캡차 만들기 시작"></a>캡차 만들기 시작</h2><h3 id="만들고-싶은-캡챠-화면"><a href="#만들고-싶은-캡챠-화면" class="headerlink" title="만들고 싶은 캡챠 화면"></a>만들고 싶은 캡챠 화면</h3><img src="https://i.esdrop.com/d/kUJdbiA2V8.png"/><blockquote><p>위와 같은 캡챠 화면을 목표로 만들어 봅시다!</p></blockquote><h3 id="필요한-라이브러리"><a href="#필요한-라이브러리" class="headerlink" title="필요한 라이브러리"></a>필요한 라이브러리</h3><ul><li>json-simple-1.1.1</li></ul><hr><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><blockquote><p>인덱스 페이지를 만들어 처음 화면을 구성한다.</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;/18_CAPCHA/getImageCaptcha.do&quot;&gt;로그인하러 가기&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><blockquote><p><strong>PathNRedirect.java</strong></p></blockquote><hr><p><code>pathNRedirect</code> class 를 만들어 경로와 redirect 여부를 반환해준다.</p><pre><code class="java">package common;public class PathNRedirect &#123;    private String path; //경로    private boolean isRedirect;  // 리다이렉트 여부.    public String getPath() &#123;        return path;    &#125;    public void setPath(String path) &#123;        this.path = path;    &#125;    public boolean isRedirect() &#123;        return isRedirect;    &#125;    public void setRedirect(boolean isRedirect) &#123; // Redirect 여부를 묻는 메소드 true: forward | false: redirect        this.isRedirect = isRedirect;     &#125;&#125;</code></pre><hr><h3 id="Controller-java"><a href="#Controller-java" class="headerlink" title="Controller.java"></a>Controller.java</h3><blockquote><p>컨트롤러를 이용해 요청을 처리한다.</p></blockquote><pre><code class="java">package controller;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import command.Command;import command.GetImageCaptchaCommand;import command.InputKeyCheckCommand;import common.PathNRedirect;@WebServlet(&quot;*.do&quot;) // .do suffix가 .do인 모든 요청을 처리하는 Controllerpublic class Controller extends HttpServlet &#123;    private static final long serialVersionUID = 1L;    public Controller() &#123;        super();        // TODO Auto-generated constructor stub    &#125;protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    request.setCharacterEncoding(&quot;utf-8&quot;);    response.setContentType(&quot;text/html; charset=UTF-8&quot;);    String requestUri = request.getRequestURI(); // requestUri 요청 주소 전체를 의미        // /18_CAPCHA/*.do    String contextPath = request.getContextPath(); // ContextPath: 프로젝트 이름 18_CAPCHA// /18_CAPCHA    String cmd = requestUri.substring(contextPath.length()); // /*.do    PathNRedirect pathNRedirect = null;    Command command = null;</code></pre><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p><code>Command</code> 인터페이스 생성 (MVC의 Model 공통 처리)</p><blockquote><p>Model</p></blockquote><ol><li>Controller에게 결과와 응답할 VIEW를 반환한다.<ol><li>반환값은 응답VIEW이다.</li><li>결과값은 request에 저장한다.</li></ol></li><li>매개변수로 HttpServletRequest 클래스 타입의 request가 필요하다.</li><li>매개변수로 HttpServletResponse 클래스 타입의 response도 필요할 수 있다.</li></ol><blockquote><p>Command</p></blockquote><pre><code class="java">package command;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.PathNRedirect;public interface Command &#123;  public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response);&#125;</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><blockquote><p>Controller의 역할</p></blockquote><ol><li><p>요청을 확인하고, 요청을 처리할 Model(Command)을 호출한다.</p></li><li><p>Model(Command)이 반환한 결과와 응답VIEW를 이용해서 페이지이동(응답)을 한다.</p><pre><code> Today today = new Today(); String path = today.execute(request, response); path로 이동 Today Command가 request에 result를 저장해 주었으므로 이를 전달하기 위해서 forward한다.</code></pre></li></ol><hr><p><code>Controller</code>의 doGet메소드에 추가 작성</p><pre><code class="java">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    request.setCharacterEncoding(&quot;utf-8&quot;);    response.setContentType(&quot;text/html; charset=UTF-8&quot;);    String requestUri = request.getRequestURI(); // requestUri 요청 주소 전체를 의미        // /18_CAPCHA/*.do    String contextPath = request.getContextPath(); // ContextPath: 프로젝트 이름 18_CAPCHA// /18_CAPCHA    String cmd = requestUri.substring(contextPath.length()); // /*.do    PathNRedirect pathNRedirect = null;    Command command = null;    switch(cmd)&#123;    case &quot;/getImageCaptcha.do&quot;:        command = new GetImageCaptchaCommand();        pathNRedirect = command.execute(request, response);        break;    &#125;</code></pre><p><code>indexPage.java</code> 의 로그인하러 가기<br>의 /getImageCaptcha.do 요청을 Controller에서 처리해 준다.</p><blockquote><p>로그인을 하러 가면 캡차 이미지가 생성됨</p></blockquote><h3 id="GetImageCaptchaCommand-생성"><a href="#GetImageCaptchaCommand-생성" class="headerlink" title="GetImageCaptchaCommand 생성"></a>GetImageCaptchaCommand 생성</h3><blockquote><p> 캡차 이미지 생성을 위해 만든다.</p></blockquote><hr><p><strong>캡차 키 발급 요청</strong> 과  <strong>이미지를 다운받는다.</strong></p><pre><code class="java">package command;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.Date;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import common.PathNRedirect;public class GetImageCaptchaCommand implements Command &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        // 네이버 캡차 API        // 1) 캡차 키 발급 요청하기        // 2) 캡차 이미지 요청하기        String clientId = &quot;u7aGTrFmp005OR4CJWy4&quot;; //애플리케이션 클라이언트 아이디값&quot;;        String clientSecret = &quot;V00UJonEUP&quot;; //애플리케이션 클라이언트 시크릿값&quot;;        // 1) 캡차 키 발급 요청하기        String code = &quot;0&quot;; // 키 발급시 0,  캡차 이미지 비교시 1로 세팅        String apiURL = &quot;https://openapi.naver.com/v1/captcha/nkey?code=&quot; + code;        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        String responseBody = get(apiURL, requestHeaders);        // System.out.println(responseBody);  // &#123;&quot;key&quot;:&quot;bgbl5MwSZRnQOllo&quot;&#125;        // responseBody는 &#123;&quot;key&quot;:&quot;bgbl5MwSZRnQOllo&quot;&#125;와 같은 형식의 JSON 데이터        // json-simple-1.1.1.jar를 이용해서 responseBody에서 &quot;bgbl5MwSZRnQOllo&quot;를 뺀다.        JSONParser parser = new JSONParser();        JSONObject obj = null;        try &#123;            obj = (JSONObject)parser.parse(responseBody);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        // 입력값 비교(InputKeyCheckCommand)에서 캡차 키를 필요로 하므로,        // session에 올려 둔다.        // session은 request에서 알아낸다.        HttpSession session = request.getSession();        session.setAttribute(&quot;key&quot;, (String)obj.get(&quot;key&quot;)); // #key session에 보관        // 2) 캡차 이미지 요청하기        String key = (String)obj.get(&quot;key&quot;); // https://openapi.naver.com/v1/captcha/nkey 호출로 받은 키값        // 이미지 수신 실패용(아무 키나 넘김) String key = &quot;aldfakjlkajgj;fljg;sl&quot;;        String apiURL2 = &quot;https://openapi.naver.com/v1/captcha/ncaptcha.bin?key=&quot; + key;        // requestHeaders는 1) 캡차 키 발급 요청에서 이미 생성했으므로 또 생성할 필요가 없다.        /*        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        */        // responseBody2        // 1) 성공: 이미지 캡차가 생성되었습니다.        // 2) 실패: &#123;&quot;result&quot;:false,&quot;errorMessage&quot;:&quot;Invalid key.&quot;,&quot;errorCode&quot;:&quot;CT001&quot;&#125;        // String responseBody2 = get2(apiURL2, requestHeaders);        // 성공했을 때는 캡차 이미지 파일이 생성되므로 생성된 파일명을 알아야 한다.        // responseBody2 -&gt; filename        String filename = get2(request, apiURL2, requestHeaders);        // System.out.println(filename);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;login/loginPage.jsp&quot;);        pathNRedirect.setRedirect(false);  // request에 directory, filename 저장되어 있으므로 forward        return pathNRedirect;    &#125;    // 1) 캡차 키 발급 요청용 get() 메소드    private static String get(String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                return readBody(con.getInputStream());            &#125; else &#123; // 에러 발생                return readBody(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    // 1) 캡차 키 발급 요청용 connect() 메소드    // 2) 캡차 이미지 요청용 connect() 메소드    private static HttpURLConnection connect(String apiUrl)&#123;        try &#123;            URL url = new URL(apiUrl);            return (HttpURLConnection)url.openConnection();        &#125; catch (MalformedURLException e) &#123;            throw new RuntimeException(&quot;API URL이 잘못되었습니다. : &quot; + apiUrl, e);        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;연결이 실패했습니다. : &quot; + apiUrl, e);        &#125;    &#125;    // 1) 캡차 키 발급 요청용 readBody() 메소드    private static String readBody(InputStream body)&#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;    // 2) 캡차 이미지 요청용 get2() 메소드    private static String get2(HttpServletRequest request, String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                // getImage()에 request를 전달하려면 get2() 메소드가 HttpServletRequest request를 받아와야 한다.                // 기존: get2(String apiUrl, Map&lt;String, String&gt; requestHeaders) &#123;                // 수정: get2(HttpServletRequest request, String apiUrl, Map&lt;String, String&gt; requestHeaders) &#123;                return getImage(request, con.getInputStream());            &#125; else &#123; // 에러 발생                return error(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    // 2) 캡차 이미지 요청용 getImage() 메소드    private static String getImage(HttpServletRequest request, InputStream is)&#123;        int read;        byte[] bytes = new byte[1024];        // 랜덤한 이름으로 파일 생성(X)        // 현재 시간: timestamp으로 파일 생성(O)        String filename = Long.valueOf(new Date().getTime()).toString();        // 캡차 이미지가 저장될 storage 디렉토리의 경로를 알아낸다.        String directory = &quot;storage&quot;;        // HttpServletRequest request가 있어야 realPath를 구할 수 있다.        // 따라서 execute() 메소드에게서 HttpServletRequest request를 받아 온다.        // 기존: getImage(InputStream is) &#123; ... &#125;        // 수정: getImage(HttpServletRequest request, InputStream is)               String realPath = request.getServletContext().getRealPath(directory);        // storage 디렉토리가 안 생기면 강제로 만들어 주는 코드        File dir = new File(realPath);  // File dir에는 storage 디렉토리 정보가 저장된다.        if ( !dir.exists() ) &#123;  // dir(storage 디렉토리)이 없으면            dir.mkdirs();  // 해당 디렉토리(storage 디렉토리)를 생성하라.        &#125;        // storage 디렉토리 경로를 포함하도록 File f를 수정한다.        // 기존: File f = new File(filename + &quot;.jpg&quot;);        // 수정: File f = new File(realPath, filename + &quot;.jpg&quot;);        File f = new File(realPath, filename + &quot;.jpg&quot;);        try(OutputStream outputStream = new FileOutputStream(f))&#123;            f.createNewFile();            while ((read = is.read(bytes)) != -1) &#123;                outputStream.write(bytes, 0, read);            &#125;            // directory(상대경로)와 filename을 JSP(로그인화면)에서 확인할 수 있도록            // request에 저장해 둔다.            // GetImageCaptchaCommand의 execute() 메소드는 PathNRedirect를 반환하는데,            // 이 때 반환방법은 forward이다. (request의 데이터 유지를 위해서)            request.setAttribute(&quot;filename&quot;, filename + &quot;.jpg&quot;);            request.setAttribute(&quot;directory&quot;, directory);            // return &quot;이미지 캡차가 생성되었습니다.&quot;;            return filename;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;이미지 캡차 파일 생성에 실패 했습니다.&quot;,e);        &#125;    &#125;    // 2) 캡차 이미지 요청용 error() 메소드    private static String error(InputStream body) &#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;&#125;</code></pre><hr><p><code>GetImageCaptchaCommand</code>메소드 순서 요약</p><ol><li>네이버 캡차 API에서 clientId 와 password를 발급 받는다.</li><li>캡차 키 요청(get() 메소드 활용)을 받고 Json parse를위한 JSONSimple 라이브러리 사용</li><li>응답받은 키로 이미지를 요청(get2() 메소드 활용 과 동시에 get2()내부에서 getImage() 메소드도 실행됨.)</li><li>getImage()메소드로 이미지 생성</li><li>파일명과 파일위치를 반환받아 request 영역에 저장 (String filename, directory)</li></ol><hr><h3 id="indexPage-gt-loginPage"><a href="#indexPage-gt-loginPage" class="headerlink" title="indexPage -&gt;  loginPage"></a>indexPage -&gt;  loginPage</h3><hr><p><code>indexPage.jsp</code> 에서 loginPage로 이동해서 생성된 캡차이미지 활용</p><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;로그인&lt;/h3&gt;    &lt;form action=&quot;/18_CAPTCHA/login.do&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;id&quot; placeholder=&quot;아이디&quot; /&gt;&lt;br/&gt;        &lt;input type=&quot;password&quot; name=&quot;pw&quot; placeholder=&quot;비밀번호&quot; /&gt;&lt;br/&gt;&lt;br/&gt;        아래 이미지를 보이는 대로 입력하세요.&lt;br/&gt;        &lt;img alt=&quot;캡차이미지&quot; src=&quot;$&#123;directory&#125;/$&#123;filename&#125;&quot; style=&quot;width: 200px;&quot;&gt;        &lt;input type=&quot;button&quot; value=&quot;새로고침&quot; onclick=&quot;location.href=&#39;/18_CAPTCHA/getImageCaptcha.do&#39;&quot; /&gt;&lt;br/&gt;        &lt;input type=&quot;text&quot; name=&quot;input_key&quot; placeholder=&quot;자동입력 방지문자&quot; /&gt;&lt;br/&gt;&lt;br/&gt;        &lt;button&gt;로그인&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="login-do-Controller-생성"><a href="#login-do-Controller-생성" class="headerlink" title="login.do Controller 생성"></a>login.do Controller 생성</h3><hr><blockquote><p>위 코드 (<code>index의-로그인하러-가기</code>)에 추가</p></blockquote><pre><code class="java">switch(cmd)&#123;    case &quot;/getImageCaptcha.do&quot;:        command = new GetImageCaptchaCommand();        pathNRedirect = command.execute(request, response);        break;    case &quot;/loginPage.do&quot;;        command = new InputKeyCheckCommand();        pathNRedirect = command.execute(request, response);        break;    &#125;</code></pre><h3 id="InputKeyCheckCommand"><a href="#InputKeyCheckCommand" class="headerlink" title="InputKeyCheckCommand"></a>InputKeyCheckCommand</h3><blockquote><p> <code>login.do</code> 의 모델 captcha 이미지와 입력값을 비교한다.</p></blockquote><hr><pre><code class="java">package command;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import common.PathNRedirect;public class InputKeyCheckCommand implements Command &#123;    @Override    public PathNRedirect execute(HttpServletRequest request, HttpServletResponse response) &#123;        String clientId = &quot;u7aGTrFmp005OR4CJWy4&quot;;  //애플리케이션 클라이언트 아이디값&quot;;        String clientSecret = &quot;V00UJonEUP&quot;;  //애플리케이션 클라이언트 시크릿값&quot;;        String code = &quot;1&quot;; // 키 발급시 0,  캡차 이미지 비교시 1로 세팅        // session에서 key 가져오면 발급 받은 캡차 발급 키를 알 수 있다.        HttpSession session = request.getSession();        String key = (String)session.getAttribute(&quot;key&quot;);  // 캡차 키 발급시 받은 키값        String value = request.getParameter(&quot;input_key&quot;);  // 사용자가 입력한 캡차 이미지 글자값        String apiURL = &quot;https://openapi.naver.com/v1/captcha/nkey?code=&quot; + code + &quot;&amp;key=&quot; + key + &quot;&amp;value=&quot; + value;        Map&lt;String, String&gt; requestHeaders = new HashMap&lt;&gt;();        requestHeaders.put(&quot;X-Naver-Client-Id&quot;, clientId);        requestHeaders.put(&quot;X-Naver-Client-Secret&quot;, clientSecret);        String responseBody = get(apiURL, requestHeaders);        System.out.println(responseBody);        // responseBody        // 성공: &#123;&quot;result&quot;:true,&quot;responseTime&quot;:21.39&#125;        // 실패: &#123;&quot;result&quot;:false,&quot;responseTime&quot;:5.76&#125;        // result를 responseBody에서 꺼낸다.        JSONParser parser = new JSONParser();        JSONObject obj = null;        try &#123;            obj = (JSONObject)parser.parse(responseBody);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        boolean result = (boolean)obj.get(&quot;result&quot;);        // loginResult.jsp로 result값(true, false)을 보내기 위해서        // request에 result를 저장해 둔다. 그리고 forward 한다.        request.setAttribute(&quot;result&quot;, result);        PathNRedirect pathNRedirect = new PathNRedirect();        pathNRedirect.setPath(&quot;login/loginResult.jsp&quot;);        pathNRedirect.setRedirect(false);  // forward        return pathNRedirect;    &#125;    private static String get(String apiUrl, Map&lt;String, String&gt; requestHeaders)&#123;        HttpURLConnection con = connect(apiUrl);        try &#123;            con.setRequestMethod(&quot;GET&quot;);            for(Map.Entry&lt;String, String&gt; header :requestHeaders.entrySet()) &#123;                con.setRequestProperty(header.getKey(), header.getValue());            &#125;            int responseCode = con.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 정상 호출                return readBody(con.getInputStream());            &#125; else &#123; // 에러 발생                return readBody(con.getErrorStream());            &#125;        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 요청과 응답 실패&quot;, e);        &#125; finally &#123;            con.disconnect();        &#125;    &#125;    private static HttpURLConnection connect(String apiUrl)&#123;        try &#123;            URL url = new URL(apiUrl);            return (HttpURLConnection)url.openConnection();        &#125; catch (MalformedURLException e) &#123;            throw new RuntimeException(&quot;API URL이 잘못되었습니다. : &quot; + apiUrl, e);        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;연결이 실패했습니다. : &quot; + apiUrl, e);        &#125;    &#125;    private static String readBody(InputStream body)&#123;        InputStreamReader streamReader = new InputStreamReader(body);        try (BufferedReader lineReader = new BufferedReader(streamReader)) &#123;            StringBuilder responseBody = new StringBuilder();            String line;            while ((line = lineReader.readLine()) != null) &#123;                responseBody.append(line);            &#125;            return responseBody.toString();        &#125; catch (IOException e) &#123;            throw new RuntimeException(&quot;API 응답을 읽는데 실패했습니다.&quot;, e);        &#125;    &#125;&#125;</code></pre><p>request에 비교한 입력값에대한 결과를 <code>boolean</code> 타입으로 저장시켜 준다.<br>그리고 Path와 Redirect 유무를 가진 <strong>PathNRedirect</strong> 를 반환해준다.</p><h3 id="결과-출력-Page"><a href="#결과-출력-Page" class="headerlink" title="결과 출력 Page"></a>결과 출력 Page</h3><blockquote><p>loginPage.jsp</p></blockquote><pre><code class="html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;script&gt;    if ( $&#123;result&#125; ) &#123;        alert(&#39;성공입니다.&#39;);        location.href = &#39;/18_CAPTCHA/index.do&#39;;    &#125; else &#123;        alert(&#39;실패입니다.&#39;);        // history.back();  새로운 이미지를 받아서 다시 시도할 수 있도록 새로운 캡차 이미지를 받아야 한다.        location.href = &#39;/18_CAPTCHA/getImageCaptcha.do&#39;;    &#125;&lt;/script&gt;</code></pre><h2 id="결과-페이지"><a href="#결과-페이지" class="headerlink" title="결과 페이지"></a>결과 페이지</h2><img src="https://i.esdrop.com/d/yKWHJ8GAN2.png"/><p>그 후에 맨 위와 같은 화면이 나오고</p><img src="https://i.esdrop.com/d/Es5ZlPkRxN.png"/><p>캡챠를 제대로 입력하면 뜨는 화면입니다.</p>]]></content>
      
      
      <categories>
          
          <category> JAVA-WEB </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Captcha </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
